[
  {
    "title": "https://portal.thirdweb.com/react/v5",
    "content": "React SDK\nthirdweb/react\nexports various Components and Hooks to easily connect wallets & interact with smart contracts\nQuickstart\nFollow this\nguide\nto get started with the React SDK. Getting started\nGet started with the React SDK\nHave you generated a client ID? You'll need a client ID to access the SDK's free blockchain APIs, storage, and more. Generate\nStarter kits\nYou can quickly create a new project with the thirdweb CLI\nnpx\nthirdweb\ncreate\napp\n--legacy-peer-deps\nor clone the the Next.js or Vite starter repo:\nNext.js + thirdweb starter repo\nVite + thirdweb starter repo\nUsage\nMany of the components and hooks in the React SDK use a\nclient\nto interface with the core SDK and your private RPC endpoints. TypeScript\nFollow the TypeScript docs for functions and types\nThirdwebProvider\nSetup the ThirdwebProvider\nConnecting Wallets\nConnect wallets using ConnectButton, ConnectEmbed or useConnect hook\nSupported Wallets\nSee all 350+ wallets supported by the Connect SDK\nUI Components\nUI components for wallet connection and transactions\nHooks\nHooks for wallet connection and transactions"
  },
  {
    "title": "AutoConnect",
    "content": "AutoConnect\nAutoConnect last connected wallet on page reload or revisit. This is useful if you are manually connecting the wallets using the\nuseConnect\nhook and want to auto connect the last connected wallets on page reload or revisit. To check if the wallet in in the process of auto connecting, you can use the\nuseIsAutoConnecting\nhook. Example\nimport\n{ AutoConnect }\nfrom\n\"thirdweb/react\"\n;\nimport\n{ createWallet, inAppWallet }\nfrom\n\"thirdweb/wallets\"\n;\n// list of wallets that your app uses\nconst\nwallets\n=\n[\ninAppWallet\n(),\ncreateWallet\n(\n\"io.metamask\"\n),\ncreateWallet\n(\n\"me.rainbow\"\n),\n];\nfunction\nExample\n() {\nreturn\n(\n<\nAutoConnect\nwallets\n=\n{\nwallets\n}\nclient\n=\n{\nclient\n}\nappMetadata\n=\n{\nappMetadata\n}\n/>\n);\n}\nSignature\nfunction\nAutoConnect\n(\nprops\n:\nAutoConnectProps\n)\n:\nElement\n;\nParameters\nprops\nObject of type\nAutoConnectProps\n. :\nArray\n<\nWallet\n>;\n};\nReturns\nReturn Type\nlet\nreturnType\n:\nElement\n;"
  },
  {
    "title": "ClaimButton",
    "content": "ClaimButton\nThis button is used to claim tokens (NFT or ERC20) from a given thirdweb Drop contract. there are 3 type of Drop contract: NFT Drop (DropERC721), Edition Drop (DropERC1155) and Token Drop (DropERC20)\nLearn more: https://thirdweb.com/explore/drops\nNote: This button only works with thirdweb Drop contracts. For custom contract, please use\nTransactionButton\nExample\nExample for claiming NFT from an NFT Drop contract\nimport\n{ ClaimButton }\nfrom\n\"thirdweb/react\"\n;\nimport\n{ ethereum }\nfrom\n\"thirdweb/chains\"\n;\n<\nClaimButton\ncontractAddress\n=\n\"0x...\"\n// contract address of the NFT Drop\nchain\n=\n{\nethereum\n}\nclient\n=\n{\nclient\n}\nclaimParams\n=\n{\n{\ntype:\n\"ERC721\"\n,\nquantity:\n1\nn\n,\n// claim 1 token\n}\n}\n>\nClaim now\n</\nClaimButton\n>;\nFor Edition Drop (ERC1155)\n<\nClaimButton\ncontractAddress\n=\n\"0x...\"\n// contract address of the Edition Drop\nchain\n=\n{\nethereum\n}\nclient\n=\n{\nclient\n}\nclaimParams\n=\n{\n{\ntype:\n\"ERC1155\"\n,\nquantity:\n1\nn\n,\ntokenId:\n0\nn\n,\n}\n}\n>\nClaim now\n</\nClaimButton\n>;\nFor Token Drop (ERC20)\n<\nClaimButton\ncontractAddress\n=\n\"0x...\"\n// contract address of the Token Drop\nchain\n=\n{\nethereum\n}\nclient\n=\n{\nclient\n}\nclaimParams\n=\n{\n{\ntype:\n\"ERC20\"\n,\nquantity:\n\"100\"\n,\n// claim 100 ERC20 tokens\n// instead of `quantity`, you can also use `quantityInWei` (bigint)\n}\n}\n>\nClaim now\n</\nClaimButton\n>;\nAttach custom Pay metadata\n<\nClaimButton\npayModal\n=\n{\n{\nmetadata: {\nname:\n\"Van Gogh Starry Night\"\n,\nimage:\n\"https://unsplash.com/starry-night.png\"\n,\n},\n}\n}\n>\n...\n</\nClaimButton\n>;\nSince this button uses the\nTransactionButton\n, it can take in any props that can be passed\nto the\nTransactionButton\nFor error handling & callbacks on transaction-sent and transaction-confirmed,\nplease refer to the TransactionButton docs. Signature\nfunction\nClaimButton\n(\nprops\n:\nClaimButtonProps\n)\n:\nElement\n;\nParameters\nprops\nType\nlet\nprops\n:\nOmit\n<\nTransactionButtonProps\n,\n\"transaction\"\n>\n&\n{\nchain\n:\nChain\n;\nclaimParams\n:\nClaimParams\n;\nclient\n:\nThirdwebClient\n;\ncontractAddress\n:\nstring\n;\n};\nReturns\nReturn Type\nlet\nreturnType\n:\nElement\n;\nA wrapper for TransactionButton"
  },
  {
    "title": "ConnectButton",
    "content": "ConnectButton\nA fully featured wallet connection component that allows to:\nConnect to 350+ external wallets\nConnect with email, phone, passkey or socials\nConvert any wallet to a ERC4337 smart wallet for gasless transactions\nSign in with ethereum (Auth)\nOnce connected, the component allows to:\nReolve ENS names and avatars\nManage multipple connected wallets\nSend and receive native tokens and ERC20 tokens\nView ERC20 tokens and NFTs\nOnramp, bridge and swap tokens\nSwitch chains\nConnect to another app with WalletConnect\nExample\nDefault setup\nimport\n{ createThirdwebClient }\nfrom\n\"thirdweb\"\n;\nimport\n{ ConnectButton }\nfrom\n\"thirdweb/react\"\n;\nconst\nclient\n=\ncreateThirdwebClient\n({ clientId:\n\"YOUR_CLIENT_ID\"\n});\n<\nConnectButton\nclient\n=\n{\nclient\n}\n/>;\nView all available config options\nCustomization options\nCustomizing wallet options\n<\nConnectButton\nclient\n=\n{\nclient\n}\nwallets\n=\n{\n[\ncreateWallet\n(\n\"io.metamask\"\n),\ncreateWallet\n(\n\"com.coinbase.wallet\"\n),\ncreateWallet\n(\n\"me.rainbow\"\n),\n]\n}\n/>;\nView all available wallets\nCustomizing the default chain to connect to\nimport\n{ sepolia }\nfrom\n\"thirdweb/chains\"\n;\n<\nConnectButton\nclient\n=\n{\nclient\n}\nchain\n=\n{\nsepolia\n}\n/>;\nEnabling Account Abstraction\nBy passing the\naccountAbstraction\nprop, ALL connected wallets will be converted to smart accounts. <\nConnectButton\nclient\n=\n{\nclient\n}\naccountAbstraction\n=\n{\n{\nchain: sepolia,\nsponsorGas:\ntrue\n,\n}\n}\n/>;\nEnabling sign in with ethereum (Auth)\n<\nConnectButton\nclient\n=\n{\nclient\n}\nauth\n=\n{\n{\nisLoggedIn\n:\nasync\n(\naddress\n)\n=>\n{\nconsole. );\nawait\nlogout\n();\n},\n}\n}\n/>;\nCustomizing the theme\n<\nConnectButton\nclient\n=\n{\nclient\n}\ntheme\n=\n\"light\"\n/>;\nFor more granular control, you can also pass a custom theme object:\n<\nConnectButton\nclient\n=\n{\nclient\n}\ntheme\n=\n{\nlightTheme\n({\ncolors: {\nmodalBg:\n\"red\"\n,\n},\n})\n}\n/>;\nView all available themes properties\nChanging the display language\n<\nConnectEmbed\nclient\n=\n{\nclient\n}\nlocale\n=\n\"ja_JP\"\n/>;\nView all available locales\nCustomizing the connect button UI\n<\nConnectButton\nclient\n=\n{\nclient\n}\nconnectButton\n=\n{\n{\nlabel:\n\"Sign in to MyApp\"\n,\n}\n}\n/>;\nCustomizing the modal UI\n<\nConnectButton\nclient\n=\n{\nclient\n}\nconnectModal\n=\n{\n{\ntitle:\n\"Sign in to MyApp\"\n,\ntitleIcon: https:\n//example.com/logo.png,\nsize:\n\"compact\"\n,\n}\n}\n/>\nCustomizing details button UI (after connecting)\n<\nConnectButton\nclient\n=\n{\nclient\n}\ndetailsButton\n=\n{\n{\ndisplayBalanceToken: {\n[sepolia.id]:\n\"0x...\"\n,\n// token address to display balance for\n[ethereum.id]:\n\"0x...\"\n,\n// token address to display balance for\n},\n}\n}\n/>;\nView all available auth helper functions\nCustomizing the Auth sign in button (after connecting, but before authenticating)\n<\nConnectButton\nclient\n=\n{\nclient\n}\nauth\n=\n{\n{\n...\n}\n}\nsignInButton:\n{\nlabel:\n\"Authenticate with MyApp\"\n,\n}\n,\n}}\n/>;\nCustomizing supported Tokens and NFTs\nThese tokens and NFTs will be shown in the modal when the user clicks \"View Assets\", as well as the send token screen. <\nConnectButton\nclient\n=\n{\nclient\n}\nsupportedTokens\n=\n{\n{\n[ethereum.id]: [\n{\naddress:\n\"0x...\"\n,\nname:\n\"MyToken\"\n,\nsymbol:\n\"MT\"\n,\nicon:\n\"https://example.com/icon.png\"\n,\n},\n],\n}\n}\nsupportedNFTs\n=\n{\n{\n[ethereum.id]: [\n\"0x...\"\n,\n// nft contract address\n],\n}\n}\n/>;\nSignature\nfunction\nConnectButton\n(\nprops\n:\nConnectButtonProps\n)\n:\nElement\n;\nParameters\nprops\nProps for the\nConnectButton\ncomponent\nRefer to\nConnectButtonProps\nto see the available props. :\nArray\n<\nWallet\n>;\n};\nReturns\nReturn Type\nlet\nreturnType\n:\nElement\n;\nA JSX element that renders the\n<ConnectButton>\ncomponent."
  },
  {
    "title": "ConnectEmbed",
    "content": "ConnectEmbed\nAn inline wallet connection component that allows to:\nConnect to 350+ external wallets\nConnect with email, phone, passkey or socials\nConvert any wallet to a ERC4337 smart wallet for gasless transactions\nSign in with ethereum (Auth)\nIt renders the same UI as the\nConnectButton\ncomponent's modal - but directly inline in the page instead of being in a modal. Example\nDefault setup\nimport\n{ createThirdwebClient }\nfrom\n\"thirdweb\"\n;\nimport\n{ ConnectEmbed }\nfrom\n\"thirdweb/react\"\n;\nconst\nclient\n=\ncreateThirdwebClient\n({ clientId:\n\"YOUR_CLIENT_ID\"\n});\n<\nConnectEmbed\nclient\n=\n{\nclient\n}\n/>;\nView all available config options\nCustomization options\nCustomizing wallet options\n<\nConnectEmbed\nclient\n=\n{\nclient\n}\nwallets\n=\n{\n[\ncreateWallet\n(\n\"io.metamask\"\n),\ncreateWallet\n(\n\"com.coinbase.wallet\"\n),\ncreateWallet\n(\n\"me.rainbow\"\n),\n]\n}\n/>;\nView all available wallets\nCustomizing the default chain to connect to\nimport\n{ base }\nfrom\n\"thirdweb/chains\"\n;\n<\nConnectEmbed\nclient\n=\n{\nclient\n}\nchain\n=\n{\nbase\n}\n/>;\nEnabling Account Abstraction\nBy passing the\naccountAbstraction\nprop, ALL connected wallets will be converted to smart accounts. <\nConnectEmbed\nclient\n=\n{\nclient\n}\naccountAbstraction\n=\n{\n{\nchain: sepolia,\nsponsorGas:\ntrue\n,\n}\n}\n/>;\nEnabling sign in with ethereum (Auth)\n<\nConnectEmbed\nclient\n=\n{\nclient\n}\nauth\n=\n{\n{\nisLoggedIn\n:\nasync\n(\naddress\n)\n=>\n{\nconsole. );\nawait\nlogout\n();\n},\n}\n}\n/>;\nCustomizing the theme\n<\nConnectEmbed\nclient\n=\n{\nclient\n}\ntheme\n=\n\"light\"\n/>;\nFor more granular control, you can also pass a custom theme object:\n<\nConnectEmbed\nclient\n=\n{\nclient\n}\ntheme\n=\n{\nlightTheme\n({\ncolors: {\nmodalBg:\n\"red\"\n,\n},\n})\n}\n/>;\nView all available themes properties\nChanging the display language\n<\nConnectEmbed\nclient\n=\n{\nclient\n}\nlocale\n=\n\"ja_JP\"\n/>;\nView all available locales\nSignature\nfunction\nConnectEmbed\n(\nprops\n:\nConnectEmbedProps\n)\n:\nElement\n;\nParameters\nprops\nThe props for the\nConnectEmbed\ncomponent. :\nWelcomeScreen\n;\n};\nReturns\nReturn Type\nlet\nreturnType\n:\nElement\n;\nA JSX element that renders the\n<ConnectEmbed>\ncomponent."
  },
  {
    "title": "MediaRenderer",
    "content": "MediaRenderer\nSignature\nfunction\nMediaRenderer\n(\nprops\n:\nMediaRendererProps\n&\nRefAttributes\n<\nHTMLMediaElement\n>,\n)\n:\nReactNode\n;\nParameters\nprops\nRefer to\nMediaRendererProps\nto see the available props. Type\nlet\nprops\n:\nMediaRendererProps\n&\nRefAttributes\n<\nHTMLMediaElement\n>;\nReturns\nReturn Type\nlet\nreturnType\n:\nReactNode\n;"
  },
  {
    "title": "PayEmbed",
    "content": "PayEmbed\nEmbed thirdweb Pay UI for Buy tokens using Crypto or Credit Card. PayEmbed also renders a \"Connect\" button if the user is not connected to a wallet. You can customize the options for \"Connect\" button using the\nconnectOptions\nprop. Example\n<\nPayEmbed\nclient\n=\n{\nclient\n}\nconnectOptions\n=\n{\n{\nconnectModal: {\nsize:\n\"compact\"\n,\n},\n}\n}\npayOptions\n=\n{\n{\nbuyWithCrypto:\nfalse\n,\n}\n}\n/>;\nSignature\nfunction\nPayEmbed\n(\nprops\n:\nPayEmbedProps\n)\n:\nElement\n;\nParameters\nprops\nProps of type\nPayEmbedProps\nto configure the PayEmbed component. :\n\"light\"\n|\n\"dark\"\n|\nTheme\n;\n};\nReturns\nReturn Type\nlet\nreturnType\n:\nElement\n;"
  },
  {
    "title": "Theme",
    "content": "Theme\ntype\nTheme\n=\n{\ncolors\n:\n{\naccentButtonBg\n:\nstring\n;\naccentButtonText\n:\nstring\n;\naccentText\n:\nstring\n;\nborderColor\n:\nstring\n;\nconnectedButtonBg\n:\nstring\n;\nconnectedButtonBgHover\n:\nstring\n;\ndanger\n:\nstring\n;\ninputAutofillBg\n:\nstring\n;\nmodalBg\n:\nstring\n;\nmodalOverlayBg\n:\nstring\n;\nprimaryButtonBg\n:\nstring\n;\nprimaryButtonText\n:\nstring\n;\nprimaryText\n:\nstring\n;\nscrollbarBg\n:\nstring\n;\nsecondaryButtonBg\n:\nstring\n;\nsecondaryButtonHoverBg\n:\nstring\n;\nsecondaryButtonText\n:\nstring\n;\nsecondaryIconColor\n:\nstring\n;\nsecondaryIconHoverBg\n:\nstring\n;\nsecondaryIconHoverColor\n:\nstring\n;\nsecondaryText\n:\nstring\n;\nselectedTextBg\n:\nstring\n;\nselectedTextColor\n:\nstring\n;\nseparatorLine\n:\nstring\n;\nskeletonBg\n:\nstring\n;\nsuccess\n:\nstring\n;\ntertiaryBg\n:\nstring\n;\ntooltipBg\n:\nstring\n;\ntooltipText\n:\nstring\n;\n};\nfontFamily\n:\nstring\n;\ntype\n:\n\"light\"\n|\n\"dark\"\n;\n};\ncolors\ntype\ncolors\n=\n{\naccentButtonBg\n:\nstring\n;\naccentButtonText\n:\nstring\n;\naccentText\n:\nstring\n;\nborderColor\n:\nstring\n;\nconnectedButtonBg\n:\nstring\n;\nconnectedButtonBgHover\n:\nstring\n;\ndanger\n:\nstring\n;\ninputAutofillBg\n:\nstring\n;\nmodalBg\n:\nstring\n;\nmodalOverlayBg\n:\nstring\n;\nprimaryButtonBg\n:\nstring\n;\nprimaryButtonText\n:\nstring\n;\nprimaryText\n:\nstring\n;\nscrollbarBg\n:\nstring\n;\nsecondaryButtonBg\n:\nstring\n;\nsecondaryButtonHoverBg\n:\nstring\n;\nsecondaryButtonText\n:\nstring\n;\nsecondaryIconColor\n:\nstring\n;\nsecondaryIconHoverBg\n:\nstring\n;\nsecondaryIconHoverColor\n:\nstring\n;\nsecondaryText\n:\nstring\n;\nselectedTextBg\n:\nstring\n;\nselectedTextColor\n:\nstring\n;\nseparatorLine\n:\nstring\n;\nskeletonBg\n:\nstring\n;\nsuccess\n:\nstring\n;\ntertiaryBg\n:\nstring\n;\ntooltipBg\n:\nstring\n;\ntooltipText\n:\nstring\n;\n};\nfontFamily\ntype\nfontFamily\n=\nstring\n;\ntype\ntype\ntype\n=\n\"light\"\n|\n\"dark\"\n;"
  },
  {
    "title": "ThirdwebProvider",
    "content": ":\n{\nactiveAccountStore\n:\nStore\n<\nundefined\n|\nAccount\n>;\nactiveWalletChainStore\n:\nStore\n<\nundefined\n|\nReadonly\n<\nChainOptions\n&\n{\nrpc\n:\nstring\n}>\n>;\nactiveWalletConnectionStatusStore\n:\nStore\n<\nConnectionStatus\n>;\nactiveWalletStore\n:\nStore\n<\nundefined\n|\nWallet\n>;\naddConnectedWallet\n:\n(\nwallet\n:\nWallet\n)\n=>\nvoid\n;\nconnect\n:\n(\nwallet\n:\nWallet\n,\noptions\n? :\nConnectManagerOptions\n,\n)\n=>\nPromise\n<\nWallet\n>;\nconnectedWallets\n:\nReadonlyStore\n<\nArray\n<\nWallet\n>>;\ndefineChains\n:\n(\nchains\n:\nArray\n<\nReadonly\n<\nChainOptions\n&\n{\nrpc\n:\nstring\n}>>,\n)\n=>\nvoid\n;\ndisconnectWallet\n:\n(\nwallet\n:\nWallet\n)\n=>\nvoid\n;\nhandleConnection\n:\n(\nwallet\n:\nWallet\n,\noptions\n? :\nConnectManagerOptions\n,\n)\n=>\nPromise\n<\nWallet\n>;\nisAutoConnecting\n:\nStore\n<\nboolean\n>;\nremoveConnectedWallet\n:\n(\nwallet\n:\nWallet\n)\n=>\nvoid\n;\nsetActiveWallet\n:\n(\nactiveWallet\n:\nWallet\n)\n=>\nPromise\n<\nvoid\n>;\nswitchActiveWalletChain\n:\n(\nchain\n:\nReadonly\n<\nChainOptions\n&\n{\nrpc\n:\nstring\n}>,\n)\n=>\nPromise\n<\nvoid\n>;\n};\n}>,\n)\n:\nElement\n;\nParameters\nprops\nThe props for the ThirdwebProvider\nType\nlet\nprops\n:\nPropsWithChildren\n<{\nconnectionManager\n? :\n{\nactiveAccountStore\n:\nStore\n<\nundefined\n|\nAccount\n>;\nactiveWalletChainStore\n:\nStore\n<\nundefined\n|\nReadonly\n<\nChainOptions\n&\n{\nrpc\n:\nstring\n}>\n>;\nactiveWalletConnectionStatusStore\n:\nStore\n<\nConnectionStatus\n>;\nactiveWalletStore\n:\nStore\n<\nundefined\n|\nWallet\n>;\naddConnectedWallet\n:\n(\nwallet\n:\nWallet\n)\n=>\nvoid\n;\nconnect\n:\n(\nwallet\n:\nWallet\n,\noptions\n? :\nConnectManagerOptions\n,\n)\n=>\nPromise\n<\nWallet\n>;\nconnectedWallets\n:\nReadonlyStore\n<\nArray\n<\nWallet\n>>;\ndefineChains\n:\n(\nchains\n:\nArray\n<\nReadonly\n<\nChainOptions\n&\n{\nrpc\n:\nstring\n}>>,\n)\n=>\nvoid\n;\ndisconnectWallet\n:\n(\nwallet\n:\nWallet\n)\n=>\nvoid\n;\nhandleConnection\n:\n(\nwallet\n:\nWallet\n,\noptions\n?"
  },
  {
    "title": "TransactionButton",
    "content": "TransactionButton\nTransactionButton component is used to render a button that triggers a transaction. Example\nBasic usage\n<\nTransactionButton\ntransaction\n=\n{\n()\n=>\n{}\n}\nonTransactionConfirmed\n=\n{\nhandleSuccess\n}\nonError\n=\n{\nhandleError\n}\n>\nConfirm Transaction\n</\nTransactionButton\n>;\nCustomize the styling by passing the\nunstyled\nprop and your inline styles and/or classes:\n<\nTransactionButton\ntransaction\n=\n{\n()\n=>\n{}\n}\nunstyled\nclassName\n=\n\"bg-white text-black rounded-md p-4 flex items-center justify-center\"\n>\nConfirm Transaction\n</\nTransactionButton\n>;\nHandle errors\n<\nTransactionButton\ntransaction\n=\n{\n()\n=>\n...\n}\nonError\n=\n{\n(\nerr\n)\n=>\n{\nalert\n(err.message);\n// Add your own logic here\n}\n}\n>\nConfirm Transaction\n</\nTransactionButton\n>\nAlert when a transaction is sent\n<\nTransactionButton\ntransaction\n=\n{\n()\n=>\n...\n}\nonTransactionSent\n=\n{\n(\ntx\n)\n=>\n{\nalert\n(\n\"transaction sent!\" For example, a toast\n}\n}\n>\nConfirm Transaction\n</\nTransactionButton\n>\nAlert when a transaction is completed\n<\nTransactionButton\ntransaction\n=\n{\n()\n=>\n...\n}\nonTransactionConfirmed\n=\n{\n(\ntx\n)\n=>\n{\nalert\n(\n\"transaction sent!\" For example, a toast\n}\n}\n>\nConfirm Transaction\n</\nTransactionButton\n>\nThe onClick prop, if provided, will be called before the transaction is sent. <\nTransactionButton\nonClick\n=\n{\n()\n=>\nalert\n(\n\"Transaction is about to be sent\"\n)\n}\ntransaction\n=\n{\n...\n}\n>\n...\n</\nTransactionButton\n>\nAttach custom Pay metadata\n<\nTransactionButton\npayModal\n=\n{\n{\n// This image & title will show up in the Pay modal\nmetadata: {\nname:\n\"Van Gogh Starry Night\"\n,\nimage:\n\"https://unsplash.com/starry-night.png\"\n,\n},\n}\n}\n>\n...\n</\nTransactionButton\n>;\nGasless usage with\nthirdweb Engine\n<\nTransactionButton\ngasless\n=\n{\n{\nprovider:\n\"engine\"\n,\nrelayerUrl:\n\"https://thirdweb.engine-***.thirdweb.com/relayer/***\"\n,\nrelayerForwarderAddress:\n\"0x...\"\n,\n}\n}\n>\n...\n</\nTransactionButton\n>;\nGasless usage with OpenZeppelin\n<\nTransactionButton\ngasless\n=\n{\n{\nprovider:\n\"openzeppelin\"\n,\nrelayerUrl:\n\"https://...\"\n,\nrelayerForwarderAddress:\n\"0x...\"\n,\n}\n}\n>\n...\n</\nTransactionButton\n>;\nSignature\nfunction\nTransactionButton\n(\nprops\n:\nTransactionButtonProps\n)\n:\nElement\n;\nParameters\nprops\nThe props for this component."
  },
  {
    "title": "account-abstraction/batching-transactions",
    "content": "Batching transactions\nBatching transactions allows sending multiple transactions in a single user operation. This can be useful to save on fees, reduce number of user confimations or to ensure that multiple transactions are executed atomically. A typical example is to do an approval and a transfer in a single userOperation. This way, the transfer will only happen if the approval is successful. import\n{\nuseActiveAccount,\nuseSendBatchTransaction,\n}\nfrom\n\"thirdweb/react\"\n;\nimport\n{ approve, transferFrom }\nfrom\n\"thirdweb/extensions/erc20\"\n;\nconst\nsmartAccount\n=\nuseActiveAccount\n();\nconst\n{\nmutate\n:\nsendBatchTransaction\n}\n=\nuseSendBatchTransaction\n();\nconst\napproveAndTransfer\n=\nasync\n()\n=>\n{\nconst\ntransactions\n=\n[\napprove\n({\ncontract,\nspender:\n\"0x...\"\n,\nvalue:\n100\n,\n}),\ntransferFrom\n({\ncontract,\nfrom:\n\"0x...\"\n,\nto:\n\"0x...\"\n,\namount:\n100\n,\n}),\n];\nawait\nsendBatchTransaction\n(transactions);\n};"
  },
  {
    "title": "account-abstraction/build-your-own-ui",
    "content": "Connect smart accounts in your application\nUsing\nuseConnect\n, you can pass the\naccountAbstraction\nprop to automatically convert any connected wallet to a smart account. import\n{ useConnect }\nfrom\n\"thirdweb/react\"\n;\nimport\n{ inAppWallet }\nfrom\n\"thirdweb/wallets\"\n;\nimport\n{ sepolia }\nfrom\n\"thirdweb/chains\"\n;\nfunction\nApp\n() {\n// 1. set the `accountAbstraction` configuration\nconst\n{\nconnect\n}\n=\nuseConnect\n({\nclient,\naccountAbstraction: {\nchain: sepolia,\n// the chain where your smart accounts will be or is deployed\nsponsorGas:\ntrue\n,\n// enable or disable sponsored transactions\n},\n});\nconst\nconnectToSmartAccount\n=\nasync\n()\n=>\n{\n// 2. connect with the admin wallet of the smart account\nconnect\n(\nasync\n()\n=>\n{\nconst\nwallet\n=\ninAppWallet\n();\n// or any other wallet\nawait\nwallet. connect\n({\nclient,\nchain: sepolia,\nstrategy:\n\"google\"\n,\n});\nreturn\nwallet;\n});\n};\nreturn\n(\n<\nbutton\nonClick\n=\n{\n()\n=>\nconnectToSmartAccount\n()\n}\n>Connect</\nbutton\n>\n);\n}\nExecuting Transactions with Smart Accounts\nOnce setup, you can use the Connect\nTypeScript\n,\nReact\n, or\nReact Native\nSDKs to deploy contracts, perform transactions, and manipulate smart accounts like any other wallet. import\n{ getContract }\nfrom\n\"thirdweb\"\n;\nimport\n{ useActiveAccount, useSendTransaction }\nfrom\n\"thirdweb/react\"\n;\nimport\n{ claimTo, balanceOf }\nfrom\n\"thirdweb/extensions/erc721\"\n;\nconst\ncontract\n=\ngetContract\n({ client, chain, address:\n\"0x...\"\n});\n// The ThirdwebProvider setup above already handles the connection to the smart account\n// Within the provider, you can use the SDK normally to interact with the blockchain\nexport\ndefault\nfunction\nMyComponent\n()\n{\n// Get the connected smart account\nconst\nsmartAccount\n=\nuseActiveAccount\n();\n// Example read\nconst\n{\ndata\n,\nisLoading\n}\n=\nuseReadContract\n(\nbalanceOf,\n{\ncontract,\nowner: smartAccount.address,\n},\n{\nenabled:\n! smartAccount,\n},\n);\n// Example write\nconst\n{\nmutate\n:\nsendTransaction\n,\nisPending\n}\n=\nuseSendTransaction\n();\nconst\nmint\n=\n()\n=>\n{\nsendTransaction\n({\ntransaction:\nclaimTo\n({\ncontract,\nto: smartAccount.address,\nquantity:\n1\nn\n,\n}),\n});\n};\n// Mint a new NFT\nreturn\n<\nbutton\nonClick\n=\n{\nmint\n}\n>Mint NFT</\nbutton\n>;\n}\nDemos\nLearn by example with these open-source demos:\nAccount Abstraction Demos\nA reference implementation to create and interact with smart accounts."
  },
  {
    "title": "account-abstraction/get-started",
    "content": "The API key lets you access thirdweb's bundler and paymaster infrastructure, which is required for smart accounts to operate and optionally enable\ngasless transactions\n. Connect smart accounts in your application\nThe easiest way to get started with account abstraction is to use the\nConnectButton\ncomponent. import\n{ createThirdwebClient }\nfrom\n\"thirdweb\"\n;\nimport\n{ ThirdwebProvider, ConnectButton }\nfrom\n\"thirdweb/react\"\n;\nconst\nclient\n=\ncreateThirdwebClient\n({\nclientId:\n\"YOUR_CLIENT_ID\"\n,\n});\nexport\ndefault\nfunction\nApp\n()\n{\nreturn\n(\n<\nThirdwebProvider\n>\n<\nConnectButton\nclient\n=\n{\nclient\n}\naccountAbstraction\n=\n{\n{\nchain: sepolia,\n// the chain where your smart accounts will be or is deployed\nsponsorGas:\ntrue\n,\n// enable or disable sponsored transactions\n}\n}\n/>\n</\nThirdwebProvider\n>\n);\n}\nExecuting Transactions with Smart Accounts\nOnce setup, you can use the rest of the Connect\nReact SDK\nto deploy contracts, perform transactions, and manipulate smart accounts like any other wallet. import\n{ getContract }\nfrom\n\"thirdweb\"\n;\nimport\n{ useActiveAccount, TransactionButton }\nfrom\n\"thirdweb/react\"\n;\nimport\n{ claimTo }\nfrom\n\"thirdweb/extensions/erc721\"\n;\nconst\ncontract\n=\ngetContract\n({ client, chain, address:\n\"0x...\"\n});\n// The ThirdwebProvider setup above already handles the connection to the smart account\n// Within the provider, you can use the SDK normally to interact with the blockchain\nexport\ndefault\nfunction\nMyComponent\n()\n{\n// Get the connected smart account\nconst\nsmartAccount\n=\nuseActiveAccount\n();\n// Mint a new NFT\nreturn\n(\n<\nTransactionButton\ntransaction\n=\n{\n()\n=>\n{\nif\n(\n! account)\nreturn\n;\nreturn\nclaimTo\n({\ncontract,\nto: account.address,\nquantity:\n1\nn\n,\n});\n}\n}\n>\nMint NFT\n</\nTransactionButton\n>\n);\n}\nBuild your own UI\nYou can also use the connection hooks and functions to connect to your smart accounts and build your fully custom UI."
  },
  {
    "title": "account-abstraction/permissions",
    "content": "Account Permissions & Session Keys\nAll of the account contracts -\nSimple\nand\nManaged\n- share the same permission model. smartAccount)\nreturn\n;\nconst\ntransaction\n=\naddAdmin\n({\ncontract:\ngetContract\n({\naddress: smartAccount.address,\nchain,\nclient,\n}),\naccount: smartAccount,\nadminAddress:\n\"0x...\"\n,\n// the address of the new admin\n});\nsendTransaction\n(transaction);\n};\n2. Assigning Session Key Permissions\nEach individual session key has its own permissions to use the account. Session keys can be assigned the following permissions:\n[Required] Allow interaction with specific contracts with the account (\"*\" for any contracts)\n[Optional] Have a maximum amount of native tokens that can be transferred per transaction (defaults to 0 eth, transactions with value will be rejected)\n[Optional] Have access to the account only during a specific time window (defaults to 10 years from now)\nimport\n{ addSessionKey }\nfrom\n\"thirdweb/extensions/erc4337\"\n;\nimport\n{ useSendTransaction, useActiveAccount }\nfrom\n\"thirdweb/react\"\n;\nimport\n{ getContract }\nfrom\n\"thirdweb\"\n;\nconst\n{\nmutate\n:\nsendTransaction\n}\n=\nuseSendTransaction\n();\nconst\nsmartAccount\n=\nuseActiveAccount\n();\nconst\nonClick\n=\n()\n=>\n{\nif\n(\n! smartAccount)\nreturn\n;\nconst\ntransaction\n=\naddSessionKey\n({\ncontract:\ngetContract\n({\naddress: smartAccount.address,\nchain,\nclient,\n}),\naccount: smartAccount,\nsessionKeyAddress:\n\"0x...\"\n,\n// the address of the new session key\npermissions: {\napprovedTargets:\n\"*\"\n,\n// the addresses of allowed contracts, or '*' for any contract\nnativeTokenLimitPerTransaction:\n0.1\n,\n// the maximum amount of native token (in ETH) that the session key can spend per transaction\npermissionStartTimestamp:\nnew\nDate\n(),\n// the date when the session key becomes active\npermissionEndTimestamp:\nnew\nDate\n(\nDate."
  },
  {
    "title": "adapters",
    "content": "Adapters\nThe thirdweb SDK can work side by side with:\nwagmi\nviem\nprivy\nethers.js v5\nethers.js v6\nolder versions of the @thirdweb-dev/sdk (using the ethers.js v5 adapter)\nany other library that conforms to the\nEIP-1193\nstandard\nAdapters allow you to use contracts, providers and wallets from these libraries with the thirdweb SDK and vice versa. Wagmi\nYou can use the thirdweb SDK within a wagmi application by setting the wagmi connected account as the thirdweb 'active wallet'. // Assumes you've wrapped your application in a `<ThirdwebProvider>`\nimport\n{ useEffect }\nfrom\n\"react\"\n;\nimport\n{ defineChain }\nfrom\n\"thirdweb\"\n;\nimport\n{ useSetActiveWallet }\nfrom\n\"thirdweb/react\"\n;\nimport\n{ createWalletAdapter }\nfrom\n\"thirdweb/wallets\"\n;\nimport\n{\nuseDisconnect,\nuseSwitchChain,\nuseWalletClient,\n}\nfrom\n\"wagmi\"\n;\nimport\n{ viemAdapter }\nfrom\n\"thirdweb/adapters/viem\"\n;\nimport\n{ client }\nfrom\n\"./client\"\n;\nconst\n{\ndata\n:\nwalletClient\n}\n=\nuseWalletClient\n();\n// from wagmi\nconst\n{\ndisconnectAsync\n}\n=\nuseDisconnect\n();\n// from wagmi\nconst\n{\nswitchChainAsync\n}\n=\nuseSwitchChain\n();\n// from wagmi\nconst\nsetActiveWallet\n=\nuseSetActiveWallet\n();\n// from thirdweb/react\n// whenever the walletClient changes,\n// we adapt it to a thirdweb account and set it as the active wallet\nuseEffect\n(()\n=>\n{\nconst\nsetActive\n=\nasync\n()\n=>\n{\nif\n(walletClient) {\n// adapt the walletClient to a thirdweb account\nconst\nadaptedAccount\n=\nviemAdapter.walletClient. fromViem\n({\nwalletClient: walletClient\nas\nany\n,\n// accounts for wagmi/viem version mismatches\n});\n// create the thirdweb wallet with the adapted account\nconst\nthirdwebWallet\n=\ncreateWalletAdapter\n({\nclient,\nadaptedAccount,\nchain:\ndefineChain\n(\nawait\nwalletClient. // Assumes you've wrapped your application in a `<ThirdwebProvider>`\nimport\n{ useEffect }\nfrom\n\"react\"\n;\nimport\n{ defineChain }\nfrom\n\"thirdweb\"\n;\nimport\n{ useSetActiveWallet }\nfrom\n\"thirdweb/react\"\n;\nimport\n{ createWalletAdapter }\nfrom\n\"thirdweb/wallets\"\n;\nimport\n{ client }\nfrom\n\"./client\"\n;\nimport\n{ useWallets }\nfrom\n\"@privy-io/react-auth\"\n;\nconst\n{\nwallets\n}\n=\nuseWallets\n();\n// from privy\nconst\nsetActiveWallet\n=\nuseSetActiveWallet\n();\n// from thirdweb/react\n// whenever the privy wallet changes,\n// we adapt it to a thirdweb account and set it as the active wallet\nuseEffect\n(()\n=>\n{\nconst\nsetActive\n=\nasync\n()\n=>\n{\nconst\nprivyWallet\n=\nwallets[\n0\n];\nif\n(privyWallet) {\nconst\nethersProvider\n=\nawait\nprivyWallet."
  },
  {
    "title": "connect-button",
    "content": ""
  },
  {
    "title": "connecting-wallets",
    "content": "Connecting Wallets\nUse the prebuilt UI components or create your own UX with hooks to connect wallets in your app. Using UI Components\nPrebuilt UI components for connecting wallets\nUsing Hooks\nHooks for connecting wallets with your own UX"
  },
  {
    "title": "connecting-wallets/hooks",
    "content": "Connection Hooks\nYou can build a completely custom UI for connecting the wallet using the\nuseConnect\nhook to connect any of\nsupported wallets\n. import\n{ createThirdwebClient }\nfrom\n\"thirdweb\"\n;\nimport\n{ useConnect }\nfrom\n\"thirdweb/react\"\n;\nimport\n{ createWallet, injectedProvider }\nfrom\n\"thirdweb/wallets\"\n;\nconst\nclient\n=\ncreateThirdwebClient\n({ clientId });\nfunction\nExample\n() {\nconst\n{\nconnect\n,\nisConnecting\n,\nerror\n}\n=\nuseConnect\n();\nreturn\n(\n<\nbutton\nonClick\n=\n{\n()\n=>\nconnect\n(\nasync\n()\n=>\n{\n// create a wallet instance\nconst\nmetamask\n=\ncreateWallet\n(\n\"io.metamask\"\n);\n// autocomplete the wallet id\n// trigger the connection\nawait\nmetamask. connect\n({ client });\n// return the wallet\nreturn\nmetamask;\n})\n}\n>\nConnect\n</\nbutton\n>\n);\n}\nRefer to\ncreateWallet\nand\ninjectedProvider\nfor more information. Post Connection\nOnce the wallet is connected, you can use the\nWallet Connection hooks\nto get information about the connected wallet like getting the address, account, etc"
  },
  {
    "title": "connecting-wallets/ui-components",
    "content": "UI Components\nYou can use\nConnectButton\nor\nConnectEmbed\ncomponent for a quick, easy and customizable UI. These components provide a beautiful UI for connecting various wallets and take care of a lot of wallet-specific edge cases - so you can focus on building your app. These components support over 300+ wallets, including support in-app wallets and account abstraction. The SDK supports 350+ wallets out of the box, all you need to pass is their id. Supported Wallets\nSee all 350+ wallets supported by the Connect SDK\nPost Connection\nOnce the wallet is connected, you can use the\nWallet Connection hooks\nto get information about the connected wallet like getting the address, account, etc"
  },
  {
    "title": "createThirdwebClient",
    "content": "createThirdwebClient\nCreates a Thirdweb client using the provided client ID (client-side) or secret key (server-side). Get your client ID and secret key from the Thirdweb dashboard\nhere\n. A client is necessary for most functions in the thirdweb SDK. Example\nCreate a client on the client side (client ID):\nimport\n{ createThirdwebClient }\nfrom\n\"thirdweb\"\n;\nconst\nclient\n=\ncreateThirdwebClient\n({ clientId:\n\"...\"\n});\nCreate a client on the server (secret key):\nimport\n{ createThirdwebClient }\nfrom\n\"thirdweb\"\n;\nconst\nclient\n=\ncreateThirdwebClient\n({ secretKey:\n\"...\"\n});\nSignature\nfunction\ncreateThirdwebClient\n(\noptions\n:\nCreateThirdwebClientOptions\n,\n)\n:\nThirdwebClient\n;\nParameters\noptions\nThe options for creating the client. :\nnever\n;\nsecretKey\n:\nstring\n}\n)\n&\nClientOptions\n>;\nReturns\nReturn Type\nlet\nreturnType\n:\n{\nreadonly\nclientId\n:\nstring\n;\nreadonly\nsecretKey\n:\nstring\n|\nundefined\n;\n}\n&\nReadonly\n<\nClientOptions\n>;\nThe created Thirdweb client."
  },
  {
    "title": "createWalletAdapter",
    "content": "createWalletAdapter\nCreates a wallet from the given account. You can use this to:\nconvert a third party library wallet (wagmi, viem, ethers) into a thirdweb wallet. connect with a private key (for automated tests)\nAvailable wallet adatpers:\nViem\nEthers 6\nEthers 5\nExample\nimport\n{ createWalletAdapter }\nfrom\n\"thirdweb\"\n;\nconst\nwallet\n=\ncreateWalletAdapter\n({\nclient,\nadaptedAccount,\nchain,\nonDisconnect\n: ()\n=>\n{\n// disconnect logic\n},\nswitchChain\n:\nasync\n(\nchain\n)\n=>\n{\n// switch chain logic\n},\n});\nSignature\nfunction\ncreateWalletAdapter\n(\noptions\n:\nAdapterWalletOptions\n,\n)\n:\nWallet\n<\n\"adapter\"\n>;\nParameters\noptions\nThe options for the adapter wallet. Type\nlet\noptions\n:\n{\nadaptedAccount\n:\nAccount\n;\nchain\n:\nChain\n;\nclient\n:\nThirdwebClient\n;\nonDisconnect\n:\n()\n=>\nPromise\n<\nvoid\n>\n|\nvoid\n;\nswitchChain\n:\n(\nchain\n:\nChain\n)\n=>\nPromise\n<\nvoid\n>\n|\nvoid\n;\n};\nReturns\nReturn Type\nlet\nreturnType\n:\nWallet\n<\n\"adapter\"\n>;\na wallet instance."
  },
  {
    "title": "darkTheme",
    "content": "darkTheme\nCreate a custom dark theme object by using the default dark theme as a base and applying overrides. Example\nGet the default dark theme\nconst\ndefaultDarkTheme\n=\ndarkTheme\n();\nCreate a custom dark theme\nconst\ncustomTheme\n=\ndarkTheme\n({\ncolors: {\nmodalBg:\n\"red\"\n,\n},\n});\nSignature\nfunction\ndarkTheme\n(\noverrides\n? :\nThemeOverrides\n)\n:\nTheme\n;\nParameters\noverrides\noptional\nThe overrides to apply to the default dark theme. Type\nlet\noverrides\n:\n{\n[\nkey\nin\nExclude\n<\nkeyof\nTheme\n,\n\"type\"\n>]\n:\nPartial\n<\nTheme\n[\nkey\n]>;\n};\nReturns\nReturn Type\nlet\nreturnType\n:\n{\ncolors\n:\n{\naccentButtonBg\n:\nstring\n;\naccentButtonText\n:\nstring\n;\naccentText\n:\nstring\n;\nborderColor\n:\nstring\n;\nconnectedButtonBg\n:\nstring\n;\nconnectedButtonBgHover\n:\nstring\n;\ndanger\n:\nstring\n;\ninputAutofillBg\n:\nstring\n;\nmodalBg\n:\nstring\n;\nmodalOverlayBg\n:\nstring\n;\nprimaryButtonBg\n:\nstring\n;\nprimaryButtonText\n:\nstring\n;\nprimaryText\n:\nstring\n;\nscrollbarBg\n:\nstring\n;\nsecondaryButtonBg\n:\nstring\n;\nsecondaryButtonHoverBg\n:\nstring\n;\nsecondaryButtonText\n:\nstring\n;\nsecondaryIconColor\n:\nstring\n;\nsecondaryIconHoverBg\n:\nstring\n;\nsecondaryIconHoverColor\n:\nstring\n;\nsecondaryText\n:\nstring\n;\nselectedTextBg\n:\nstring\n;\nselectedTextColor\n:\nstring\n;\nseparatorLine\n:\nstring\n;\nskeletonBg\n:\nstring\n;\nsuccess\n:\nstring\n;\ntertiaryBg\n:\nstring\n;\ntooltipBg\n:\nstring\n;\ntooltipText\n:\nstring\n;\n};\nfontFamily\n:\nstring\n;\ntype\n:\n\"light\"\n|\n\"dark\"\n;\n};\nTheme object"
  },
  {
    "title": "ethers5Adapter",
    "content": "let\nethers5Adapter\n:\n{\ncontract\n:\n{\nfromEthers\n:\n(\noptions\n:\nFromEthersContractOptions\n,\n)\n=>\nPromise\n<\nReadonly\n<\nContractOptions\n<\nAbi\n>>>;\ntoEthers\n:\n(\noptions\n:\n{\nthirdwebContract\n:\nReadonly\n<\nContractOptions\n<[]>>;\n})\n=>\nPromise\n<\nContract\n>;\n};\nprovider\n:\n{\ntoEthers\n:\n(\noptions\n:\n{\nchain\n:\nReadonly\n<\nChainOptions\n&\n{\nrpc\n:\nstring\n}>;\nclient\n:\nThirdwebClient\n;\n})\n=>\nProvider\n;\n};\nsigner\n:\n{\nfromEthers\n:\n(\noptions\n:\n{\nsigner\n:\nSigner\n})\n=>\nPromise\n<\nAccount\n>;\ntoEthers\n:\n(\noptions\n:\n{\naccount\n:\nAccount\n;\nchain\n:\nReadonly\n<\nChainOptions\n&\n{\nrpc\n:\nstring\n}>;\nclient\n:\nThirdwebClient\n;\n})\n=>\nPromise\n<\nThirdwebAdapterSigner\n>;\n};\n};\ncontract\nConverts a ThirdwebContract to an ethers.js Contract or the other way around. type\ncontract\n=\n{\nfromEthers\n:\n(\noptions\n:\nFromEthersContractOptions\n,\n)\n=>\nPromise\n<\nReadonly\n<\nContractOptions\n<\nAbi\n>>>;\ntoEthers\n:\n(\noptions\n:\n{\nthirdwebContract\n:\nReadonly\n<\nContractOptions\n<[]>>;\n})\n=>\nPromise\n<\nContract\n>;\n};\nExample\ntoEthers\nimport\n{ ethers5Adapter }\nfrom\n\"thirdweb/adapters/ethers5\"\n;\nconst\nethersContract\n=\nawait\nethers5Adapter.contract. type\nprovider\n=\n{\ntoEthers\n:\n(\noptions\n:\n{\nchain\n:\nReadonly\n<\nChainOptions\n&\n{\nrpc\n:\nstring\n}>;\nclient\n:\nThirdwebClient\n;\n})\n=>\nProvider\n;\n};\nExample\nimport\n{ ethers5Adapter }\nfrom\n\"thirdweb/adapters/ethers5\"\n;\nconst\nprovider\n=\nethers5Adapter.provider. toEthers\n({\nclient,\nchainId,\n});\nOnce you have converted a thirdweb Client to ethers Provider,\nyou can use it like any other ethers provider:\nconst\nblockNumber\n=\nawait\nprovider. type\nsigner\n=\n{\nfromEthers\n:\n(\noptions\n:\n{\nsigner\n:\nSigner\n})\n=>\nPromise\n<\nAccount\n>;\ntoEthers\n:\n(\noptions\n:\n{\naccount\n:\nAccount\n;\nchain\n:\nReadonly\n<\nChainOptions\n&\n{\nrpc\n:\nstring\n}>;\nclient\n:\nThirdwebClient\n;\n})\n=>\nPromise\n<\nThirdwebAdapterSigner\n>;\n};\nExample\nfromEthers\nimport\n{ ethers5Adapter }\nfrom\n\"thirdweb/adapters/ethers5\"\n;\nconst\nwallet\n=\nawait\nethers5Adapter.signer."
  },
  {
    "title": "ethers6Adapter",
    "content": "let\nethers6Adapter\n:\n{\ncontract\n:\n{\nfromEthers\n:\n(\noptions\n:\nFromEthersContractOptions\n,\n)\n=>\nPromise\n<\nReadonly\n<\nContractOptions\n<\nAbi\n>>>;\ntoEthers\n:\n(\noptions\n:\n{\naccount\n? :\nAccount\n;\nthirdwebContract\n:\nReadonly\n<\nContractOptions\n<[]>>;\n})\n=>\nPromise\n<\nContract\n>;\n};\nprovider\n:\n{\ntoEthers\n:\n(\noptions\n:\n{\nchain\n:\nReadonly\n<\nChainOptions\n&\n{\nrpc\n:\nstring\n}>;\nclient\n:\nThirdwebClient\n;\n})\n=>\nJsonRpcProvider\n;\n};\nsigner\n:\n{\nfromEthers\n:\n(\noptions\n:\n{\nsigner\n:\nSigner\n})\n=>\nPromise\n<\nAccount\n>;\ntoEthers\n:\n(\noptions\n:\n{\naccount\n:\nAccount\n;\nchain\n:\nReadonly\n<\nChainOptions\n&\n{\nrpc\n:\nstring\n}>;\nclient\n:\nThirdwebClient\n;\n})\n=>\nSigner\n;\n};\n};\ncontract\nConverts a ThirdwebContract to an ethers.js Contract or the other way around. type\ncontract\n=\n{\nfromEthers\n:\n(\noptions\n:\nFromEthersContractOptions\n,\n)\n=>\nPromise\n<\nReadonly\n<\nContractOptions\n<\nAbi\n>>>;\ntoEthers\n:\n(\noptions\n:\n{\naccount\n? type\nprovider\n=\n{\ntoEthers\n:\n(\noptions\n:\n{\nchain\n:\nReadonly\n<\nChainOptions\n&\n{\nrpc\n:\nstring\n}>;\nclient\n:\nThirdwebClient\n;\n})\n=>\nJsonRpcProvider\n;\n};\nExample\nimport\n{ ethers6Adapter }\nfrom\n\"thirdweb/adapters/ethers6\"\n;\nconst\nprovider\n=\nethers6Adapter.provider. type\nsigner\n=\n{\nfromEthers\n:\n(\noptions\n:\n{\nsigner\n:\nSigner\n})\n=>\nPromise\n<\nAccount\n>;\ntoEthers\n:\n(\noptions\n:\n{\naccount\n:\nAccount\n;\nchain\n:\nReadonly\n<\nChainOptions\n&\n{\nrpc\n:\nstring\n}>;\nclient\n:\nThirdwebClient\n;\n})\n=>\nSigner\n;\n};\nExample\nfromEthersSigner\nimport\n{ ethers6Adapter }\nfrom\n\"thirdweb/adapters/ethers6\"\n;\nconst\nsigner\n=\nethers6Adapter.signer."
  },
  {
    "title": "extensions",
    "content": "Extensions\nGet familiar with the concept of extensions and how to use them in your project. Understanding Extensions\nLearn how to use extensions in your project\nUsing read extensions in React\nAny extension that reads from the blockchain can be used with\nuseReadContract\n. The extension function itself be passed as the first argument, and the extension's parameters must be passed as the second argument. import\n{ getContract }\nfrom\n\"thirdweb\"\n;\nimport\n{ useReadContract }\nfrom\n\"thirdweb/react\"\n;\nimport\n{ getOwnedNFTs }\nfrom\n\"thirdweb/extensions/erc721\"\n;\nconst\ncontract\n=\ngetContract\n({\nclient,\nchain,\naddress:\n\"0x...\"\n,\n});\nconst\nMyComponent\n=\n()\n=>\n{\nconst\nownedNFTs\n=\nuseReadContract\n(getOwnedNFTs, {\ncontract,\naddress:\n\"0x...\"\n,\n});\n};\nUsing write extensions in React\nFor extensions that write to the blockchain, they work the same way as raw contract calls using\nuseSendTransaction\n. import\n{ getContract }\nfrom\n\"thirdweb\"\n;\nimport\n{ useSendTransaction }\nfrom\n\"thirdweb/react\"\n;\nimport\n{ mintTo }\nfrom\n\"thirdweb/extensions/erc721\"\n;\nconst\ncontract\n=\ngetContract\n({\nclient,\nchain,\naddress:\n\"0x...\"\n,\n});\nconst\nMyComponent\n=\n()\n=>\n{\nconst\n{\nmutate\n:\nsendTransaction\n,\nisPending\n}\n=\nuseSendTransaction\n();\nconst\nonClick\n=\nasync\n()\n=>\n{\nconst\ntransaction\n=\nmintTo\n({\ncontract,\nto:\n\"0x...\"\n,\nnft: {\nname:\n\"NFT Name\"\n,\ndescription:\n\"NFT Description\"\n,\nimage:\n\"https://example.com/image.png\"\n,\n},\n});\nsendTransaction\n(transaction);\n};\n};"
  },
  {
    "title": "extensions/use",
    "content": ""
  },
  {
    "title": "getUserEmail",
    "content": "getUserEmail\nRetrieves the authenticated user email for the active in-app wallet. Example\nimport\n{ getUserEmail }\nfrom\n\"thirdweb/wallets/in-app\"\n;\nconst\nemail\n=\nawait\ngetUserEmail\n({ client });\nconsole. log\n(email);\nSignature\nfunction\ngetUserEmail\n(\noptions\n:\nGetAuthenticatedUserParams\n,\n)\n:\nPromise\n<\nundefined\n|\nstring\n>;\nParameters\noptions\nThe arguments for retrieving the authenticated user. Type\nlet\noptions\n:\n{\nclient\n:\nThirdwebClient\n};\nReturns\nReturn Type\nlet\nreturnType\n:\nPromise\n<\nundefined\n|\nstring\n>;\nThe authenticated user email if logged in and wallet initialized, otherwise undefined."
  },
  {
    "title": "getUserPhoneNumber",
    "content": "getUserPhoneNumber\nRetrieves the authenticated user phone number for the active embedded wallet. Example\nimport\n{ getUserPhoneNumber }\nfrom\n\"thirdweb/wallets/embedded\"\n;\nconst\nphoneNumber\n=\nawait\ngetUserPhoneNumber\n({ client });\nconsole. log\n(phoneNumber);\nSignature\nfunction\ngetUserPhoneNumber\n(\noptions\n:\nGetAuthenticatedUserParams\n,\n)\n:\nPromise\n<\nundefined\n|\nstring\n>;\nParameters\noptions\nThe arguments for retrieving the authenticated user. Type\nlet\noptions\n:\n{\nclient\n:\nThirdwebClient\n};\nReturns\nReturn Type\nlet\nreturnType\n:\nPromise\n<\nundefined\n|\nstring\n>;\nThe authenticated user phone number if authenticated with phone number, otherwise undefined."
  },
  {
    "title": "getting-started",
    "content": "import\n{ useActiveAccount, useWalletBalance }\nfrom\n\"thirdweb/react\"\n;\nexport\ndefault\nfunction\nApp\n()\n{\nconst\naccount\n=\nuseActiveAccount\n();\nconst\n{\ndata\n:\nbalance\n,\nisLoading\n}\n=\nuseWalletBalance\n({\nclient,\nchain,\naddress: account.address,\n});\nreturn\n(\n<\ndiv\n>\n<\np\n>Wallet address:\n{\naccount.address\n}\n</\np\n>\n<\np\n>\nWallet balance:\n{\nbalance?.displayValue\n}\n{\nbalance?.symbol\n}\n</\np\n>\n</\ndiv\n>\n);\n}\nRead blockchain data\nYou can read contract state with the\nuseReadContract\nhook. import\n{ client }\nfrom\n\"./client\"\n;\nimport\n{ getContract }\nfrom\n\"thirdweb\"\n;\nimport\n{ sepolia }\nfrom\n\"thirdweb/chains\"\n;\nimport\n{ useReadContract }\nfrom\n\"thirdweb/react\"\n;\nconst\ncontract\n=\ngetContract\n({\nclient,\naddress:\n\"0x...\"\n,\nchain: sepolia,\n});\nexport\ndefault\nfunction\nApp\n()\n{\nconst\n{\ndata\n,\nisLoading\n}\n=\nuseReadContract\n({\ncontract,\nmethod:\n\"function tokenURI(uint256 tokenId) returns (string)\"\n,\nparams: [\n1\nn\n],\n// type safe params\n});\nreturn\n(\n<\ndiv\n>\n<\np\n>Token URI:\n{\ndata\n}\n</\np\n>\n</\ndiv\n>\n);\n}\nUsing\nExtensions\nyou can do powerful queries like getting all the owned NFTs of a specific address, and generate performant typesafe functions for your contract. import\n{ client }\nfrom\n\"./client\"\n;\nimport\n{ getContract }\nfrom\n\"thirdweb\"\n;\nimport\n{ sepolia }\nfrom\n\"thirdweb/chains\"\n;\nimport\n{ useReadContract }\nfrom\n\"thirdweb/react\"\n;\nimport\n{ getOwnedNFTs }\nfrom\n\"thirdweb/extensions/erc721\"\n;\nconst\ncontract\n=\ngetContract\n({\nclient,\naddress:\n\"0x...\"\n,\nchain: sepolia,\n});\nexport\ndefault\nfunction\nApp\n()\n{\nconst\n{\ndata\n:\nownedNFTs\n}\n=\nuseReadContract\n(getOwnedNFTs, {\ncontract,\naddress:\n\"0x...\"\n,\n});\nreturn\n(\n<\ndiv\n>\n<\np\n>Owned NFTs:\n{\nownedNFTs\n}\n</\np\n>\n</\ndiv\n>\n);\n}\nExecute transactions\nYou can execute transactions with the\nuseSendTransaction\nhook. import\n{ client }\nfrom\n\"./client\"\n;\nimport\n{ getContract }\nfrom\n\"thirdweb\"\n;\nimport\n{ sepolia }\nfrom\n\"thirdweb/chains\"\n;\nimport\n{ useSendTransaction }\nfrom\n\"thirdweb/react\"\n;\nconst\ncontract\n=\ngetContract\n({\nclient,\naddress:\n\"0x...\"\n,\nchain: sepolia,\n});\nexport\ndefault\nfunction\nApp\n()\n{\nconst\n{\nmutate\n:\nsendTransaction\n}\n=\nuseSendTransaction\n();\nconst\nonClick\n=\nasync\n()\n=>\n{\nconst\ntransaction\n=\nprepareContractCall\n({\ncontract,\nmethod:\n\"function mint(address to)\"\n,\nparams: [\n\"0x...\"\n],\n// type safe params\n});\nsendTransaction\n(transaction);\n};\nreturn\n(\n<\ndiv\n>\n<\nbutton\nonClick\n=\n{\nonClick\n}\n>Mint</\nbutton\n>\n</\ndiv\n>\n);\n}\nUsing\nExtensions\nyou can do more complex transactions like a claim, batch mint, and more. import\n{ client }\nfrom\n\"./client\"\n;\nimport\n{ getContract }\nfrom\n\"thirdweb\"\n;\nimport\n{ sepolia }\nfrom\n\"thirdweb/chains\"\n;\nimport\n{ useSendTransaction }\nfrom\n\"thirdweb/react\"\n;\nimport\n{ mintTo }\nfrom\n\"thirdweb/extensions/erc721\"\n;\nconst\ncontract\n=\ngetContract\n({\nclient,\naddress:\n\"0x...\"\n,\nchain: sepolia,\n});\nexport\ndefault\nfunction\nApp\n()\n{\nconst\n{\nmutate\n:\nsendTransaction\n}\n=\nuseSendTransaction\n();\nconst\nonClick\n=\nasync\n()\n=>\n{\n// this mint extension handles uploading metadata to IPFS and pining it\nconst\ntransaction\n=\nmintTo\n({\ncontract,\nto:\n\"0x...\"\n,\nnft: {\nname:\n\"NFT Name\"\n,\ndescription:\n\"NFT Description\"\n,\nimage:\n\"https://example.com/image.png\"\n,\n},\n});\nsendTransaction\n(transaction);\n};\nreturn\n(\n<\ndiv\n>\n<\nbutton\nonClick\n=\n{\nonClick\n}\n>Mint</\nbutton\n>\n</\ndiv\n>\n);\n}\nLearn more\nYou know have all the basics to build your own app with thirdweb."
  },
  {
    "title": "hasStoredPasskey",
    "content": "hasStoredPasskey\nReturns whether this device has a stored passkey ready to be used for sign-in\nSignature\nfunction\nhasStoredPasskey\n(\nclient\n:\nThirdwebClient\n,\necosystemId\n? :\n`ecosystem.${\nstring\n}`\n,\n)\n:\nPromise\n<\nboolean\n>;\nParameters\nclient\nthe thirdweb client\nType\nlet\nclient\n:\n{\nreadonly\nclientId\n:\nstring\n;\nreadonly\nsecretKey\n:\nstring\n|\nundefined\n;\n}\n&\nReadonly\n<\nClientOptions\n>;\necosystemId\noptional\nType\nlet\necosystemId\n:\n`ecosystem.${\nstring\n}`\n;\nReturns\nReturn Type\nlet\nreturnType\n:\nPromise\n<\nboolean\n>;\nwhether the device has a stored passkey"
  },
  {
    "title": "in-app-wallet/build-your-own-ui",
    "content": "import\n{ inAppWallet }\nfrom\n\"thirdweb/wallets\"\n;\nimport\n{ useConnect }\nfrom\n\"thirdweb/react\"\n;\nconst\n{\nconnect\n}\n=\nuseConnect\n();\nconst\nhandleLogin\n=\nasync\n()\n=>\n{\nawait\nconnect\n(()\n=>\n{\nconst\nwallet\n=\ninAppWallet\n();\nawait\nwallet. connect\n({\nclient,\nstrategy:\n\"google\"\n,\n});\nreturn\nwallet;\n});\n};\nOther social options include Apple, Facebook, Discord, Farcaster and more. Authenticate via Email verification\nimport\n{ inAppWallet, preAuthenticate }\nfrom\n\"thirdweb/wallets/in-app\"\n;\nconst\n{\nconnect\n}\n=\nuseConnect\n();\nconst\npreLogin\n=\nasync\n(\nemail\n:\nstring\n)\n=>\n{\n// send email verification code\nawait\npreAuthenticate\n({\nclient,\nstrategy:\n\"email\"\n,\nemail,\n// ex:\n[email protected]\n});\n};\nconst\nhandleLogin\n=\nasync\n(\nemail\n:\nstring\n,\nverificationCode\n:\nstring\n)\n=>\n{\n// verify email and connect\nawait\nconnect\n(()\n=>\n{\nconst\nwallet\n=\ninAppWallet\n();\nawait\nwallet. connect\n({\nclient,\nstrategy:\n\"email\"\n,\nemail,\nverificationCode,\n});\nreturn\nwallet;\n});\n};\nAuthenticate via Phone number verification\nimport\n{ inAppWallet, preAuthenticate }\nfrom\n\"thirdweb/wallets/in-app\"\n;\nconst\n{\nconnect\n}\n=\nuseConnect\n();\nconst\npreLogin\n=\nasync\n(\nphonNumber\n:\nstring\n)\n=>\n{\n// send phone number verification code\nawait\npreAuthenticate\n({\nclient,\nstrategy:\n\"phone\"\n,\nphonNumber,\n// ex: +1234567890\n});\n};\nconst\nhandleLogin\n=\nasync\n(\nphonNumber\n:\nstring\n,\nverificationCode\n:\nstring\n)\n=>\n{\n// verify phone number and connect\nawait\nconnect\n(()\n=>\n{\nconst\nwallet\n=\ninAppWallet\n();\nawait\nwallet. connect\n({\nclient,\nstrategy:\n\"phone\"\n,\nphonNumber,\nverificationCode,\n});\nreturn\nwallet;\n});\n};\nAuthenticate via Passkey\nimport\n{ inAppWallet, hasStoredPasskey }\nfrom\n\"thirdweb/wallets/in-app\"\n;\nconst\n{\nconnect\n}\n=\nuseConnect\n();\nconst\nhandleLogin\n=\nasync\n()\n=>\n{\nawait\nconnect\n(()\n=>\n{\nconst\nwallet\n=\ninAppWallet\n();\nconst\nhasPasskey\n=\nawait\nhasStoredPasskey\n(client);\nawait\nwallet."
  },
  {
    "title": "in-app-wallet/enable-gasless",
    "content": "Sponsor Transactions\nBy combining\nAccount abstraction\nand\nIn-App Wallet\n, you can create a truly seamless user experience:\nGasless transactions sponsored by your application\nBatched transactions\nFull account recovery the user \"account\"\nConfigure in-app wallet for sponsored transactions\nTo enable account abstraction in your app, you need to add the\nsmartAccount\nprop with the\ninAppWallet\ncreation. import\n{ ConnectButton }\nfrom\n\"thirdweb/react\"\n;\nimport\n{ inAppWallet }\nfrom\n\"thirdweb/wallets\"\n;\nimport\n{ sepolia }\nfrom\n\"thirdweb/chains\"\n;\nconst\nwallets\n=\n[\ninAppWallet\n({\nsmartAccount: {\nchain: sepolia,\nsponsorGas:\ntrue\n,\n},\n}),\n];\nexport\ndefault\nfunction\nApp\n()\n{\nreturn\n(\n<\nThirdwebProvider\n>\n<\nConnectButton\nclient\n=\n{\nclient\n}\nwallets\n=\n{\nwallets\n}\n/>\n</\nThirdwebProvider\n>\n);\n}\nThis will create an in-app wallet and a smart account for the user. The smart account will be initialized with the in-app wallet as the owner. You can sponsor transactions simply by passing\nsponsrGas: true\nto the\nsmartAccount\nprop. This will allow the smart account to send transactions without the user needing to hold any ETH."
  },
  {
    "title": "in-app-wallet/export-private-key",
    "content": "Export Private Key\nLearn how to export the private key for a thirdweb in-app wallet using the Connect modal. Export\nChoose \"Export Private Key\" and confirm the action to reveal the private key. Confirm\nConfirm you want to reveal your private key. Secure Private Keys\nRevealing private keys can compromise your assets and security. Advanced Configuration\nAs an advanced option, to hide the export private key option from the modal, set the\nhidePrivateKeyOption\nto\ntrue"
  },
  {
    "title": "in-app-wallet/get-started",
    "content": "Connect Users\nUsing the Connect UI components\nIf you're building a\nReact website\n,\nReact Native app\n, or\nUnity game\nyou can use the prebuilt connect UI components to authenticate users and connect their wallets. import\n{ ThirdwebProvider, ConnectButton }\nfrom\n\"thirdweb/react\"\n;\nimport\n{ inAppWallet }\nfrom\n\"thirdweb/wallets\"\n;\nconst\nclient\n=\ncreateThirdwebClient\n({ clientId });\nconst\nwallets\n=\n[\ninAppWallet\n()];\nexport\ndefault\nfunction\nApp\n()\n{\nreturn\n(\n<\nThirdwebProvider\n>\n<\nConnectButton\nclient\n=\n{\nclient\n}\nwallets\n=\n{\nwallets\n}\n/>\n</\nThirdwebProvider\n>\n);\n}\nChoose authentication methods\nBy default, the connect UI supports multiple social logins as well as email, phone and passkey authentication. You can customize which authentication methods to support which will be reflected in the UI. import\n{ ThirdwebProvider, ConnectButton }\nfrom\n\"thirdweb/react\"\n;\nimport\n{ inAppWallet }\nfrom\n\"thirdweb/wallets\"\n;\nconst\nclient\n=\ncreateThirdwebClient\n({ clientId });\nconst\nwallets\n=\n[\ninAppWallet\n({\nproviders: [\n\"email\"\n,\n\"phone\"\n,\n\"passkey\"\n,\n\"google\"\n,\n\"facebook\"\n,\n\"apple\"\n,\n\"discord\"\n,\n\"farcaster\"\n,\n],\n}),\n];\nexport\ndefault\nfunction\nApp\n()\n{\nreturn\n(\n<\nThirdwebProvider\n>\n<\nConnectButton\nclient\n=\n{\nclient\n}\nwallets\n=\n{\nwallets\n}\n/>\n</\nThirdwebProvider\n>\n);\n}"
  },
  {
    "title": "inAppWallet",
    "content": "connect\n({\nclient,\nchain,\nstrategy:\n\"google\"\n,\n});\nView all available social auth methods\nLogin with email\nimport\n{\ninAppWallet,\npreAuthenticate,\n}\nfrom\n\"thirdweb/wallets/in-app\"\n;\nconst\nwallet\n=\ninAppWallet\n();\n// sends a verification code to the provided email\nawait\npreAuthenticate\n({\nclient,\nstrategy:\n\"email\"\n,\nemail:\n\"\n[email protected]\n\"\n,\n});\n// login with the verification code\nconst\naccount\n=\nawait\nwallet. connect\n({\nclient,\nchain,\nstrategy:\n\"email\"\n,\nemail:\n\"\n[email protected]\n\"\n,\nverificationCode:\n\"123456\"\n,\n});\nLogin with SIWE\nimport\n{ inAppWallet, createWallet }\nfrom\n\"thirdweb/wallets\"\n;\nconst\nrabby\n=\ncreateWallet\n(\n\"io.rabby\"\n);\nconst\ninAppWallet\n=\ninAppWallet\n();\nconst\naccount\n=\nawait\ninAppWallet. connect\n({\nstrategy:\n\"wallet\"\n,\nchain: mainnet,\nwallet: rabby,\nclient:\nMY_CLIENT\n,\n});\nLogin with phone number\nimport\n{\ninAppWallet,\npreAuthenticate,\n}\nfrom\n\"thirdweb/wallets/in-app\"\n;\nconst\nwallet\n=\ninAppWallet\n();\n// sends a verification code to the provided phone number\nawait\npreAuthenticate\n({\nclient,\nstrategy:\n\"phone\"\n,\nphoneNumber:\n\"+1234567890\"\n,\n});\n// login with the verification code\nconst\naccount\n=\nawait\nwallet. connect\n({\nclient,\nchain,\nstrategy:\n\"phone\"\n,\nhoneNumber:\n\"+1234567890\"\n,\nverificationCode:\n\"123456\"\n,\n});\nLogin with passkey\nimport\n{\ninAppWallet,\nhasStoredPasskey,\n}\nfrom\n\"thirdweb/wallets/in-app\"\n;\nconst\nwallet\n=\ninAppWallet\n();\nconst\nwallet\n=\ninAppWallet\n();\nconst\nhasPasskey\n=\nawait\nhasStoredPasskey\n(client);\nawait\nwallet. connect\n({\nclient,\nchain,\nstrategy:\n\"google\"\n,\n});\nSpecify a logo for your login page (Connect UI)\nimport\n{ inAppWallet }\nfrom\n\"thirdweb/wallets\"\n;\nconst\nwallet\n=\ninAppWallet\n({\nmetadata: {\nimage: {\nsrc:\n\"https://example.com/logo.png\"\n,\nalt:\n\"My logo\"\n,\nwidth:\n100\n,\nheight:\n100\n,\n},\n},\n});\nHide the ability to export the private key within the Connect Modal UI\nimport\n{ inAppWallet }\nfrom\n\"thirdweb/wallets\"\n;\nconst\nwallet\n=\ninAppWallet\n({\nhidePrivateKeyExport:\ntrue\n,\n});\nOpen the Oauth window in the same tab\nBy default, the Oauth window will open in a popup window."
  },
  {
    "title": "lightTheme",
    "content": "lightTheme\nCreate a custom light theme object by using the default dark theme as a base and applying overrides. Example\nGet the default light theme\nconst\ndefaultLightTheme\n=\nlightTheme\n();\nCreate a custom light theme\nconst\ncustomTheme\n=\nlightTheme\n({\ncolors: {\nmodalBg:\n\"red\"\n,\n},\n});\nSignature\nfunction\nlightTheme\n(\noverrides\n? :\nThemeOverrides\n)\n:\nTheme\n;\nParameters\noverrides\noptional\nThe overrides to apply to the default light theme. Type\nlet\noverrides\n:\n{\n[\nkey\nin\nExclude\n<\nkeyof\nTheme\n,\n\"type\"\n>]\n:\nPartial\n<\nTheme\n[\nkey\n]>;\n};\nReturns\nReturn Type\nlet\nreturnType\n:\n{\ncolors\n:\n{\naccentButtonBg\n:\nstring\n;\naccentButtonText\n:\nstring\n;\naccentText\n:\nstring\n;\nborderColor\n:\nstring\n;\nconnectedButtonBg\n:\nstring\n;\nconnectedButtonBgHover\n:\nstring\n;\ndanger\n:\nstring\n;\ninputAutofillBg\n:\nstring\n;\nmodalBg\n:\nstring\n;\nmodalOverlayBg\n:\nstring\n;\nprimaryButtonBg\n:\nstring\n;\nprimaryButtonText\n:\nstring\n;\nprimaryText\n:\nstring\n;\nscrollbarBg\n:\nstring\n;\nsecondaryButtonBg\n:\nstring\n;\nsecondaryButtonHoverBg\n:\nstring\n;\nsecondaryButtonText\n:\nstring\n;\nsecondaryIconColor\n:\nstring\n;\nsecondaryIconHoverBg\n:\nstring\n;\nsecondaryIconHoverColor\n:\nstring\n;\nsecondaryText\n:\nstring\n;\nselectedTextBg\n:\nstring\n;\nselectedTextColor\n:\nstring\n;\nseparatorLine\n:\nstring\n;\nskeletonBg\n:\nstring\n;\nsuccess\n:\nstring\n;\ntertiaryBg\n:\nstring\n;\ntooltipBg\n:\nstring\n;\ntooltipText\n:\nstring\n;\n};\nfontFamily\n:\nstring\n;\ntype\n:\n\"light\"\n|\n\"dark\"\n;\n};\nTheme object"
  },
  {
    "title": "migrate",
    "content": "SDK v4\nSDK v5\nMinimum bundle size\n766kb\n104kb\nDependencies\n\"@thirdweb-dev/react\": \"^4.9.4\"\n\"@thirdweb-dev/sdk\": \"^4.0.99\"\n\"ethers\": \"^5.7.2\"\n\"thirdweb\": \"^5.42.0\"\n(Built with Next.js 14.2.5)\n2. More wallets supported\nThe SDK v4 only supports a handful of web3 wallets and the more wallets you want to include in your app, the heavier it becomes. Flexibility with React hooks\nWhen building a React web3 application with thirdweb SDK v4, you have access to a set of prebuilt React hooks which let you conveniently interact with your smart contracts. In SDK v5, we introduce a novel concept called \"prebuilt extensions\" - a set of read & write methods for popular contracts which you can\nplug & play\n. For example:\nRead contract states with v5\n// Get a list of owned ERC721 tokens in a wallet\nimport\n{ useReadContract }\nfrom\n\"thirdweb/react\"\n;\nimport\n{ getOwnedNFTs }\nfrom\n\"thirdweb/extensions/erc721\"\n;\nconst\n{\ndata\n}\n=\nuseReadContract\n(getOwned, { contract, owner });\nWrite to contract with v5\n// Claim an NFT from thirdweb Drop contract\nimport\n{ useSendTransaction }\nfrom\n\"thirdweb/react\"\n;\nimport\n{ claimTo }\nfrom\n\"thirdweb/extensions/erc721\"\n;\nconst\n{\nmutate\n:\nsendTx\n}\n=\nuseSendTransaction\n();\nconst\ntransaction\n=\nclaimTo\n({\ncontract,\nto:\n\"0x...\"\n,\nquantity:\n1\nn\n,\n});\nsendTx\n(transaction);\nAs you can see, by pairing the contract extensions with\nuseReadContract\n(for read) and\nuseSendTransaction\n(for write),\nwe are able to greatly reduce the amount of code that is packaged & shipped to the end users."
  },
  {
    "title": "migrate/cheatsheet",
    "content": "React Cheatsheet\nTask\n@thirdweb-dev/react\nthirdweb\nProvider\nimport { ThirdwebProvider} from @thirdweb-dev/react\nimport { ThirdwebProvider } from \"thirdweb/react\"\nContract\nuseContract(...)\ngetContract(...) // not a hook\nAddress\nuseAddress(...)\nuseActiveAccount(...) // account?.address\nRead\nuseContractRead(...)\nuseReadContract(...)\nWrite\nuseContractWrite(...)\nuseSendTransaction()\nExtensions\nuseNFTs(...)\nuseReadContract(getNFTs, { ... })\nGet Signer\nuseSigner()\nuseActiveAccount()\nGet Wallet\nuseWallet()\nuseActiveWallet()\nButton\nWeb3Button\nTransactionButton\nConnect\nConnectWallet\nConnectButton\nConnection Status\nuseConnectionStatus()\nuseActiveWalletConnectionStatus()\nSwitch Chain\nuseSwitchChain()\nuseSwitchActiveWalletChain()\nGet Connected Chain\nuseChain()\nuseSwitchActiveWalletChain()\nTypeScript Cheatsheet\nTask\n@thirdweb-dev/sdk\nthirdweb\nChains\nimport { Sepolia } from \"@thirdweb-dev/chains\"\nimport { sepolia } from \"thirdweb/chains\"\nWallets\nimport { MetaMaskWallet } from \"@thirdweb-dev/wallets\"\nimport { createWallet } from \"thirdweb/wallets\"\nInitialize\nnew ThirdwebSDK(...)\ncreateThirdwebClient({ ... })\nContract\nawait sdk.getContract(...)\ngetContract(...) // no await\nRead\nawait contract.call(...)\nawait readContract(...)\nPrepare\nawait contract.prepare(...)\nprepareContractCall(...) // no await\nSend\nawait contract.call(...)\nawait sendTransaction(...)\nExtensions\nawait contract.erc721.getAll()\nawait getNFTs(...)\nDeploy\nsdk.deployer.deployBuiltInContract(...)\nawait deployPublishedContract(...)"
  },
  {
    "title": "migrate/contracts",
    "content": "NEXT_PUBLIC_TW_CLIENT_ID\n,\n});\nconst\ncontract\n=\ngetContract\n({\naddress:\n\"0x....\"\n,\nchain: ethereum,\nclient,\n});\nContract extensions\nThis is a new terminology that we introduced in the new SDK. Example: Import an ERC1155 \"read\" extension, for checking the balance of a wallet\nimport\n{ balanceOf }\nfrom\n\"thirdweb/extension/erc1155\"\n;\nconst\ntransaction\n=\nbalanceOf\n({\ncontract,\nowner:\n\"0x...\"\n,\ntokenId:\n0\nn\n,\n});\nReading states of a contract\nGiven the task of calling\nbalanceOf\nfrom an ERC1155 contract, we'll be comparing the code between v4 and v5\nSDK v4\nimport\n{ useNFTBalance, useContract }\nfrom\n\"@thirdweb-dev/react\"\n;\nfunction\nApp\n() {\nconst\n{\ncontract\n}\n=\nuseContract\n(contractAddress);\nconst\n{\nisLoading\n,\ndata\n,\nerror\n}\n=\nuseNFTBalance\n(\ncontract,\n\"{{wallet_address}}\"\n,\n\"{{token_id}}\"\n,\n);\n}\nSDK v5\nimport\n{ getContract, createThirdwebClient }\nfrom\n\"thirdweb\"\n;\nimport\n{ balanceOf }\nfrom\n\"thirdweb/extensions/erc1155\"\n;\nimport\n{ ethereum }\nfrom\n\"thirdweb/chains\"\n;\nimport\n{ client }\nfrom\n\"@lib/client\"\n;\nconst\ncontract\n=\ngetContract\n({\naddress:\n\"0x....\"\n,\nchain: ethereum,\nclient,\n});\nfunction\nApp\n() {\nconst\n{\ndata\n}\n=\nuseReadContract\n(balanceOf, {\ncontract,\nowner:\n\"0x...\"\n,\ntokenId:\n0\nn\n,\n});\n}\nAs you can see from the example above, we introduced the hook\nuseReadContract\nin v5. The formula for reading a contract state is:\nuseReadContract + <the read contract method>\nIf the extension you are looking for is not included in the SDK\nYou can always use the function signature with\nuseReadContract\n(It's also typesafe)\nuseReadContract\n({\ncontract,\nmethod:\n\"function balanceOf(address _owner, uint256 tokenId) view returns (uint256)\"\n,\n...\n})\nA tip for getting a function's signature\nGo to the thirdweb Dashboard's explorer page and select the function that you want to interact with. Given the task of claiming an NFT from an NFT Drop collection, let's compare the code between the SDK v4 and v5\nSDK V4\nimport\n{ useContract, useClaimNFT }\nfrom\n\"@thirdweb-dev/react\"\n;\nfunction\nApp\n() {\nconst\n{\ncontract\n}\n=\nuseContract\n(contractAddress);\nconst\n{\nmutateAsync\n:\nclaimNft\n,\nisLoading\n,\nerror\n,\n}\n=\nuseClaimNFT\n(contract);\nreturn\n(\n<\nWeb3Button\ncontractAddress\n=\n{\ncontractAddress\n}\naction\n=\n{\n()\n=>\nclaimNft\n({\nto:\n\"{{wallet_address}}\"\n,\n// Use useAddress hook to get current wallet address\nquantity:\n1\n,\n})\n}\n>\nClaim NFT\n</\nWeb3Button\n>\n);\n}\nSDK v5\nimport\n{ useSendTransaction }\nfrom\n\"thirdweb/react\"\n;\nimport\n{ claimTo }\nfrom\n\"thirdweb/extension/erc721\"\n;\nfunction\nApp\n() {\nconst\ntransaction\n=\nclaimTo\n({\ncontract,\nquantity:\n1\nn\n,\nto:\n\"0x...\"\n,\n});\nconst\n{\nmutateAsync\n:\nclaimNft\n}\n=\nuseSendTransaction\n();\nreturn\n<\nbutton\nonClick\n=\n{\n()\n=>\nclaimNft\n(transaction)\n}\n>Claim</\nbutton\n>;\n}\nAnother beautiful thing about the SDK v5 is that it comes with the\nTransactionButton\nwhich allows you to make a contract call\nwithout\nhaving to use the above React hooks. import\n{ TransactionButton }\nfrom\n\"thirdweb/react\"\n;\nimport\n{ claimTo }\nfrom\n\"thirdweb/extension/erc721\"\n;\nfunction\nApp\n() {\nreturn\n(\n<\nTransactionButton\ntransaction\n=\n{\n()\n=>\nclaimTo\n({ contract, quantity:\n1\nn\n, to:\n\"0x...\"\n})\n}\n>\nClaim\n</\nTransactionButton\n>\n);\n}"
  },
  {
    "title": "migrate/ethers-adapter",
    "content": "import\n{ ethers5Adapter }\nfrom\n\"thirdweb/adapters/ethers5\"\n;\nimport\n{ useActiveAccount }\nfrom\n\"thirdweb/react\"\n;\nconst\naccount\n=\nuseActiveAccount\n();\n...\nconst\nsigner\n=\nawait\nethers5Adapter.signer. toEthers\n({ client, chain, account });\nOnce you have the signer, you can perform different tasks using ethers.js as usual:\n// Get balance\nconst\nbalance\n=\nawait\nsigner. signMessage\n(message);\nProvider\nSimilar to\nsigner\n, you can retrieve the ethers provider in thirdweb v5 using the same adapter:\nimport\n{ ethers5Adapter }\nfrom\n\"thirdweb/adapters/ethers5\"\n;\nimport\n{ createThirdwebClient }\nfrom\n\"thirdweb\"\n;\nconst\nclient\n=\ncreateThirdwebClient\n({\nclientId:\n\"...\"\n,\n});\nconst\nprovider\n=\nethers5Adapter.provider. getBlockNumber\n();\nContracts\nSimilarly to the 2 components above, here's how you can convert a\nthirdweb contract instance\nto ethers's:\nimport\n{ ethers5Adapter }\nfrom\n\"thirdweb/adapters/ethers5\"\n;\nconst\nethersContract\n=\nawait\nethers5Adapter.contract. toEthers\n({\nthirdwebContract,\n});\nand then do stuff with it:\n// Estimate gas\nconst\ngasLimit\n=\nawait\ncontract.estimateGas[\n\"functionName\"\n](\n...\nparams,\n);\n// Send a transaction\nconst\ntx\n=\nawait\ncontract[\n\"functionName\"\n](\n...\nparams, { gasLimit });"
  },
  {
    "title": "migrate/installation",
    "content": "Installation\nBelow is how you install thirdweb v4 SDKs\nnpm\nyarn\npnpm\nbun\nnpm\ni\n@thirdweb-dev/sdk\n@thirdweb-dev/react\n[email protected]\nWith the latest version, everything comes in one single package\nnpm\nyarn\npnpm\nbun\nnpm\ni\nthirdweb\nSetups\nOnce you have installed the latest package (alongside the older version that you want to replace), you can start the migration process. ThirdwebProvider\nIn the latest SDK, the\nThirdwebProvider\nno longer accepts any prop such as\nactiveChain\n,\nclientId\nor any extra SDK options. import\n{ ThirdwebProvider }\nfrom\n\"thirdweb/react\"\n;\n<\nThirdwebProvider\n>...</\nThirdwebProvider\n>;\nProgressive migration\nIf you're currently using the\n@thirdweb-dev/sdk\n, you can progressively migrate to the new\nthirdweb\nSDK. import\n{ ThirdwebProvider\nas\nThirdwebProviderV4 }\nfrom\n\"@thirdweb-dev/react\"\n;\nimport\n{ ThirdwebProvider }\nfrom\n\"thirdweb/react\"\n;\n// v5\n<\nThirdwebProviderV4\nactiveChain\n=\n{\n...\n}\nclientId\n=\n{\n...\n}\n>\n<\nThirdwebProvider\n>\n...\n</\nThirdwebProvider\n>\n</\nThirdwebProviderV4\n>\nConnecting wallets\nSimilar to v4's\nConnectWallet\ncomponent, the latest version has the\nConnectButton\ncomponent which has the same functionality. Here's how you use the new\nConnectButton\n:\nimport\n{ createThirdwebClient }\nfrom\n\"thirdweb\"\n;\nimport\n{ ConnectButton }\nfrom\n\"thirdweb/react\"\n;\nconst\nclient\n=\ncreateThirdwebClient\n({\nclientId: process.env."
  },
  {
    "title": "preAuthenticate",
    "content": "preAuthenticate\nPre-authenticates the user based on the provided authentication strategy. Use this function to send a verification code to the user's email or phone number. Example\nimport\n{ preAuthenticate }\nfrom\n\"thirdweb/wallets/in-app\"\n;\nconst\nresult\n=\nawait\npreAuthenticate\n({\nclient,\nstrategy:\n\"email\"\n,\nemail:\n\"\n[email protected]\n\"\n,\n});\nSignature\nfunction\npreAuthenticate\n(\nargs\n:\nPreAuthArgsType\n)\n:\nPromise\n<\nvoid\n>;\nParameters\nargs\nThe arguments required for pre-authentication. Type\nlet\nargs\n:\nPreAuthArgsType\n;\nReturns\nReturn Type\nlet\nreturnType\n:\nPromise\n<\nvoid\n>;\nA promise that resolves to the pre-authentication result."
  },
  {
    "title": "rainbow-kit-migrate",
    "content": "Installation\nInstall the connect SDK in your application\nnpm\nyarn\npnpm\nbun\nnpm\ni\nthirdweb\nDependency Conflicts\nIf you are installing thirdweb using\nnpm\nand run into any dependency conflicts, install thirdweb using\nnpm install thirdweb --legacy-peer-deps\nSetup\nWrap application using\nThirdwebProvider\nand remove\nRainbowKitProvider\nimport\n{ ThirdwebProvider }\nfrom\n\"thirdweb/react\"\n;\n. function\nMyApp\n({\nComponent\n,\npageProps\n}\n:\nAppProps\n) {\nreturn\n(\n<\nThirdwebProvider\n>\n<\nWagmiProvider\nconfig\n=\n{\nconfig\n}\n>\n<\nQueryClientProvider\nclient\n=\n{\nclient\n}\n>\n<\nComponent\n{\n...\npageProps\n}\n/>\n</\nQueryClientProvider\n>\n</\nWagmiProvider\n>\n</\nThirdwebProvider\n>\n);\n}\nSwap ConnectButton component\nImport\ncreateThirdwebClient\nand\nConnectButton\nfrom thirdweb and add them to your application. const\nHome\n:\nNextPage\n=\n()\n=>\n{\nconst\nclient\n=\ncreateThirdwebClient\n({\nclientId:\n\"<client_id>\"\n,\n});\nreturn\n(\n<\nmain\n>\n<\nConnectButton\nclient\n=\n{\nclient\n}\n/>\n</\nmain\n>\n);\n};\nClient ID\nGet a free client ID to use in your application from\nthirdweb's dashboard\n. (Optional) Adapters\nIf you are using Wagmi, Viem, or Ethers in your application, use thirdweb adapters to continue using contracts, providers, and wallets from these libraries. Cheatsheet\nInstallation\nRainbowKit\nnpm install @rainbow-me/rainbowkit wagmi\n[email protected]\n@tanstack/react-query\nthirdweb\nnpm install thirdweb\nInitalization\nRainbowKit\nimport\n\"@rainbow-me/rainbowkit/styles.css\"\n;\nimport\n{\ngetDefaultConfig,\nRainbowKitProvider,\n}\nfrom\n\"@rainbow-me/rainbowkit\"\n;\nimport\n{ WagmiProvider }\nfrom\n\"wagmi\"\n;\nimport\n{\nmainnet,\npolygon,\noptimism,\narbitrum,\nbase,\n}\nfrom\n\"wagmi/chains\"\n;\nimport\n{\nQueryClientProvider,\nQueryClient,\n}\nfrom\n\"@tanstack/react-query\"\n;\nconst\nconfig\n=\ngetDefaultConfig\n({\nappName:\n\"My RainbowKit App\"\n,\nprojectId:\n\"YOUR_PROJECT_ID\"\n,\nchains: [mainnet, polygon, optimism, arbitrum, base],\nssr:\ntrue\n,\n// If your dApp uses server side rendering (SSR)\n});\nconst\nqueryClient\n=\nnew\nQueryClient\n();\nconst\nApp\n=\n()\n=>\n{\nreturn\n(\n<\nWagmiProvider\nconfig\n=\n{\nconfig\n}\n>\n<\nQueryClientProvider\nclient\n=\n{\nqueryClient\n}\n>\n<\nRainbowKitProvider\n>\n{\n/* Your App */\n}\n</\nRainbowKitProvider\n>\n</\nQueryClientProvider\n>\n</\nWagmiProvider\n>\n);\n};\nthirdweb\nimport\n{ ThirdwebProvider }\nfrom\n\"thirdweb/react\"\n;\nconst\nApp\n=\n()\n=>\n{\nreturn\n<\nThirdwebProvider\n>\n{\n/* Your App */\n}\n</\nThirdwebProvider\n>;\n};\nConnectButton\nRainbowKit\nimport\n{ ConnectButton }\nfrom\n\"@rainbow-me/rainbowkit\"\n;\nexport\nconst\nYourApp\n=\n()\n=>\n{\nreturn\n<\nConnectButton\n/>;\n};\nthirdweb\nimport\n{ ConnectButton }\nfrom\n\"thirdweb/react\"\n;\nimport\n{ createThirdwebClient }\nfrom\n\"thirdweb\"\n;\nconst\nclient\n=\ncreateThirdwebClient\n({ clientId:\n\"your-client-id\"\n});\nexport\nconst\nYourApp\n=\n()\n=>\n{\nreturn\n<\nConnectButton\nclient\n=\n{\nclient\n}\n/>;\n};\nLocalization\nRainbowKit\n<\nRainbowKitProvider\nlocale\n=\n\"zh-CN\"\n{\n...\netc\n}\n>\n{\n/* Your App */\n}\n</\nRainbowKitProvider\n>;\nthirdweb\n<\nConnectButton\nlocale\n=\n{\n\"es-ES\"\n}\n{\n...\netc\n}\n/>;\nModal Sizes\nRainbowKit\n<\nRainbowKitProvider\nmodalSize\n=\n\"compact\"\n{\n...\netc\n}\n>\n{\n/* Your App */\n}\n</\nRainbowKitProvider\n>;\nthirdweb\n<\nConnectButton\nlocale\n=\n{\n\"es-ES\"\n}\n{\n...\netc\n}\n/>;\nTheming\nRainbowKit\nimport\n{ ...etc, darkTheme }\nfrom\n'@rainbow-me/rainbowkit'\n;\n<\nRainbowKitProvider\ntheme\n=\n{\ndarkTheme\n()\n}\n{\n...\netc\n}\n>\n{\n/* Your App */\n}\n</\nRainbowKitProvider\n>\nthirdweb\n<\nConnectButton\ntheme\n=\n\"dark\"\n// \"light\"\n{\n...\netc\n}\n/>;\nTemplates\nWagmi Adapter\nExample\nEthers Adapter\nExample"
  },
  {
    "title": "reading-state",
    "content": "Read contract state\nReading contract state in react is done via the\nuseReadContract\nhook. The hook returns a React Query\ndata\n,\nisLoading\n, and other useful state that you can use to render your component. import\n{ getContract }\nfrom\n\"thirdweb\"\n;\nimport\n{ useReadContract }\nfrom\n\"thirdweb/react\"\n;\nconst\ncontract\n=\ngetContract\n({\nclient,\nchain,\naddress:\n\"0x...\"\n,\n});\nconst\nMyComponent\n=\n()\n=>\n{\nconst\n{\ndata\n,\nisLoading\n}\n=\nuseReadContract\n({\ncontract,\nmethod:\n\"function tokenURI(uint256 tokenId) returns (string)\"\n,\nparams: [\n1\nn\n],\n});\n};"
  },
  {
    "title": "transactions",
    "content": "Transactions\nSending a transaction in react is done via the\nuseSendTransaction\nhook. The hook returns a React Query\nmutate\nfunction that you can call with a transaction object created with\nprepareContractCall\nor\nprepareTransaction\n. Note that unlike in TypeScript core,\nuseSendTransaction\ndoes not require passing the active\nAccount\n, it will used the current active account from the React context. import\n{ prepareContractCall, getContract }\nfrom\n\"thirdweb\"\n;\nimport\n{ useSendTransaction }\nfrom\n\"thirdweb/react\"\n;\nconst\ncontract\n=\ngetContract\n({\nclient,\nchain,\naddress:\n\"0x...\"\n,\n});\nconst\nMyComponent\n=\n()\n=>\n{\nconst\n{\nmutate\n:\nsendTransaction\n,\nisPending\n}\n=\nuseSendTransaction\n();\nconst\nonClick\n=\nasync\n()\n=>\n{\nconst\ntransaction\n=\nprepareContractCall\n({\ncontract,\nmethod:\n\"function mint(address to)\"\n,\nparams: [\n\"0x...\"\n],\nvalue:\n0\n,\n});\nsendTransaction\n(transaction);\n};\n};"
  },
  {
    "title": "useActiveAccount",
    "content": "useActiveAccount\nA hook that returns the active account\nExample\nimport\n{ useActiveAccount }\nfrom\n\"thirdweb/react\"\n;\nconst\nactiveAccount\n=\nuseActiveAccount\n();\nconsole. log\n(\n\"address\"\n, activeAccount?.address);\nSignature\nfunction\nuseActiveAccount\n()\n:\nundefined\n|\nAccount\n;\nReturns\nReturn Type\nlet\nreturnType\n:\nundefined\n|\nAccount\n;\nThe active\nAccount\nor\nundefined\nif no active account is set."
  },
  {
    "title": "useActiveWallet",
    "content": "useActiveWallet\nA hook that returns the active wallet\nExample\nBasic usage\nimport\n{ useActiveWallet }\nfrom\n\"thirdweb/react\"\n;\nconst\nwallet\n=\nuseActiveWallet\n();\nListen to account change event\nconst\nwallet\n=\nuseActiveWallet\n();\nwallet?. subscribe\n(\n\"accountChanged\"\n, (\naccount\n)\n=>\n{\nconsole. log\n(account);\n});\nListen to multiple accounts changed event\nconst\nwallet\n=\nuseActiveWallet\n();\nwallet?. log\n(addresses);\n});\nListen to network change event\nconst\nwallet\n=\nuseActiveWallet\n();\nwallet?. log\n(chain);\n});\nSignature\nfunction\nuseActiveWallet\n()\n:\nundefined\n|\nWallet\n;\nReturns\nReturn Type\nlet\nreturnType\n:\nundefined\n|\nWallet\n;\nThe active\nWallet\nor\nundefined\nif no active wallet is set."
  },
  {
    "title": "useActiveWalletChain",
    "content": "useActiveWalletChain\nA hook that returns the chain the active wallet is connected to\nExample\nimport\n{ useActiveWalletChain }\nfrom\n\"thirdweb/react\"\n;\nconst\nactiveChain\n=\nuseActiveWalletChain\n();\nSignature\nfunction\nuseActiveWalletChain\n()\n:\n|\nundefined\n|\nReadonly\n<\nChainOptions\n&\n{\nrpc\n:\nstring\n}>;\nReturns\nReturn Type\nlet\nreturnType\n:\nundefined\n|\nReadonly\n<\nChainOptions\n&\n{\nrpc\n:\nstring\n}>;\nThe chain the active wallet is connected to or null if no active wallet."
  },
  {
    "title": "useActiveWalletConnectionStatus",
    "content": "useActiveWalletConnectionStatus\nA hook that returns the active account's connection status. Example\nimport\n{ useActiveWalletConnectionStatus }\nfrom\n\"thirdweb/react\"\n;\nfunction\nExample\n() {\nconst\nstatus\n=\nuseActiveWalletConnectionStatus\n();\nconsole. log\n(status);\nreturn\n<\ndiv\n> ... </\ndiv\n>;\n}\nSignature\nfunction\nuseActiveWalletConnectionStatus\n()\n:\nConnectionStatus\n;\nReturns\nReturn Type\nlet\nreturnType\n:\n\"connected\"\n|\n\"disconnected\"\n|\n\"connecting\"\n;\nThe active wallet's connection status."
  },
  {
    "title": "useAutoConnect",
    "content": "useAutoConnect\nAutoconnect the last previously connected wallet. Example\nimport\n{ useAutoConnect }\nfrom\n\"thirdweb/react\"\n;\nconst\n{\ndata\n:\nautoConnected\n,\nisLoading\n}\n=\nuseAutoConnect\n({\nclient,\naccountAbstraction,\nwallets,\nonConnect,\ntimeout,\n});\nSignature\nfunction\nuseAutoConnect\n(\nprops\n:\nAutoConnectProps\n,\n)\n:\nUseQueryResult\n<\nboolean\n,\nError\n>;\nParameters\nprops\nThe props for auto connect. Type\nlet\nprops\n:\n{\naccountAbstraction\n? :\n(\nwallet\n:\nWallet\n)\n=>\nvoid\n;\ntimeout\n? :\nArray\n<\nWallet\n>;\n};\nReturns\nReturn Type\nlet\nreturnType\n:\nUseQueryResult\n<\nboolean\n,\nError\n>;\nwhether the auto connect was successful."
  },
  {
    "title": "useBuyWithCryptoHistory",
    "content": "useBuyWithCryptoHistory\nHook to get the \"Buy with crypto\" transaction history for a given wallet address. This hook is a React Query wrapper of the\ngetBuyWithCryptoHistory\nfunction. You can also use that function directly\nExample\nimport\n{ useBuyWithCryptoHistory }\nfrom\n\"thirdweb/react\"\n;\nfunction\nComponent\n() {\nconst\nbuyWithCryptoHistory\n=\nuseBuyWithCryptoHistory\n(params);\nreturn\n<\ndiv\n> ... </\ndiv\n>;\n}\nSignature\nfunction\nuseBuyWithCryptoHistory\n(\nparams\n? :\nBuyWithCryptoHistoryParams\n,\nqueryParams\n? :\nBuyWithCryptoHistoryQueryOptions\n,\n)\n:\nUseQueryResult\n<\nBuyWithCryptoHistoryData\n>;\nParameters\nparams\noptional\nobject of type\nBuyWithCryptoHistoryParams\nType\nlet\nparams\n:\n{\nclient\n:\nThirdwebClient\n;\ncount\n:\nnumber\n;\nstart\n:\nnumber\n;\nwalletAddress\n:\nstring\n;\n};\nqueryParams\noptional\noptions to configure the react query\nType\nlet\nqueryParams\n:\nBuyWithCryptoHistoryQueryOptions\n;\nReturns\nReturn Type\nlet\nreturnType\n:\nUseQueryResult\n<\nBuyWithCryptoHistoryData\n>;\nA React Query object which contains the data of type\nBuyWithCryptoHistoryData"
  },
  {
    "title": "useBuyWithCryptoQuote",
    "content": "You can also use that function directly\nOnce you have the quote, you can use the\nuseSendTransaction\nfunction to send the purchase\nand\nuseBuyWithCryptoStatus\nfunction to get the status of the swap transaction. Example\nimport\n{\nuseBuyWithCryptoQuote,\nuseBuyWithCryptoStatus,\ntype\nBuyWithCryptoStatusQueryParams,\nuseActiveAccount,\n}\nfrom\n\"thirdweb/react\"\n;\nimport\n{ sendTransaction }\nfrom\n\"thirdweb\"\n;\nfunction\nComponent\n() {\nconst\nbuyWithCryptoQuoteQuery\n=\nuseBuyWithCryptoQuote\n(swapParams);\nconst\n[\nbuyTxHash\n,\nsetBuyTxHash\n]\n=\nuseState\n<\nBuyWithCryptoStatusQueryParams\n|\nundefined\n>\n();\nconst\nbuyWithCryptoStatusQuery\n=\nuseBuyWithCryptoStatus\n(\nbuyTxHash\n? {\nclient,\ntransactionHash: buyTxHash,\n}\n:\nundefined\n,\n);\nasync\nfunction\nhandleBuyWithCrypto\n() {\nconst\naccount\n=\nuseActiveAccount\n();\n// if approval is required\nif\n(buyWithCryptoQuoteQuery.data.approval) {\nconst\napproveTx\n=\nawait\nsendTransaction\n({\ntransaction: swapQuote.data.approval,\naccount: account,\n});\nawait\nwaitForApproval\n(approveTx);\n}\n// send the transaction to buy crypto\n// this promise is resolved when user confirms the transaction in the wallet and the transaction is sent to the blockchain\nconst\nbuyTx\n=\nawait\nsendTransaction\n({\ntransaction: swapQuote.data.transactionRequest,\naccount: account,\n});\nawait\nwaitForApproval\n(buyTx);\n// set buyTx.transactionHash to poll the status of the swap transaction\nsetBuyWithCryptoTx\n(buyTx.transactionHash);\n}\nreturn\n<\nbutton\nonClick\n=\n{\nhandleBuyWithCrypto\n}\n>Swap</\nbutton\n>;\n}\nSignature\nfunction\nuseBuyWithCryptoQuote\n(\nparams\n? :\nBuyWithCryptoQuoteQueryOptions\n,\n)\n:\nUseQueryResult\n<\nBuyWithCryptoQuote\n>;\nParameters\nparams\noptional\nobject of type\nBuyWithCryptoQuoteQueryParams\nType\nlet\nparams\n:\n{\nclient\n:\nThirdwebClient\n;\nfromAddress\n:\nstring\n;\nfromChainId\n:\nnumber\n;\nfromTokenAddress\n:\nstring\n;\nintentId\n? :\nnever\n;\ntoAmount\n:\nstring\n}\n);\nqueryParams\noptional\noptions to configure the react query\nType\nlet\nqueryParams\n:\nBuyWithCryptoQuoteQueryOptions\n;\nReturns\nReturn Type\nlet\nreturnType\n:\nUseQueryResult\n<\nBuyWithCryptoQuote\n>;\nA React Query object which contains the data of type\nBuyWithCryptoQuote"
  },
  {
    "title": "useBuyWithCryptoStatus",
    "content": "useBuyWithCryptoStatus\nA hook to get a status of a \"Buy with crypto\" transaction to determine if the transaction is completed, failed or pending. Example\nimport\n{\nuseSendTransaction,\nuseBuyWithCryptoQuote,\nuseBuyWithCryptoStatus,\ntype\nBuyWithCryptoStatusQueryParams,\nuseActiveAccount,\n}\nfrom\n\"thirdweb/react\"\n;\nimport\n{ sendTransaction }\nfrom\n\"thirdweb\"\n;\nfunction\nComponent\n() {\nconst\nbuyWithCryptoQuoteQuery\n=\nuseBuyWithCryptoQuote\n(swapParams);\nconst\n[\nbuyTxHash\n,\nsetBuyTxHash\n]\n=\nuseState\n<\nBuyWithCryptoStatusQueryParams\n|\nundefined\n>\n();\nconst\nbuyWithCryptoStatusQuery\n=\nuseBuyWithCryptoStatus\n(\nbuyTxHash\n? {\nclient,\ntransactionHash: buyTxHash,\n}\n:\nundefined\n,\n);\nconst\naccount\n=\nuseActiveAccount\n();\nasync\nfunction\nhandleBuyWithCrypto\n() {\n// if approval is required\nif\n(buyWithCryptoQuoteQuery.data.approval) {\nconst\napproveTx\n=\nawait\nsendTransaction\n({\naccount: account,\ntransaction: swapQuote.data.approval,\n});\nawait\nwaitForApproval\n(approveTx);\n}\n// send the transaction to buy crypto\n// this promise is resolved when user confirms the transaction in the wallet and the transaction is sent to the blockchain\nconst\nbuyTx\n=\nawait\nsendTransactionMutation. mutateAsync\n({\ntransaction: swapQuote.data.transactionRequest,\naccount: account,\n});\nawait\nwaitForApproval\n(buyTx);\n// set buyTx.transactionHash to poll the status of the swap transaction\nsetBuyWithCryptoTx\n(buyTx.transactionHash);\n}\nreturn\n<\nbutton\nonClick\n=\n{\nhandleBuyWithCrypto\n}\n>Swap</\nbutton\n>;\n}\nSignature\nfunction\nuseBuyWithCryptoStatus\n(\nparams\n? :\nBuyWithCryptoTransaction\n,\n)\n:\nUseQueryResult\n<\nBuyWithCryptoStatus\n,\nError\n>;\nParameters\nparams\noptional\nobject of type\nBuyWithCryptoTransaction\nType\nlet\nparams\n:\n{\nclient\n:\nThirdwebClient\n;\ntransactionHash\n:\nstring\n};\nReturns\nReturn Type\nlet\nreturnType\n:\nUseQueryResult\n<\nBuyWithCryptoStatus\n,\nError\n>;\nA react query object which contains the data of type\nBuyWithCryptoStatus"
  },
  {
    "title": "useBuyWithFiatHistory",
    "content": "useBuyWithFiatHistory\nHook to get the \"Buy with Fiat\" transaction history for a given wallet address. This hook is a React Query wrapper of the\ngetBuyWithFiatHistory\nfunction. You can also use that function directly\nExample\nimport\n{ useBuyWithFiatHistory }\nfrom\n\"thirdweb/react\"\n;\nfunction\nComponent\n() {\nconst\nhistoryQuery\n=\nuseBuyWithFiatHistory\n(params);\nreturn\n<\ndiv\n> ... </\ndiv\n>;\n}\nSignature\nfunction\nuseBuyWithFiatHistory\n(\nparams\n? :\nBuyWithFiatHistoryParams\n,\nqueryParams\n? :\nBuyWithFiatHistoryQueryOptions\n,\n)\n:\nUseQueryResult\n<\nBuyWithFiatHistoryData\n>;\nParameters\nparams\noptional\nobject of type\nBuyWithFiatHistoryParams\nType\nlet\nparams\n:\n{\nclient\n:\nThirdwebClient\n;\ncount\n:\nnumber\n;\nstart\n:\nnumber\n;\nwalletAddress\n:\nstring\n;\n};\nqueryParams\noptional\noptions to configure the react query\nType\nlet\nqueryParams\n:\nBuyWithFiatHistoryQueryOptions\n;\nReturns\nReturn Type\nlet\nreturnType\n:\nUseQueryResult\n<\nBuyWithFiatHistoryData\n>;\nA React Query object which contains the data of type\nBuyWithFiatHistoryData"
  },
  {
    "title": "useBuyWithFiatQuote",
    "content": "useBuyWithFiatQuote\nHook to get a price quote for performing a \"Buy with Fiat\" transaction that allows users to buy a token with fiat currency. You can also use that function directly\nOnce you have the\nquote\n, you can open a new window with\nquote.onRampLink\nto allow the user to buy the token with fiat currency. Example\nimport\n{ NATIVE_TOKEN_ADDRESS }\nfrom\n\"thirdweb\"\n;\nimport\n{ base }\nfrom\n\"thirdweb/chains\"\n;\nimport\n{ useBuyWithFiatQuote }\nfrom\n\"thirdweb/react\"\n;\n// get a quote for buying 0.01 base native token with USD fiat currency\nfunction\nExample\n() {\nconst\nquote\n=\nuseBuyWithFiatQuote\n({\nclient: client,\n// thirdweb client\nfromCurrencySymbol:\n\"USD\"\n,\n// fiat currency symbol\ntoChainId: base.id,\n// base chain id\ntoAmount:\n\"0.01\"\n,\n// amount of token to buy\ntoTokenAddress:\nNATIVE_TOKEN_ADDRESS\n,\n// native token\ntoAddress:\n\"0x...\"\n,\n// user's wallet address\n});\nreturn\n(\n<\ndiv\n>\n{\nquote\n. :\nBuyWithFiatQuoteQueryOptions\n,\n)\n:\nUseQueryResult\n<\nBuyWithFiatQuote\n>;\nParameters\nparams\noptional\nobject of type\nGetBuyWithFiatQuoteParams\nType\nlet\nparams\n:\n{\nclient\n:\nThirdwebClient\n;\nfromAddress\n:\nstring\n;\nfromAmount\n? :\nstring\n;\ntoTokenAddress\n:\nstring\n;\n};\nqueryOptions\noptional\nType\nlet\nqueryOptions\n:\nBuyWithFiatQuoteQueryOptions\n;\nReturns\nReturn Type\nlet\nreturnType\n:\nUseQueryResult\n<\nBuyWithFiatQuote\n>;\nA React Query object which contains the data of type\nBuyWithFiatQuote"
  },
  {
    "title": "useBuyWithFiatStatus",
    "content": "useBuyWithFiatStatus\nA hook to get a status of a \"Buy with Fiat\" transaction to determine if the transaction is completed, failed or pending. useBuyWithFiatStatus\nrefetches the status using\ngetBuyWithFiatStatus\nevery 5 seconds. Example\nimport\n{ useBuyWithFiatStatus }\nfrom\n\"thirdweb/react\"\n;\nimport\n{ client }\nfrom\n\"./client\"\n;\nfunction\nExample\n() {\nconst\nfiatStatus\n=\nuseBuyWithFiatStatus\n({\nclient: client,\n// thirdweb client\nintentId:\n\"....\"\n,\n// get the intentId from quote ( quote.intentId )\n});\nconsole. log\n(fiatStatus.data);\nreturn\n<\ndiv\n>...</\ndiv\n>;\n}\nSignature\nfunction\nuseBuyWithFiatStatus\n(\nparams\n? :\nGetBuyWithFiatStatusParams\n,\n)\n:\nUseQueryResult\n<\nBuyWithFiatStatus\n>;\nParameters\nparams\noptional\nobject of type\nGetBuyWithFiatStatusParams\nType\nlet\nparams\n:\n{\nclient\n:\nThirdwebClient\n;\nintentId\n:\nstring\n};\nReturns\nReturn Type\nlet\nreturnType\n:\nUseQueryResult\n<\nBuyWithFiatStatus\n>;\nA react query object which contains the data of type\nBuyWithFiatStatus"
  },
  {
    "title": "useConnect",
    "content": "useConnect\nA hook to set a wallet as active wallet\nExample\nimport\n{ useConnect }\nfrom\n\"thirdweb/react\"\n;\nimport\n{ createWallet }\nfrom\n\"thirdweb/wallets\"\n;\nfunction\nExample\n() {\nconst\n{\nconnect\n,\nisConnecting\n,\nerror\n}\n=\nuseConnect\n();\nreturn\n(\n<\nbutton\nonClick\n=\n{\n()\n=>\nconnect\n(\nasync\n()\n=>\n{\n// instantiate wallet\nconst\nwallet\n=\ncreateWallet\n(\n\"io.metamask\"\n);\n// connect wallet\nawait\nwallet. connect\n();\n// return the wallet\nreturn\nwallet;\n})\n}\n>\nConnect\n</\nbutton\n>\n);\n}\nSignature\nfunction\nuseConnect\n(\noptions\n? :\nConnectManagerOptions\n)\n:\n{\nreadonly\nconnect\n:\n(\nwalletOrFn\n:\nWallet\n|\n(()\n=>\nPromise\n<\nWallet\n>),\n)\n=>\nPromise\n<\nnull\n|\nWallet\n>;\nerror\n:\nnull\n|\nError\n;\nisConnecting\n:\nboolean\n;\n};\nParameters\noptions\noptional\nType\nlet\noptions\n:\n{\naccountAbstraction\n? :\nSmartWalletOptions\n;\nclient\n:\nThirdwebClient\n;\nonConnect\n? :\n(\nwallet\n:\nWallet\n)\n=>\nvoid\n;\n};\nReturns\nReturn Type\nlet\nreturnType\n:\n{\nreadonly\nconnect\n:\n(\nwalletOrFn\n:\nWallet\n|\n(()\n=>\nPromise\n<\nWallet\n>),\n)\n=>\nPromise\n<\nnull\n|\nWallet\n>;\nerror\n:\nnull\n|\nError\n;\nisConnecting\n:\nboolean\n;\n};\nA function that lets you connect a wallet."
  },
  {
    "title": "useConnectModal",
    "content": "useConnectModal\nhook that allows you to open the Connect UI in a Modal to prompt the user to connect wallet. Example\nimport\n{ createThirdwebClient }\nfrom\n\"thirdweb\"\n;\nimport\n{ useConnectModal }\nfrom\n\"thirdweb/react\"\n;\nconst\nclient\n=\ncreateThirdwebClient\n({\nclientId:\n\"<your_client_id>\"\n,\n});\nfunction\nExample\n() {\nconst\n{\nconnect\n,\nisConnecting\n}\n=\nuseConnectModal\n();\nasync\nfunction\nhandleConnect\n() {\nconst\nwallet\n=\nawait\nconnect\n({ client });\n// opens the connect modal\nconsole. log\n(\n\"connected to\"\n, wallet);\n}\nreturn\n<\nbutton\nonClick\n=\n{\nhandleConnect\n}\n> Connect </\nbutton\n>;\n}\nThe returned\nconnect\nmethod takes an object of type\nUseConnectModalOptions\nas an argument to customize the Connect Modal UI. Refer to\nUseConnectModalOptions\nto see the available options. Signature\nfunction\nuseConnectModal\n()\n:\n{\nconnect\n:\n(\nprops\n:\nUseConnectModalOptions\n)\n=>\nPromise\n<\nWallet\n>;\nisConnecting\n:\nboolean\n;\n};\nReturns\nReturn Type\nlet\nreturnType\n:\n{\nconnect\n:\n(\nprops\n:\nUseConnectModalOptions\n)\n=>\nPromise\n<\nWallet\n>;\nisConnecting\n:\nboolean\n;\n};"
  },
  {
    "title": "useConnectedWallets",
    "content": "useConnectedWallets\nA hook that returns all connected wallets\nExample\nimport\n{ useConnectedWallets }\nfrom\n\"thirdweb/react\"\n;\nconst\nwallets\n=\nuseConnectedWallets\n();\nSignature\nfunction\nuseConnectedWallets\n()\n:\nArray\n<\nWallet\n>;\nReturns\nReturn Type\nlet\nreturnType\n:\nArray\n<\nWallet\n>;\nAn array of all connected wallets"
  },
  {
    "title": "useContractEvents",
    "content": "Example\nUsing event extensions\nThe\nthirdweb/extesions\nexport contains event definitions for many popular contracts. You can use these event definitions to watch for specific events with a type-safe API. import\n{ useContractEvents }\nfrom\n\"thirdweb/react\"\n;\nimport\n{ tokensClaimedEvent }\nfrom\n\"thirdweb/extensions/erc721\"\n;\nconst\naccount\n=\nuseActiveAccount\n();\nconst\ncontractEvents\n=\nuseContractEvents\n({\ncontract,\nevents: [\ntokensClaimedEvent\n({ claimer: account?.address })],\n});\nUsing custom events\nYou can also watch for custom events by passing an array of\nprepared events\n. import\n{ useContractEvents }\nfrom\n\"thirdweb/react\"\n;\nimport\n{ prepareEvent }\nfrom\n\"thirdweb\"\n;\nconst\nmyEvent\n=\nprepareEvent\n({\nsignature:\n\"event MyEvent(uint256 myArg)\"\n,\n});\nconst\ncontractEvents\n=\nuseContractEvents\n({\ncontract,\nevents: [myEvent],\n});\nSignature\nfunction\nuseContractEvents\n(\noptions\n:\nUseContractEventsOptions\n<\nabi\n,\nabiEvents\n>,\n)\n:\nUseQueryResult\n<\nParseEventLogsResult\n<\nabiEvents\n,\ntrue\n>,\nError\n>;\nParameters\noptions\nThe options for watching contract events. Type\nlet\noptions\n:\nUseContractEventsOptions\n<\nabi\n,\nabiEvents\n>;\nReturns\nReturn Type\nlet\nreturnType\n:\nUseQueryResult\n<\nParseEventLogsResult\n<\nabiEvents\n,\ntrue\n>,\nError\n>;\nThe contract events of the watched contract events."
  },
  {
    "title": "useDisconnect",
    "content": "useDisconnect\nDisconnect from given account\nExample\nimport\n{ useDisconnect, useActiveWallet }\nfrom\n\"thirdweb/react\"\n;\nfunction\nExample\n() {\nconst\n{\ndisconnect\n}\n=\nuseDisconnect\n();\nconst\nwallet\n=\nuseActiveWallet\n();\nreturn\n(\n<\nbutton\nonClick\n=\n{\n()\n=>\ndisconnect\n(wallet)\n}\n>Disconnect</\nbutton\n>\n);\n}\nSignature\nfunction\nuseDisconnect\n()\n:\n{\ndisconnect\n:\n(\nwallet\n:\nWallet\n)\n=>\nvoid\n};\nReturns\nReturn Type\nlet\nreturnType\n:\n{\ndisconnect\n:\n(\nwallet\n:\nWallet\n)\n=>\nvoid\n};\nAn object with a function to disconnect an account"
  },
  {
    "title": "useEstimateGas",
    "content": "useEstimateGas\nA hook to estimate the gas for a given transaction. Example\nimport\n{ useEstimateGas }\nfrom\n\"thirdweb/react\"\n;\nconst\n{\nmutate\n:\nestimateGas\n,\ndata\n:\ngasEstimate\n}\n=\nuseEstimateGas\n();\n// later\nconst\nestimatedGas\n=\nawait\nestimateGas\n(tx);\nSignature\nfunction\nuseEstimateGas\n()\n:\nUseMutationResult\n<\nEstimateGasResult\n,\nError\n,\nPreparedTransaction\n>;\nReturns\nReturn Type\nlet\nreturnType\n:\nUseMutationResult\n<\nEstimateGasResult\n,\nError\n,\nPreparedTransaction\n>;\nA mutation object to estimate gas."
  },
  {
    "title": "useEstimateGasCost",
    "content": "useEstimateGasCost\nA hook to estimate the gas cost in ether and wei for a given transaction. Example\nimport\n{ useEstimateGasCost }\nfrom\n\"thirdweb/react\"\n;\nconst\n{\nmutate\n:\nestimateGasCost\n,\ndata\n:\ngasEstimate\n}\n=\nuseEstimateGas\n();\n// later\nconst\nestimatedGas\n=\nawait\nestimateGasCost\n(tx);\nconsole. log\n(\n\"gas cost in ether\"\n, estimatedGas.ether);\nSignature\nfunction\nuseEstimateGasCost\n()\n:\nUseMutationResult\n<\nEstimateGasCostResult\n,\nError\n,\nPreparedTransaction\n>;\nReturns\nReturn Type\nlet\nreturnType\n:\nUseMutationResult\n<\nEstimateGasCostResult\n,\nError\n,\nPreparedTransaction\n>;\nA mutation object to estimate gas cost."
  },
  {
    "title": "useIsAutoConnecting",
    "content": "useIsAutoConnecting\nA hook to check if the auto connect is in progress. Example\nfunction\nExample\n() {\nconst\nisAutoConnecting\n=\nuseIsAutoConnecting\n();\nreturn\n<\ndiv\n> ... </\ndiv\n>;\n}\nSignature\nfunction\nuseIsAutoConnecting\n()\n:\nboolean\n;\nReturns\nReturn Type\nlet\nreturnType\n:\nboolean\n;\nA boolean indicating if the auto connect is in progress."
  },
  {
    "title": "useNetworkSwitcherModal",
    "content": "useNetworkSwitcherModal\nHook to open the Wallet Network Switcher Modal that shows allows users to switch to different network. Example\nimport\n{ createThirdwebClient }\nfrom\n\"thirdweb\"\n;\nimport\n{ useNetworkSwitcherModal }\nfrom\n\"thirdweb/react\"\n;\nimport\n{ base, ethereum, polygon, sepolia, arbitrum }\nfrom\n\"thirdweb/chains\"\n;\nconst\nclient\n=\ncreateThirdwebClient\n({\nclientId:\n\"<your_client_id>\"\n,\n});\nfunction\nExample\n() {\nconst\nnetworkSwitcher\n=\nuseNetworkSwitcherModal\n();\nfunction\nhandleClick\n() {\nnetworkSwitcher. open\n({\nclient,\ntheme:\n'light'\nsections: [\n{ label:\n'Recently used'\n, chains: [arbitrum, polygon] },\n{ label:\n'Popular'\n, chains: [base, ethereum, sepolia] },\n]\n});\n}\nreturn\n<\nbutton\nonClick\n=\n{\nhandleClick\n}\n> Switch Network </\nbutton\n>\n}\nSignature\nfunction\nuseNetworkSwitcherModal\n()\n:\n{\nclose\n:\n()\n=>\nvoid\n;\nopen\n:\n(\nprops\n:\nUseNetworkSwitcherModalOptions\n)\n=>\nPromise\n<\nvoid\n>;\n};\nReturns\nReturn Type\nlet\nreturnType\n:\n{\nclose\n:\n()\n=>\nvoid\n;\nopen\n:\n(\nprops\n:\nUseNetworkSwitcherModalOptions\n)\n=>\nPromise\n<\nvoid\n>;\n};"
  },
  {
    "title": "useProfiles",
    "content": "useProfiles\nRetrieves all linked profiles for the current wallet. Example\nimport\n{ use }\nfrom\n\"thirdweb/react\"\n;\nconst\n{\ndata\n:\nprofiles\n}\n=\nuseProfiles\n();\nconsole. log\n(\n\"Type:\"\n, profiles[\n0\n].type);\n// \"discord\"\nconsole. log\n(\n\"Email:\"\n, profiles[\n0\n].email);\n// \"\n[email protected]\n\"\nSignature\nfunction\nuseProfiles\n()\n:\nUseQueryResult\n<\nArray\n<\nProfile\n>>;\nReturns\nReturn Type\nlet\nreturnType\n:\nUseQueryResult\n<\nArray\n<\nProfile\n>>;\nA React Query result containing the linked profiles for the connected in-app wallet."
  },
  {
    "title": "useReadContract",
    "content": "Example\nimport\n{ getContract }\nfrom\n\"thirdweb\"\n;\nimport\n{ sepolia }\nfrom\n\"thirdweb/chains\"\n;\nimport\n{ useReadContract }\nfrom\n\"thirdweb/react\"\n;\nconst\ncontract\n=\ngetContract\n({\nclient,\naddress:\n\"0x...\"\n,\nchain: sepolia,\n});\nconst\n{\ndata\n,\nisLoading\n}\n=\nuseReadContract\n({\ncontract,\nmethod:\n\"function tokenURI(uint256 tokenId) returns (string)\"\n});\nparams\n: [\n1\nn\n],\n});\nSignature\nfunction\nuseReadContract\n(\noptions\n:\n{\ncontract\n:\nReadonly\n<\nContractOptions\n<\nabi\n>> }\n&\nOmit\n<\nTransactionRequest\n,\n|\n\"gas\"\n|\n\"value\"\n|\n\"from\"\n|\n\"to\"\n|\n\"accessList\"\n|\n\"data\"\n|\n\"gasPrice\"\n|\n\"maxFeePerGas\"\n|\n\"maxPriorityFeePerGas\"\n|\n\"nonce\"\n>\n&\n{\nfrom\n? :\nstring\n;\nmethod\n:\nmethod\n|\nPreparedMethod\n<\nParseMethod\n<\nabi\n,\nmethod\n>>;\n}\n&\nParamsOption\n<\nParseMethod\n<\nParseMethod\n<\nabi\n,\nmethod\n>>[\n\"inputs\"\n]\n>\n&\nOmit\n<\nPrepareTransactionOptions\n,\n\"client\"\n|\n\"chain\"\n|\n\"to\"\n|\n\"data\"\n>\n&\n{\nqueryOptions\n? :\nnumber\n;\n};\n},\n)\n:\nUseQueryResult\n<\nReadContractResult\n<\nPreparedMethod\n<\nParseMethod\n<\nabi\n,\nmethod\n>>[\n2\n]>\n>;\nParameters\noptions\nThe options for reading from a contract\nType\nlet\noptions\n:\n{\ncontract\n:\nReadonly\n<\nContractOptions\n<\nabi\n>> }\n&\nOmit\n<\nTransactionRequest\n,\n|\n\"gas\"\n|\n\"value\"\n|\n\"from\"\n|\n\"to\"\n|\n\"accessList\"\n|\n\"data\"\n|\n\"gasPrice\"\n|\n\"maxFeePerGas\"\n|\n\"maxPriorityFeePerGas\"\n|\n\"nonce\"\n>\n&\n{\nfrom\n? :\nstring\n;\nmethod\n:\nmethod\n|\nPreparedMethod\n<\nParseMethod\n<\nabi\n,\nmethod\n>>;\n}\n&\nParamsOption\n<\nParseMethod\n<\nParseMethod\n<\nabi\n,\nmethod\n>>[\n\"inputs\"\n]>\n&\nOmit\n<\nPrepareTransactionOptions\n,\n\"client\"\n|\n\"chain\"\n|\n\"to\"\n|\n\"data\"\n>\n&\n{\nqueryOptions\n? import\n{ useReadContract }\nfrom\n\"thirdweb/react\"\n;\nimport\n{ getOwnedNFTs } form\n\"thirdweb/extensions/erc721\"\n;\nconst { data, isLoading } = useReadContract(getOwnedNFTs, { contract, owner: address });\nSignature\nfunction\nuseReadContract\n(\nextension\n:\n(\noptions\n:\nBaseTransactionOptions\n<\nparams\n,\nabi\n>,\n)\n=>\nPromise\n<\nresult\n>,\noptions\n:\n{\ncontract\n:\nReadonly\n<\nContractOptions\n<\nabi\n>> }\n&\nparams\n&\n{\nqueryOptions\n?"
  },
  {
    "title": "useSendAndConfirmTransaction",
    "content": "useSendAndConfirmTransaction\nA hook to send a transaction. Example\nimport\n{ useSendAndConfirmTransaction }\nfrom\n\"thirdweb/react\"\n;\nconst\n{\nmutate\n:\nsendAndConfirmTx\n,\ndata\n:\ntransactionReceipt\n}\n=\nuseSendAndConfirmTransaction\n();\n// later\nsendAndConfirmTx\n(tx);\nGasless usage with\nthirdweb Engine\nimport\n{ useSendAndConfirmTransaction }\nfrom\n\"thirdweb/react\"\n;\nconst\nmutation\n=\nuseSendAndConfirmTransaction\n({\ngasless: {\nprovider:\n\"engine\"\n,\nrelayerUrl:\n\"https://thirdweb.engine-***.thirdweb.com/relayer/***\"\n,\nrelayerForwarderAddress:\n\"0x...\"\n,\n},\n});\nGasless usage with OpenZeppelin\nimport\n{ useSendAndConfirmTransaction }\nfrom\n\"thirdweb/react\"\n;\nconst\nmutation\n=\nuseSendAndConfirmTransaction\n({\ngasless: {\nprovider:\n\"openzeppelin\"\n,\nrelayerUrl:\n\"https://...\"\n,\nrelayerForwarderAddress:\n\"0x...\"\n,\n},\n});\nSignature\nfunction\nuseSendAndConfirmTransaction\n(\nconfig\n:\nSendAndConfirmTransactionConfig\n,\n)\n:\nUseMutationResult\n<\nTransactionReceipt\n,\nError\n,\nPreparedTransaction\n>;\nParameters\nconfig\nType\nlet\nconfig\n:\nSendAndConfirmTransactionConfig\n;\nReturns\nReturn Type\nlet\nreturnType\n:\nUseMutationResult\n<\nTransactionReceipt\n,\nError\n,\nPreparedTransaction\n>;\nA mutation object to send a transaction."
  },
  {
    "title": "useSendBatchTransaction",
    "content": "useSendBatchTransaction\nA hook to send a transaction. Example\nimport\n{ useSendBatchTransaction }\nfrom\n\"thirdweb/react\"\n;\nconst\n{\nmutate\n:\nsendBatch\n,\ndata\n:\ntransactionResult\n}\n=\nuseSendBatchTransaction\n();\n// later\nsendBatch\n([tx1, tx2]);\nSignature\nfunction\nuseSendBatchTransaction\n()\n:\nUseMutationResult\n<\nWaitForReceiptOptions\n,\nError\n,\nArray\n<\nPreparedTransaction\n>\n>;\nReturns\nReturn Type\nlet\nreturnType\n:\nUseMutationResult\n<\nWaitForReceiptOptions\n,\nError\n,\nArray\n<\nPreparedTransaction\n>\n>;\nA mutation object to send a transaction."
  },
  {
    "title": "useSendTransaction",
    "content": "You can send a transaction with a\nprepared contract call\n, a\nprepared transaction\n, or using a write\nExtension\n. Example\nSending a prepared contract call\nimport\n{ useSendTransaction }\nfrom\n\"thirdweb/react\"\n;\nimport\n{ getContract, prepareContractCall }\nfrom\n\"thirdweb\"\n;\nimport\n{ sepolia }\nfrom\n\"thirdweb/chains\"\n;\nconst\ncontract\n=\ngetContract\n({\naddress:\n\"0x...\"\n,\nchain: sepolia,\nclient,\n});\nconst\n{\nmutate\n:\nsendTx\n,\ndata\n:\ntransactionResult\n}\n=\nuseSendTransaction\n();\nconst\nonClick\n=\n()\n=>\n{\nconst\ntransaction\n=\nprepareContractCall\n({\ncontract,\nmethod:\n\"function transfer(address to, uint256 value)\"\n,\nparams: [to, value],\n}),\n});\nsendTx\n(transaction);\n};\nUsing a write extension\nimport\n{ useSendTransaction }\nfrom\n\"thirdweb/react\"\n;\nimport\n{ mintTo }\nfrom\n\"thirdweb/extensions/erc721\"\n;\nconst\n{\nmutate\n:\nsendTx\n,\ndata\n:\ntransactionResult\n}\n=\nuseSendTransaction\n();\nconst\nonClick\n=\n()\n=>\n{\nconst\ntransaction\n=\nmintTo\n({\ncontract,\nto:\n\"0x...\"\n,\nnft: {\nname:\n\"NFT Name\"\n,\ndescription:\n\"NFT Description\"\n,\nimage:\n\"https://example.com/image.png\"\n,\n},\n});\nsendTx\n(transaction);\n};\nSending a prepared transaction\nimport\n{ useSendTransaction }\nfrom\n\"thirdweb/react\"\n;\nimport\n{ getContract, prepareTransaction }\nfrom\n\"thirdweb\"\n;\nimport\n{ sepolia }\nfrom\n\"thirdweb/chains\"\n;\nconst\ncontract\n=\ngetContract\n({\naddress:\n\"0x...\"\n,\nchain: sepolia,\nclient,\n});\nconst\n{\nmutate\n:\nsendTx\n,\ndata\n:\ntransactionResult\n}\n=\nuseSendTransaction\n();\nconst\nonClick\n=\n()\n=>\n{\n// Send 0.1 SepoliaETH to an address\nconst\ntransaction\n=\nprepareTransaction\n({\nto:\n\"0x...\"\n,\nvalue:\ntoWei\n(\n\"0.1\"\n),\nchain: sepolia,\nclient: thirdwebClient,\n});\nsendTx\n(transaction);\n};\nSignature\nfunction\nuseSendTransaction\n(\nconfig\n:\nSendTransactionConfig\n,\n)\n:\nUseMutationResult\n<\n{\nchain\n:\nReadonly\n<\nChainOptions\n&\n{\nrpc\n:\nstring\n}>;\nclient\n:\nThirdwebClient\n;\nmaxBlocksWaitTime\n? :\nnumber\n;\nreadonly\ntransactionHash\n:\n`0x${\nstring\n}`\n;\n},\nError\n,\nPreparedTransaction\n>;\nParameters\nconfig\nConfiguration for the\nuseSendTransaction\nhook. :\nSendTransactionPayModalConfig\n;\n};\nReturns\nReturn Type\nlet\nreturnType\n:\nUseMutationResult\n<\n{\nchain\n:\nReadonly\n<\nChainOptions\n&\n{\nrpc\n:\nstring\n}>;\nclient\n:\nThirdwebClient\n;\nmaxBlocksWaitTime\n? :\nnumber\n;\nreadonly\ntransactionHash\n:\n`0x${\nstring\n}`\n;\n},\nError\n,\nPreparedTransaction\n>;\nA UseMutationResult object to send a transaction."
  },
  {
    "title": "useSetActiveWallet",
    "content": "useSetActiveWallet\nA hook that lets you set the active wallet. Example\nimport\n{ useSetActiveWallet }\nfrom\n\"thirdweb/react\"\n;\nconst\nsetActiveAccount\n=\nuseSetActiveWallet\n();\n// later in your code\nawait\nsetActiveAccount\n(account);\nSignature\nfunction\nuseSetActiveWallet\n()\n:\n(\nactiveWallet\n:\nWallet\n,\n)\n=>\nPromise\n<\nvoid\n>;\nReturns\nReturn Type\nlet\nreturnType\n:\n(\nactiveWallet\n:\nWallet\n)\n=>\nPromise\n<\nvoid\n>;\nA function that lets you set the active wallet."
  },
  {
    "title": "useSimulateTransaction",
    "content": "useSimulateTransaction\nA hook to simulate a transaction. Example\nimport\n{ useSimulateTransaction }\nfrom\n\"thirdweb/react\"\n;\nconst\n{\nmutate\n:\nsimulateTx\n}\n=\nuseSimulateTransaction\n();\n// later\nconst\nresult\n=\nawait\nsimulateTx\n(tx);\nSignature\nfunction\nuseSimulateTransaction\n()\n:\nUseMutationResult\n<\nAwaited\n<\nReturnType\n<\ntypeof\nsimulateTransaction>>,\nError\n,\nSimulateOptions\n<\nabi\n,\nabiFn\n>\n>;\nReturns\nReturn Type\nlet\nreturnType\n:\nUseMutationResult\n<\nAwaited\n<\nReturnType\n<\ntypeof\nsimulateTransaction>>,\nError\n,\nSimulateOptions\n<\nabi\n,\nabiFn\n>\n>;\nA mutation object to simulate a transaction."
  },
  {
    "title": "useSwitchActiveWalletChain",
    "content": "useSwitchActiveWalletChain\nSwitch to blockchain with given chain id in the active wallet. Example\nimport\n{ useSwitchActiveWalletChain }\nfrom\n\"thirdweb/react\"\n;\nimport\n{ sepolia }\nfrom\n\"thirdweb/chains\"\n;\nconst\nswitchChain\n=\nuseSwitchActiveWalletChain\n();\n// later in your code\n<\nbutton\nonClick\n=\n{\n()\n=>\nswitchChain\n(sepolia)\n}\n>Switch Chain</\nbutton\n>;\nSignature\nfunction\nuseSwitchActiveWalletChain\n()\n:\n(\nchain\n:\nReadonly\n<\nChainOptions\n&\n{\nrpc\n:\nstring\n}>,\n)\n=>\nPromise\n<\nvoid\n>;\nReturns\nReturn Type\nlet\nreturnType\n:\n(\nchain\n:\nReadonly\n<\nChainOptions\n&\n{\nrpc\n:\nstring\n}>,\n)\n=>\nPromise\n<\nvoid\n>;\nA function to switch to blockchain with given chain id in the active wallet."
  },
  {
    "title": "useWaitForReceipt",
    "content": "useWaitForReceipt\nA hook to wait for a transaction receipt. Example\nimport\n{ useWaitForReceipt }\nfrom\n\"thirdweb/react\"\n;\nconst\n{\ndata\n:\nreceipt\n,\nisLoading\n}\n=\nuseWaitForReceipt\n({\nclient,\nchain,\ntransactionHash,\n});\nSignature\nfunction\nuseWaitForReceipt\n(\noptions\n:\n|\nundefined\n|\n{\nchain\n:\nReadonly\n<\nChainOptions\n&\n{\nrpc\n:\nstring\n}>;\nclient\n:\nThirdwebClient\n;\nmaxBlocksWaitTime\n? :\nnumber\n;\nreadonly\ntransactionHash\n:\n`0x${\nstring\n}`\n;\n},\n)\n:\nUseQueryResult\n<\nTransactionReceipt\n>;\nParameters\noptions\nThe options for waiting for a transaction receipt. Type\nlet\noptions\n:\n|\nundefined\n|\n{\nchain\n:\nReadonly\n<\nChainOptions\n&\n{\nrpc\n:\nstring\n}>;\nclient\n:\nThirdwebClient\n;\nmaxBlocksWaitTime\n? :\nnumber\n;\nreadonly\ntransactionHash\n:\n`0x${\nstring\n}`\n;\n};\nReturns\nReturn Type\nlet\nreturnType\n:\nUseQueryResult\n<\nTransactionReceipt\n>;\na query object."
  },
  {
    "title": "useWalletBalance",
    "content": "Example\nFetching the native token balance\nimport\n{ useWalletBalance }\nfrom\n\"thirdweb/react\"\n;\nconst\n{\ndata\n,\nisLoading\n,\nisError\n}\n=\nuseWalletBalance\n({\nchain,\naddress,\nclient,\n});\nconsole. log\n(\n\"balance\"\n, data?.displayValue, data?.symbol);\nFetching a specific token balance\nimport\n{ useWalletBalance }\nfrom\n\"thirdweb/react\"\n;\nconst\ntokenAddress\n=\n\"0x...\"\n;\n// the ERC20 token address\nconst\n{\ndata\n,\nisLoading\n,\nisError\n}\n=\nuseWalletBalance\n({\nchain,\naddress,\nclient,\ntokenAddress,\n});\nconsole. log\n(\n\"balance\"\n, data?.displayValue, data?.symbol);\nSignature\nfunction\nuseWalletBalance\n(\noptions\n:\n{\naddress\n:\nundefined\n|\nstring\n;\nchain\n:\nundefined\n|\nReadonly\n<\nChainOptions\n&\n{\nrpc\n:\nstring\n}>;\nclient\n:\nThirdwebClient\n;\ntokenAddress\n? Type\nlet\noptions\n:\n{\naddress\n:\nundefined\n|\nstring\n;\nchain\n:\nundefined\n|\nReadonly\n<\nChainOptions\n&\n{\nrpc\n:\nstring\n}>;\nclient\n:\nThirdwebClient\n;\ntokenAddress\n? :\nstring\n;\n};\nqueryOptions\noptional\nType\nlet\nqueryOptions\n:\nUseWalletBalanceQueryOptions\n;\nReturns\nReturn Type\nlet\nreturnType\n:\nUseQueryResult\n<\nGetWalletBalanceResult\n>;\nGetWalletBalanceResult The result of the query."
  },
  {
    "title": "useWalletDetailsModal",
    "content": "useWalletDetailsModal\nHook to open the Wallet Details Modal that shows various information about the connected wallet and allows users to perform various actions like sending funds, receiving funds, switching networks, Buying tokens, etc. Example\nimport\n{ createThirdwebClient }\nfrom\n\"thirdweb\"\n;\nimport\n{ useWalletDetailsModal }\nfrom\n\"thirdweb/react\"\n;\nconst\nclient\n=\ncreateThirdwebClient\n({\nclientId:\n\"<your_client_id>\"\n,\n});\nfunction\nExample\n() {\nconst\ndetailsModal\n=\nuseWalletDetailsModal\n();\nfunction\nhandleClick\n() {\ndetailsModal. open\n({ client, theme:\n\"light\"\n});\n}\nreturn\n<\nbutton\nonClick\n=\n{\nhandleClick\n}\n> Show Wallet Details </\nbutton\n>;\n}\nSignature\nfunction\nuseWalletDetailsModal\n()\n:\n{\nopen\n:\n(\nprops\n:\nUseWalletDetailsModalOptions\n)\n=>\nvoid\n;\n};\nReturns\nReturn Type\nlet\nreturnType\n:\n{\nopen\n:\n(\nprops\n:\nUseWalletDetailsModalOptions\n)\n=>\nvoid\n;\n};"
  },
  {
    "title": "useWalletImage",
    "content": "useWalletImage\nReturns the wallet icon for the provided wallet id. Example\nimport\n{ useWalletImage }\nfrom\n\"thirdweb/react\"\n;\nconst\n{\ndata\n:\nwalletImage\n}\n=\nuseWalletImage\n(\n\"io.metamask\"\n);\nreturn\n<\nimg\nsrc\n=\n{\nwalletImage\n}\nalt\n=\n\"MetaMask logo\"\n/>;\nSignature\nfunction\nuseWalletImage\n(\nid\n:\nundefined\n|\nWalletId\n,\n)\n:\nUseQueryResult\n<\nstring\n,\nError\n>;\nParameters\nid\nType\nlet\nid\n:\nundefined\n|\nWalletId\n;\nReturns\nReturn Type\nlet\nreturnType\n:\nUseQueryResult\n<\nstring\n,\nError\n>;"
  },
  {
    "title": "useWalletInfo",
    "content": "useWalletInfo\nReturns the wallet info for the provided wallet id. Example\nimport\n{ useWalletInfo }\nfrom\n\"thirdweb/react\"\n;\nconst\n{\ndata\n:\nwalletInfo\n}\n=\nuseWalletInfo\n(\n\"io.metamask\"\n);\nconsole. log\n(\n\"Walelt name\"\n, walletInfo?.name);\nSignature\nfunction\nuseWalletInfo\n(\nid\n:\nundefined\n|\nWalletId\n,\n)\n:\nUseQueryResult\n<\nWalletInfo\n,\nError\n>;\nParameters\nid\nType\nlet\nid\n:\nundefined\n|\nWalletId\n;\nReturns\nReturn Type\nlet\nreturnType\n:\nUseQueryResult\n<\nWalletInfo\n,\nError\n>;"
  },
  {
    "title": "viemAdapter",
    "content": "let\nviemAdapter\n:\n{\ncontract\n:\n{\nfromViem\n:\n(\noptions\n:\nFromViemContractOptions\n<\nTAbi\n>)\n=>\nThirdwebContract\n<\nTAbi\n>;\ntoViem\n:\n{  } };\npublicClient\n:\n{\ntoViem\n:\n(\noptions\n:\nToViemPublicClientOptions\n)\n=>\nPublicClient\n};\nwalletClient\n:\n{\nfromViem\n:\n(\noptions\n:\n{\nwalletClient\n:\n{\naccount\n:\nundefined\n|\n(\nAccount\n);\naddChain\n:\n(\nargs\n:\nAddChainParameters\n)\n=>\nPromise\n<\nvoid\n>;\nbatch\n? :\n(\nparameters\n:\nCcipRequestParameters\n)\n=>\nPromise\n<\n`0x${\n...\n}`\n> });\nchain\n:\nundefined\n|\n(\nChain\n);\ndeployContract\n:\n(\nargs\n:\nDeployContractParameters\n<\nabi\n,\nundefined\n|\n(\nChain\n),\nundefined\n|\n(\nAccount\n),\nchainOverride\n>)\n=>\nPromise\n<\n`0x${\nstring\n}`\n>;\nextend\n:\n(\nfn\n:\n(\nclient\n:\nClient\n<\nTransport\n,\nundefined\n|\n(\nChain\n),\nundefined\n|\n(\nAccount\n),\nWalletRpcSchema\n,\nWalletActions\n<\nundefined\n|\n(\nChain\n),\nundefined\n|\n(\nAccount\n)>>)\n=>\nclient\n)\n=>\nClient\n<\nTransport\n,\nundefined\n|\n(\nChain\n),\nundefined\n|\n(\nAccount\n),\nWalletRpcSchema\n, ({[\nK\nin\nstring\n|\nnumber\n|\nsymbol\n]\n:\nclient\n[\nK\n]})\n&\n(\nWalletActions\n<\nundefined\n|\n(\nChain\n),\nundefined\n|\n(\nAccount\n)>)>;\ngetAddresses\n:\n()\n=>\nPromise\n<\nGetAddressesReturnType\n>;\ngetChainId\n:\n()\n=>\nPromise\n<\nnumber\n>;\ngetPermissions\n:\n()\n=>\nPromise\n<\nGetPermissionsReturnType\n>;\nkey\n:\nstring\n;\nname\n:\nstring\n;\npollingInterval\n:\nnumber\n;\nprepareTransactionRequest\n:\n(\nargs\n:\nPrepareTransactionRequestParameters\n<\nundefined\n|\n(\nChain\n),\nundefined\n|\n(\nAccount\n),\nchainOverride\n,\naccountOverride\n,\nrequest\n>)\n=>\nPromise\n<{[\nK\nin\nstring\n|\nnumber\n|\nsymbol\n]\n:\n(\nUnionRequiredBy\n<..., ...>)\n&\n(\n...\nextends\n... ? ...\n:\n...)[\nK\n]}>;\nrequest\n:\nEIP1193RequestFn\n<\nWalletRpcSchema\n>;\nrequestAddresses\n:\n()\n=>\nPromise\n<\nRequestAddressesReturnType\n>;\nrequestPermissions\n:\n(\nargs\n:\n{\neth_accounts\n:\nRecord\n<\nstring\n,\nany\n> })\n=>\nPromise\n<\nRequestPermissionsReturnType\n>;\nsendRawTransaction\n:\n(\nargs\n:\nSendRawTransactionParameters\n)\n=>\nPromise\n<\n`0x${\nstring\n}`\n>;\nsendTransaction\n:\n(\nargs\n:\nSendTransactionParameters\n<\nundefined\n|\n(\nChain\n),\nundefined\n|\n(\nAccount\n),\nchainOverride\n,\nrequest\n>)\n=>\nPromise\n<\n`0x${\nstring\n}`\n>;\nsignMessage\n:\n(\nargs\n:\nSignMessageParameters\n<\nundefined\n|\n(\nAccount\n)>)\n=>\nPromise\n<\n`0x${\nstring\n}`\n>;\nsignTransaction\n:\n(\nargs\n:\nSignTransactionParameters\n<\nundefined\n|\n(\nChain\n),\nundefined\n|\n(\nAccount\n),\nchainOverride\n>)\n=>\nPromise\n<(\n`0x02${\nstring\n}`\n)\n|\n(\n`0x01${\nstring\n}`\n)\n|\n(\n`0x03${\nstring\n}`\n)\n|\n(\n`0x04${\nstring\n}`\n)\n|\n(\nTransactionSerializedLegacy\n)>;\nsignTypedData\n:\n(\nargs\n:\nSignTypedDataParameters\n<\ntypedData\n,\nprimaryType\n,\nundefined\n|\n(\nAccount\n)>)\n=>\nPromise\n<\n`0x${\nstring\n}`\n>;\nswitchChain\n:\n(\nargs\n:\nSwitchChainParameters\n)\n=>\nPromise\n<\nvoid\n>;\ntransport\n:\n(\nTransportConfig\n<\nstring\n,\nEIP1193RequestFn\n>)\n&\n(\nRecord\n<\nstring\n,\nany\n>);\ntype\n:\nstring\n;\nuid\n:\nstring\n;\nwatchAsset\n:\n(\nargs\n:\nWatchAssetParams\n)\n=>\nPromise\n<\nboolean\n>;\nwriteContract\n:\n(\nargs\n:\nWriteContractParameters\n<\nabi\n,\nfunctionName\n,\nargs\n,\nundefined\n|\n(\nChain\n),\nundefined\n|\n(\nAccount\n),\nchainOverride\n>)\n=>\nPromise\n<\n`0x${\nstring\n}`\n> } })\n=>\nAccount\n;\ntoViem\n:\n(\noptions\n:\nToViemWalletClientOptions\n)\n=>\nWalletClient\n} }\ncontract\nCreates a ThirdwebContract from a Viem contract or the other way around. :\n(\nparameters\n:\nCcipRequestParameters\n)\n=>\nPromise\n<\n`0x${\n...\n}`\n> });\nchain\n:\nundefined\n|\n(\nChain\n);\ndeployContract\n:\n(\nargs\n:\nDeployContractParameters\n<\nabi\n,\nundefined\n|\n(\nChain\n),\nundefined\n|\n(\nAccount\n),\nchainOverride\n>)\n=>\nPromise\n<\n`0x${\nstring\n}`\n>;\nextend\n:\n(\nfn\n:\n(\nclient\n:\nClient\n<\nTransport\n,\nundefined\n|\n(\nChain\n),\nundefined\n|\n(\nAccount\n),\nWalletRpcSchema\n,\nWalletActions\n<\nundefined\n|\n(\nChain\n),\nundefined\n|\n(\nAccount\n)>>)\n=>\nclient\n)\n=>\nClient\n<\nTransport\n,\nundefined\n|\n(\nChain\n),\nundefined\n|\n(\nAccount\n),\nWalletRpcSchema\n, ({[\nK\nin\nstring\n|\nnumber\n|\nsymbol\n]\n:\nclient\n[\nK\n]})\n&\n(\nWalletActions\n<\nundefined\n|\n(\nChain\n),\nundefined\n|\n(\nAccount\n)>)>;\ngetAddresses\n:\n()\n=>\nPromise\n<\nGetAddressesReturnType\n>;\ngetChainId\n:\n()\n=>\nPromise\n<\nnumber\n>;\ngetPermissions\n:\n()\n=>\nPromise\n<\nGetPermissionsReturnType\n>;\nkey\n:\nstring\n;\nname\n:\nstring\n;\npollingInterval\n:\nnumber\n;\nprepareTransactionRequest\n:\n(\nargs\n:\nPrepareTransactionRequestParameters\n<\nundefined\n|\n(\nChain\n),\nundefined\n|\n(\nAccount\n),\nchainOverride\n,\naccountOverride\n,\nrequest\n>)\n=>\nPromise\n<{[\nK\nin\nstring\n|\nnumber\n|\nsymbol\n]\n:\n(\nUnionRequiredBy\n<..., ...>)\n&\n(\n...\nextends\n... ? ...\n:\n...)[\nK\n]}>;\nrequest\n:\nEIP1193RequestFn\n<\nWalletRpcSchema\n>;\nrequestAddresses\n:\n()\n=>\nPromise\n<\nRequestAddressesReturnType\n>;\nrequestPermissions\n:\n(\nargs\n:\n{\neth_accounts\n:\nRecord\n<\nstring\n,\nany\n> })\n=>\nPromise\n<\nRequestPermissionsReturnType\n>;\nsendRawTransaction\n:\n(\nargs\n:\nSendRawTransactionParameters\n)\n=>\nPromise\n<\n`0x${\nstring\n}`\n>;\nsendTransaction\n:\n(\nargs\n:\nSendTransactionParameters\n<\nundefined\n|\n(\nChain\n),\nundefined\n|\n(\nAccount\n),\nchainOverride\n,\nrequest\n>)\n=>\nPromise\n<\n`0x${\nstring\n}`\n>;\nsignMessage\n:\n(\nargs\n:\nSignMessageParameters\n<\nundefined\n|\n(\nAccount\n)>)\n=>\nPromise\n<\n`0x${\nstring\n}`\n>;\nsignTransaction\n:\n(\nargs\n:\nSignTransactionParameters\n<\nundefined\n|\n(\nChain\n),\nundefined\n|\n(\nAccount\n),\nchainOverride\n>)\n=>\nPromise\n<(\n`0x02${\nstring\n}`\n)\n|\n(\n`0x01${\nstring\n}`\n)\n|\n(\n`0x03${\nstring\n}`\n)\n|\n(\n`0x04${\nstring\n}`\n)\n|\n(\nTransactionSerializedLegacy\n)>;\nsignTypedData\n:\n(\nargs\n:\nSignTypedDataParameters\n<\ntypedData\n,\nprimaryType\n,\nundefined\n|\n(\nAccount\n)>)\n=>\nPromise\n<\n`0x${\nstring\n}`\n>;\nswitchChain\n:\n(\nargs\n:\nSwitchChainParameters\n)\n=>\nPromise\n<\nvoid\n>;\ntransport\n:\n(\nTransportConfig\n<\nstring\n,\nEIP1193RequestFn\n>)\n&\n(\nRecord\n<\nstring\n,\nany\n>);\ntype\n:\nstring\n;\nuid\n:\nstring\n;\nwatchAsset\n:\n(\nargs\n:\nWatchAssetParams\n)\n=>\nPromise\n<\nboolean\n>;\nwriteContract\n:\n(\nargs\n:\nWriteContractParameters\n<\nabi\n,\nfunctionName\n,\nargs\n,\nundefined\n|\n(\nChain\n),\nundefined\n|\n(\nAccount\n),\nchainOverride\n>)\n=>\nPromise\n<\n`0x${\nstring\n}`\n> } })\n=>\nAccount\n;\ntoViem\n:\n(\noptions\n:\nToViemWalletClientOptions\n)\n=>\nWalletClient\n}\nExample\ntoViem\nimport\n{ viemAdapter }\nfrom\n\"thirdweb/adapters/viem\"\n;\nconst\nwalletClient\n=\nviemAdapter.walletClient."
  }
]