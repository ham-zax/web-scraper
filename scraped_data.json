[
  {"URL": "https://portal.thirdweb.com/typescript/v5", "content": "TypeScript SDK\nPerformant & lightweight SDK to interact with any EVM chain from Node, React and React Native.\nConnect TypeScript SDK\nConnect TypeScript SDK is open-source. View and contribute to its source code on GitHub.\nView on GitHub\nInstallation\nnpm\nyarn\npnpm\nbun\nnpm\ni\nthirdweb\nHave you generated a client ID?\nYou'll need a client ID to access the SDK's free blockchain APIs, storage, and more.\nGenerate\nQuickstart\nFollow our\nQuickstart\nto get started with the TypeScript SDK.\nGetting Started\nGet started with the TypeScript SDK\nFeatures\nReact and React Native UI Components\n: for wallets connection, transactions and more\nIn-app wallets\n: first-class support for email and social logins\nAccount abstraction\n: first-class support for ERC4337 smart accounts\nType safe contract API\n: fully typed with human readable ABI\nCode generation\n: CLI to generate highly optimized contract, type-safe interfaces\\\nRPC for any EVM chain\n: highly performant RPCs with just a chain id\nIPFS upload/download\n: simple and efficient IPFS integration\nAuto ABI resolution\n: resolve ABIs for any deployed contract with just an address\nEthers / Viem Interoperability\n: adapters for ethers and viem libraries\nDesign principles\nSingle package:\nfor Node, React and React Native with tree shaking for a minimal footprint.\nPerformance optimized:\nfocuses on speed and efficiency with single responsibility principles.\nOut-of-the-box infra:\ndirect access to all the thirdweb infrastructure from wallets to RPCs to IPFS.\nDeveloper experience:\ntype-safe, simple to use, with repeatable and predictable patterns.\nInteroperable:\nworks with any infra provider and with other libraries like viem and ethers.\nGet Started\nClient\nEntry point to the thirdweb SDK. It is required for all other actions.\nChain\nConnect to any EVM chain\nContract\nSmart contract interface for creating transactions and read contract state\nTransactions\nInteract with smart contracts\nAccounts & Wallets\nConnect wallets and work with accounts\nExtensions\nPre-compiled transactions for common actions\nAdapters\nInteroperability with popular libraries\nStorage\nIPFS download and upload\nAuth\nAuthenticate users\nReact\nReact components and hooks\nAPI Reference\nFull SDK Reference\nRequirements\nNode 18.6 or higher\nTypeScript 5.0.4 or higher (for TypeScript users)\nReact 18.0.0 or higher (for React users)"},
  {"URL": "https://portal.thirdweb.com/typescript/v5/account-abstraction/batching-transactions", "content": "Batching transactions\nBatching transactions allows sending multiple transactions in a single user operation. This can be useful to save on fees, reduce number of user confimations or to ensure that multiple transactions are executed atomically.\nA typical example is to do an approval and a transfer in a single userOperation. This way, the transfer will only happen if the approval is successful.\nimport\n{ smartWallet }\nfrom\n\"thirdweb/wallets\"\n;\nimport\n{ sendBatchTransaction }\nfrom\n\"thirdweb\"\n;\nimport\n{ approve, transferFrom }\nfrom\n\"thirdweb/extensions/erc20\"\n;\nconst\nsmartWallet\n=\nnew\nsmartWallet\n(config);\nconst\nsmartAccount\n=\nawait\nsmartWallet.\nconnect\n({\nclient,\npersonalAccount,\n});\nconst\ntransactions\n=\n[\napprove\n({\ncontract,\nspender:\n\"0x...\"\n,\nvalue:\n100\n,\n}),\ntransferFrom\n({\ncontract,\nfrom:\n\"0x...\"\n,\nto:\n\"0x...\"\n,\namount:\n100\n,\n}),\n];\nawait\nsendBatchTransaction\n({\ntransactions,\naccount: smartAccount,\n});"},
  {"URL": "https://portal.thirdweb.com/typescript/v5/account-abstraction/get-started", "content": "Using Account abstraction in Typescript\nBy using the\nwallet SDK\nalongside the\nTypeScript SDK\n, you can use smart accounts in your applications easily.\nExample Use Cases\nThe wallet SDK with the TypeScript SDK is primarily used when creating a backend for your application or when creating a node script.\nIn this guide, we will be using the wallet SDK to create a Node script but the logic for creating a backend is the same.\nIf you are working in a React environment, you are recommended to follow\nthis guide\n.\nCreate an API key\nTo use the bundler and paymaster, you must create an API key and a billing account.\nTo create an API Key:\nHead to the settings page in the dashboard and click the\nAPI Keys\ntab.\nClick on\nCreate API Key\n.\nFollow the steps to create your API key.\nTo use account abstraction infrastructure on mainnet you will also need to\ncreate an account and add a payment method\n.\nCreate a Node Script\nTo use smart accounts in a node script, simply create a new Node.js project and install the\nthirdweb\npackage.\nnpm\ni\nthirdweb\nCreate a\n.env\nfile and add the following:\nTHIRDWEB_SECRET_KEY\n=<\nYOUR_SECRET_KEY\n>\nPRIVATE_KEY\n=<\nA_TEST_WALLET_PRIVATE_KEY\n>\nCreate an\nindex.ts\nfile where we'll write our script.\nCreating the Personal Wallet Key\nThis smart account is unlocked by a 'key' - a personal wallet.\nThis key can be anything from a MetaMask wallet or an In-App Wallet or just a private key and is used as a way to 'sign in' to the smart account.\nTo create a personal wallet key, we are going to use the\nprivateKeyAccount\n, which we need to import from the\nthirdweb/wallets\npackage.\nimport\n{ createThirdwebClient }\nfrom\n\"thirdweb\"\n;\nimport\n{ privateKeyAccount }\nfrom\n\"thirdweb/wallets\"\n;\nconst\nclient\n=\ncreateThirdwebClient\n({\nsecretKey: process.env.\nTHIRDWEB_SECRET_KEY\nas\nstring\n,\n});\nconst\npersonalAccount\n=\nprivateKeyAccount\n({\nclient,\nprivateKey: process.env.\nPRIVATE_KEY\nas\nstring\n,\n});\nconsole.\nlog\n(\n\"Personal account address:\"\n, personalAccount.address);\nCreating the Smart account\nNow, let's create a smart account using the SmartWallet class from the\n@thirdweb-dev/wallets\npackage.\nTo do this, we need to pass a\nSmartWalletConfig\nobject to the constructor. This object contains the following properties:\nchain\n: the chain that the smart account will be deployed on.\nsponsorGas\n: whether the smart account should have sponsored transactions or not.\nOnce we have created the config and instantiated the\nSmartWallet\nclass, we can connect the personal wallet to the smart account using the\nconnect\nmethod.\n// Configure the smart wallet\nconst\nwallet\n=\nsmartWallet\n({\nchain: sepolia,\nsponsorGas:\ntrue\n,\n});\n// Connect the smart wallet\nconst\nsmartAccount\n=\nawait\nwallet.\nconnect\n({\nclient,\npersonalAccount,\n});\nUsing the Smart Account\nNow that we have created a smart account object and connected it, we can use it to perform onchain actions gaslessly.\nIn this example, we will claim a NFT using the\nclaimTo\nmethod and then send the transaction using the\nsendTransaction\nmethod.\nconst\nbalance\n=\nawait\ngetWalletBalance\n({\nclient,\nchain,\naddress: smartAccount.address,\n});\nconsole.\nlog\n(\n\"Smart account balance:\"\n, balance.displayValue);\nconst\ncontract\n=\ngetContract\n({\nclient,\nchain: sepolia,\naddress:\n\"0x...\"\n,\n// deploy a drop contract from thirdweb.com/explore\n});\nconst\ntransaction\n=\nawait\nclaimTo\n({\ncontract,\nto: smartAccount.address,\nquantity:\n1\n,\n});\nconst\n{\ntransactionHash\n}\n=\nawait\nsendTransaction\n({\ntransaction,\nsmartAccount,\n});\nconsole.\nlog\n(\n`Minted NFT with transaction hash: ${\ntransactionHash\n}`\n);\nWe have also passed our\nsecretKey\nto the SDK so that we can use the bundler and paymaster.\nWe have also added some helpful logs to view the smart account address and balance using the associated\nbalance\nand\ngetAddress\nmethods.\nRun the Script\nTo run the script, run the following command:\nbun\nindex.ts\nAs you can see in the terminal output, upon claiming the token, the smart account is deployed. This is because smart account contracts are deployed when the first transaction is initiated.\nWe have successfully deployed a smart account and claimed an ERC20 token!\nConclusion\nIn this guide, we have learned how to use the wallet SDK with the TypeScript SDK to\ncreate a smart account and claim an NFT."},
  {"URL": "https://portal.thirdweb.com/typescript/v5/adapters", "content": "Adapters\nThe thirdweb SDK can work side by side with:\nethers.js v5\nethers.js v6\nviem\nolder versions of the @thirdweb-dev/sdk (using the ethers.js v5 adapter)\nAdapters allow you to use contracts, providers and wallets from these libraries with the thirdweb SDK and vice versa.\nEthers v6\nYou can use an existing ethers.js v6 Signer with the thirdweb SDK by converting it using the\nethers6Adapter\n:\nimport\n{ ethers6Adapter }\nfrom\n\"thirdweb/adapters/ethers6\"\n;\nimport\n{ sendTransaction }\nfrom\n\"thirdweb\"\n;\n// convert a ethers signer\nconst\nsigner\n:\nethers\n.\nSigner\n=\n...\n;\nconst\naccount\n=\nawait\nethers6Adapter.signer.\nfromEthers\n({\nsigner,\n});\n// use it with the thirdweb SDK\nawait\nsendTransaction\n({\ntransaction,\naccount,\n});\nSimilarly, you can use any wallets created with the thirdweb SDK with ethers.js v6 by converting them using the\nethers6Adapter\n:\nimport\n{ ethers6Adapter }\nfrom\n\"thirdweb/adapters/ethers6\"\n;\nimport\n{ createThirdwebClient, inAppWallet }\nfrom\n\"thirdweb/wallets\"\n;\nimport\n{ sepolia }\nfrom\n\"thirdweb/chains\"\n;\nconst\nclient\n=\ncreateThirdwebClient\n({ clientId });\nconst\nwallet\n=\ninAppWallet\n();\nconst\nchain\n=\nsepolia;\nconst\naccount\n=\nawait\nwallet.\nconnect\n({\nclient,\nstrategy:\n\"google\"\n,\n});\n// convert a thirdweb account to ethers signer\nconst\nethersSigner\n=\nawait\nethers6Adapter.signer.\ntoEthers\n({\nclient,\nchain,\naccount,\n});\nYou can also convert ethers.js providers and contracts from and to the thirdweb SDK.\nView the\nethers6Adapter\nreference for more details.\nEthers v5\nYou can use an existing ethers.js v5 Signer with the thirdweb SDK by converting it using the\nethers5Adapter\n:\nimport\n{ ethers5Adapter }\nfrom\n\"thirdweb/adapters/ethers5\"\n;\n// convert an ethers signer to a thirdweb account\nconst\nsigner\n:\nethers\n.\nSigner\n=\n...\n;\nconst\naccount\n=\nawait\nethers5Adapter.signer.\nfromEthers\n({\nsigner,\n});\n// convert a thirdweb account to ethers signer\nconst\nethersSigner\n=\nawait\nethers5Adapter.signer.\ntoEthers\n({\nclient,\nchain,\naccount\n});\nYou can also convert ethers.js providers and contracts from and to the thirdweb SDK.\nView the\nethers5Adapter\nreference for more details.\nviem\nYou can use an existing wallet client from viem with the thirdweb SDK by converting it using the\nviemAdapter\n:\nimport\n{ viemAdapter }\nfrom\n\"thirdweb/adapters/viem\"\n;\n// convert a viem wallet client to a thirdweb account\nconst\nwalletClient\n=\ncreateWalletClient\n(\n...\n);\nconst\naccount\n=\nawait\nviemAdapter.walletClient.\nfromViem\n({\nwalletClient,\n});\n// convert a thirdweb account to viem wallet client\nconst\nviemClientWallet\n=\nviemAdapter.walletClient.\ntoViem\n({\nclient,\nchain,\naccount,\n});\nYou can also convert viem public clients and contracts from and to the thirdweb SDK.\nView the\nviemAdapter\nreference for more details."},
  {"URL": "https://portal.thirdweb.com/typescript/v5/auth", "content": "Auth\nUsing\nEIP-4361\n(Sign in with Ethererum) standard, you can authenticate users to your backend using only their wallet. This is a secure and easy way to authenticate users without requiring them to create an additional account.\nUsage\nClient Functions\nAuth with React\nIf you're using React, Auth integrates directly with our built-in\nConnectButton component\n. This\nhandles things like caching, error handling, and retries for you.\nimport\n{ signLoginPayload }\nfrom\n'thirdweb/auth'\n;\n// 1. fetch a login payload from your server\nconst\nresult\n=\nawait\nfetch\n(\n...\n);\nconst\nloginPayload\n=\nawait\nresult.\njson\n();\n// 2. sign the login payload with the user's account\nconst\nsignature\n=\nawait\nsignLoginPayload\n({ payload: loginPayload, account });\n// 3. send the login payload and signature to your server\nconst\nresult\n=\nawait\nfetch\n(\n...\n);\nconst\nverifiedPayload\n=\nawait\nresult.\njson\n();\nHow you store and maintain a user session is up to you, but our recommended approach is to store a JWT token in a cookie that is verified on the server. The server functions below include utility functions to generate and verify the JWT.\nIn order to generate and verify the JWT you will also need an EOA private key. This private key's wallet does not need to hold any funds, it is only used for signing.\nServer Functions\nimport\n{ createThirdwebClient }\nfrom\n\"thirdweb\"\n;\nimport\n{ createAuth }\nfrom\n\"thirdweb/auth\"\n;\nimport\n{ privateKeyToAccount }\nfrom\n\"thirdweb/wallets\"\n;\nconst\nprivateKey\n=\nprocess.env.\nTHIRDWEB_PRIVATE_KEY\n;\nconst\nthirdwebClient\n=\ncreateThirdwebClient\n({\nsecretKey: process.env.\nTHIRDWEB_SECRET_KEY\n;\n});\nconst\nauth\n=\ncreateAuth\n({\ndomain:\n\"localhost:3000\"\n,\nclient: thirdwebClient,\nadminAccount:\nprivateKeyToAccount\n({client, privateKey})\n});\n// 1. generate a login payload for a client on the server side\nconst\nloginPayload\n=\nawait\nauth.\ngeneratePayload\n({ address:\n\"0x123...\"\n});\n// 2. send the login payload to the client to sign\n// 3. verify the login payload and signature that the client sends back later\nconst\nverifiedPayload\n=\nawait\nauth.\nverifyPayload\n({\npayload: loginPayload,\nsignature:\n\"0x123...\"\n,\n});\n// 4. generate a JWT for the client\nconst\njwt\n=\nawait\nauth.\ngenerateJWT\n({ payload: verifiedPayload });\n// 5. set the JWT as a cookie or otherwise provide it to the client\n// 6. authenticate the client based on the JWT on subsequent calls\nconst\n{\nvalid\n,\nparsedJWT\n}\n=\nawait\nauth.\nverifyJWT\n({ jwt });\nExample Repos\nAuth + Next.js\nA working example of Auth + Next.js\nView on GitHub\nAuth + Express\nA working example of a React + Express app using Auth\nView on GitHub"},
  {"URL": "https://portal.thirdweb.com/typescript/v5/chain", "content": "Chain\nThe thirdweb SDK works with\nany EVM chain\n.\nAll you need to connect a chain is its chain id. RPC connection to the chain is handled for you.\nimport\n{ defineChain }\nfrom\n\"thirdweb\"\n;\nconst\nmyChain\n=\ndefineChain\n(myChainId);\nThe SDK comes with predefined\npopular chains\nlike\nbase\n,\npolygon\n, and more exported from the\nthirdweb/chains\nentrypoint.\nimport\n{ polygon }\nfrom\n\"thirdweb/chains\"\n;\nconst\nmyChain\n=\npolygon;\nConfiguring chains (Advanced)\nYou can also configure chains with custom RPC endpoints, native currency, block explorers, and more.\nconst\nmyChain\n=\ndefineChain\n({\nid: myChainId,\nrpc:\n\"https://my-custom-rpc.com\"\n,\n...\n})"},
  {"URL": "https://portal.thirdweb.com/typescript/v5/client", "content": "Client\nA client is the entry point to the thirdweb SDK. It is required for all other actions.\nClient ID\nYou must provide a\nclientId\nor\nsecretKey\nin order to initialize a client.\nYou can create an client ID for free at\nthirdweb.com/create-api-key\n.\nCreate a client\nFor \"client-side\" usage\nimport\n{ createThirdwebClient }\nfrom\n\"thirdweb\"\n;\nconst\nclient\n=\ncreateThirdwebClient\n({\nclientId:\n\"<your_client_id>\"\n,\n});\nFor \"server-side\" usage\nimport\n{ createThirdwebClient }\nfrom\n\"thirdweb\"\n;\nconst\nclient\n=\ncreateThirdwebClient\n({\nsecretKey:\n\"<your_secret_key>\"\n,\n});\nYou will need to pass this client to other methods in the SDK. This will allow you to\nget performant RPC to all chains\ndownload/upload to IPFS\naccess Account Abstraction infrastructure (bundler, paymaster)\naccess other thirdweb services\nGetting your RPC URL\nIf you need to access the raw RPC URL, just use thirdweb's default RPC format with your client ID\nhttps://<chainId>.rpc.thirdweb.com/<clientId>\n."},
  {"URL": "https://portal.thirdweb.com/typescript/v5/contract", "content": "Contract\nA \"contract\" is a wrapper around a smart contract that is deployed on a chain. It is what you use to create transactions and read contract state.\nimport\n{ getContract }\nfrom\n\"thirdweb\"\n;\nimport\n{ ethereum }\nfrom\n\"thirdweb/chains\"\n;\n// get a contract\nconst\ncontract\n=\ngetContract\n({\n// the client you have created via `createThirdwebClient()`\nclient,\n// the chain the contract is deployed on\nchain: ethereum,\n// the contract's address\naddress:\n\"0x123...\"\n,\n// OPTIONAL: the contract's abi\nabi: [\n...\n],\n});\nContracts defined this way are lightweight and can be exported as consts accross your application to read or write to it."},
  {"URL": "https://portal.thirdweb.com/typescript/v5/createThirdwebClient", "content": "createThirdwebClient\nCreates a Thirdweb client using the provided client ID (client-side) or secret key (server-side).\nGet your client ID and secret key from the Thirdweb dashboard\nhere\n.\n**Never share your secret key with anyone.\nA client is necessary for most functions in the thirdweb SDK. It provides access to thirdweb APIs including built-in RPC, storage, and more.\nExample\nCreate a client on the client side (client ID):\nimport\n{ createThirdwebClient }\nfrom\n\"thirdweb\"\n;\nconst\nclient\n=\ncreateThirdwebClient\n({ clientId:\n\"...\"\n});\nCreate a client on the server (secret key):\nimport\n{ createThirdwebClient }\nfrom\n\"thirdweb\"\n;\nconst\nclient\n=\ncreateThirdwebClient\n({ secretKey:\n\"...\"\n});\nSignature\nfunction\ncreateThirdwebClient\n(\noptions\n:\nCreateThirdwebClientOptions\n,\n)\n:\nThirdwebClient\n;\nParameters\noptions\nThe options for creating the client.\nType\nlet\noptions\n:\nPrettify\n<\n(\n|\n{\nclientId\n:\nstring\n;\nsecretKey\n?:\nnever\n}\n|\n{\nclientId\n?:\nnever\n;\nsecretKey\n:\nstring\n}\n)\n&\nClientOptions\n>;\nReturns\nReturn Type\nlet\nreturnType\n:\n{\nreadonly\nclientId\n:\nstring\n;\nreadonly\nsecretKey\n:\nstring\n|\nundefined\n;\n}\n&\nReadonly\n<\nClientOptions\n>;\nThe created Thirdweb client."},
  {"URL": "https://portal.thirdweb.com/typescript/v5/createWallet", "content": "createWallet\nCreates a wallet based on the provided ID and arguments.\nSupports 350+ wallets\nHandles both injected browser wallets and WalletConnect sessions\nView all available wallets\nExample\nConnecting the wallet\nOnce created, you can connect the wallet to your app by calling the\nconnect\nmethod.\nThe\nconnect\nmethod returns a promise that resolves to the connected account.\nEach wallet type can have different connect options.\nView the different connect options\nConnecting to an injected wallet\nimport\n{ createWallet }\nfrom\n\"thirdweb/wallets\"\n;\nconst\nmetamaskWallet\n=\ncreateWallet\n(\n\"io.metamask\"\n);\nconst\naccount\n=\nawait\nmetamaskWallet.\nconnect\n({\nclient,\n});\nYou can check if a wallet is installed by calling the\ninjectedProvider\nmethod.\nConnecting via WalletConnect modal\nimport\n{ createWallet }\nfrom\n\"thirdweb/wallets\"\n;\nconst\nmetamaskWallet\n=\ncreateWallet\n(\n\"io.metamask\"\n);\nawait\nmetamask.\nconnect\n({\nclient,\nwalletConnect: {\nprojectId:\n\"YOUR_PROJECT_ID\"\n,\nshowQrModal:\ntrue\n,\nappMetadata: {\nname:\n\"My App\"\n,\nurl:\n\"https://my-app.com\"\n,\ndescription:\n\"my app description\"\n,\nlogoUrl:\n\"https://path/to/my-app/logo.svg\"\n,\n},\n},\n});\nView ConnectWallet connection options\nConnecting with coinbase wallet\nimport\n{ createWallet }\nfrom\n\"thirdweb/wallets\"\n;\nconst\ncbWallet\n=\ncreateWallet\n(\n\"com.coinbase.wallet\"\n, {\nappMetadata: {\nname:\n\"My App\"\n,\nurl:\n\"https://my-app.com\"\n,\ndescription:\n\"my app description\"\n,\nlogoUrl:\n\"https://path/to/my-app/logo.svg\"\n,\n},\nwalletConfig: {\n// options: 'all' | 'smartWalletOnly' | 'eoaOnly'\noptions:\n\"all\"\n,\n},\n});\nconst\naccount\n=\nawait\ncbWallet.\nconnect\n({\nclient,\n});\nView Coinbase wallet creation options\nSignature\nfunction\ncreateWallet\n(\n...\nargs\n:\nCreateWalletArgs\n<\nID\n>)\n:\nWallet\n<\nID\n>;\nParameters\nargs\nThe arguments for creating the wallet.\nType\nlet\nargs\n:\nCreateWalletArgs\n<\nID\n>;\nReturns\nReturn Type\nlet\nreturnType\n:\nWallet\n<\nID\n>;\nThe created wallet."},
  {"URL": "https://portal.thirdweb.com/typescript/v5/createWalletAdapter", "content": "createWalletAdapter\nCreates a wallet from the given account.\nYou can use this to:\nconvert a third party library wallet (wagmi, viem, ethers) into a thirdweb wallet.\nconnect with a private key (for automated tests)\nAvailable wallet adatpers:\nViem\nEthers 6\nEthers 5\nExample\nimport\n{ createWalletAdapter }\nfrom\n\"thirdweb\"\n;\nconst\nwallet\n=\ncreateWalletAdapter\n({\nclient,\nadaptedAccount,\nchain,\nonDisconnect\n: ()\n=>\n{\n// disconnect logic\n},\nswitchChain\n:\nasync\n(\nchain\n)\n=>\n{\n// switch chain logic\n},\n});\nSignature\nfunction\ncreateWalletAdapter\n(\noptions\n:\nAdapterWalletOptions\n,\n)\n:\nWallet\n<\n\"adapter\"\n>;\nParameters\noptions\nThe options for the adapter wallet.\nType\nlet\noptions\n:\n{\nadaptedAccount\n:\nAccount\n;\nchain\n:\nChain\n;\nclient\n:\nThirdwebClient\n;\nonDisconnect\n:\n()\n=>\nPromise\n<\nvoid\n>\n|\nvoid\n;\nswitchChain\n:\n(\nchain\n:\nChain\n)\n=>\nPromise\n<\nvoid\n>\n|\nvoid\n;\n};\nReturns\nReturn Type\nlet\nreturnType\n:\nWallet\n<\n\"adapter\"\n>;\na wallet instance."},
  {"URL": "https://portal.thirdweb.com/typescript/v5/defineChain", "content": "defineChain\nDefines a chain with the given options.\nExample\nJust pass the chain ID to connect to:\nconst\nchain\n=\ndefineChain\n(\n1\n);\nOr pass your own RPC or custom values:\nconst\nchain\n=\ndefineChain\n({\nid:\n1\n,\nrpc:\n\"https://my-rpc.com\"\n,\nnativeCurrency: {\nname:\n\"Ether\"\n,\nsymbol:\n\"ETH\"\n,\ndecimals:\n18\n,\n},\n});\nSignature\nfunction\ndefineChain\n(\noptions\n:\nnumber\n|\nChainOptions\n|\nLegacyChain\n|\nChain\n,\n)\n:\nChain\n;\nParameters\noptions\nThe options for the chain.\nType\nlet\noptions\n:\nnumber\n|\nChainOptions\n|\nLegacyChain\n|\nChain\n;\nReturns\nReturn Type\nlet\nreturnType\n:\nReadonly\n<\nChainOptions\n&\n{\nrpc\n:\nstring\n}>;\nThe defined chain."},
  {"URL": "https://portal.thirdweb.com/typescript/v5/detectMethod", "content": "detectMethod\nDetects if the specified method is present in the contract bytecode.\nExample\nimport\n{ detectMethod }\nfrom\n\"thirdweb/utils/extensions/detect.js\"\n;\nconst\nhasDecimals\n=\nawait\ndetectMethod\n({\ncontract,\nmethod:\n\"function decimals() view returns (uint8)\"\n,\n});\nSignature\nfunction\ndetectMethod\n(\noptions\n:\nDetectExtensionOptions\n)\n:\nboolean\n;\nParameters\noptions\nThe options for detecting the extension.\nType\nlet\noptions\n:\nDetectExtensionOptions\n;\nReturns\nReturn Type\nlet\nreturnType\n:\nboolean\n;\nA promise that resolves to a boolean indicating if the extension is detected."},
  {"URL": "https://portal.thirdweb.com/typescript/v5/ecosystemWallet", "content": "ecosystemWallet\nCreates an\nEcosystem Wallet\nbased on various authentication methods.\nAvailable authentication methods:\nEmail\nPhone\nPasskey\nGoogle\nApple\nFacebook\nDiscord\nFarcaster\nCan also be configured to use Account Abstraction to directly connect to a ERC4337 smart account based on those authentication methods.\nRefer to\ninAppWallet\nfor detailed usage examples.\nExample\nConnect to an ecosystem wallet\nimport\n{ ecosystemWallet }\nfrom\n\"thirdweb/wallets\"\n;\nconst\nwallet\n=\necosystemWallet\n(\n\"ecosystem.hooli\"\n);\nconst\naccount\n=\nawait\nwallet.\nconnect\n({\nclient,\nchain,\nstrategy:\n\"google\"\n,\n});\nView all connection options\nConnect to a restricted ecosystem wallet with your designated partner ID\nThe parnter ID will be provided to you by the ecosystem with which you're integrating.\nimport\n{ ecosystemWallet }\nfrom\n\"thirdweb/wallets\"\n;\nconst\nwallet\n=\necosystemWallet\n(\n\"ecosystem.hooli\"\n, {\npartnerId:\n\"...\"\n,\n});\nRefer to\ninAppWallet\nfor more usage examples.\nSignature\nfunction\necosystemWallet\n(\nid\n:\n`ecosystem.${\nstring\n}`\n,\noptions\n:\nEcosystemWalletCreationOptions\n,\n)\n:\nWallet\n<\nEcosystemWalletId\n>;\nParameters\nid\nType\nlet\nid\n:\n`ecosystem.${\nstring\n}`\n;\noptions\nType\nlet\noptions\n:\n{\nauth\n?:\n{\nmode\n?:\n\"popup\"\n|\n\"redirect\"\n|\n\"window\"\n;\nredirectUrl\n?:\nstring\n;\n};\npartnerId\n?:\nstring\n;\n};\nReturns\nReturn Type\nlet\nreturnType\n:\nWallet\n<\nEcosystemWalletId\n>;\nThe created ecosystem wallet."},
  {"URL": "https://portal.thirdweb.com/typescript/v5/encode", "content": "encode\nEncodes a transaction object into a hexadecimal string representation of the encoded data.\nExample\nimport\n{ encode }\nfrom\n\"thirdweb\"\n;\nconst\nencodedData\n=\nawait\nencode\n(transaction);\nSignature\nfunction\nencode\n(\ntransaction\n:\nPreparedTransaction\n<\nabi\n,\nabiFn\n>,\n)\n:\nPromise\n<\nHex\n>;\nParameters\ntransaction\nThe transaction object to encode.\nType\nlet\ntransaction\n:\nPreparedTransaction\n<\nabi\n,\nabiFn\n>;\nReturns\nReturn Type\nlet\nreturnType\n:\n`0x${\nstring\n}`\n;\nA promise that resolves to the encoded data as a hexadecimal string."},
  {"URL": "https://portal.thirdweb.com/typescript/v5/encodeAbiParameters", "content": "encodeAbiParameters\nEncodes the given ABI parameters and values into a hexadecimal string.\nExample\nimport\n{ encodeAbiParameters }\nfrom\n\"viem\"\n;\nconst\nparams\n=\n[\n{ name:\n\"param1\"\n, type:\n\"uint256\"\n},\n{ name:\n\"param2\"\n, type:\n\"string\"\n},\n];\nconst\nvalues\n=\n[\n123\n,\n\"hello\"\n];\nconst\ndata\n=\nencodeAbiParameters\n(params, values);\nconsole.\nlog\n(data);\nSignature\nfunction\nencodeAbiParameters\n(\nparams\n:\nTParams\n,\nvalues\n:\nTParams\nextends\nreadonly\nArray\n<\nAbiParameter\n>\n?\n{[\nkey\nin\nstring\n|\nnumber\n|\nsymbol\n]\n:\n{[\nkey\nin\nstring\n|\nnumber\n|\nsymbol\n]\n:\nAbiParameterToPrimitiveType\n<\nTParams\n<\nTParams\n>[\nkey\n<\nkey\n>],\nAbiParameterKind\n>}[\nkey\n]}\n:\nnever\n)\n:\nHex\nParameters\nparams\nThe ABI parameters.\nType\nlet\nparams\n:\nTParams\n;\nvalues\nThe corresponding values for the ABI parameters.\nType\nlet\nvalues\n:\nTParams\nextends\nreadonly\nArray\n<\nAbiParameter\n>\n?\n{[\nkey\nin\nstring\n|\nnumber\n|\nsymbol\n]\n:\n{[\nkey\nin\nstring\n|\nnumber\n|\nsymbol\n]\n:\nAbiParameterToPrimitiveType\n<\nTParams\n<\nTParams\n>[\nkey\n<\nkey\n>],\nAbiParameterKind\n>}[\nkey\n]}\n:\nnever\nReturns\nReturn Type\nlet\nreturnType\n:\n`0x${\nstring\n}`\n;\nThe encoded ABI parameters as a hexadecimal string."},
  {"URL": "https://portal.thirdweb.com/typescript/v5/estimateGas", "content": "estimateGas\nEstimates the gas required to execute a transaction. The gas is returned as a\nbigint\nand in gwei units.\nExample\nimport\n{ estimateGas }\nfrom\n\"thirdweb\"\n;\nconst\ngas\n=\nawait\nestimateGas\n({\ntransaction,\n});\nSignature\nfunction\nestimateGas\n(\noptions\n:\nEstimateGasOptions\n,\n)\n:\nPromise\n<\nEstimateGasResult\n>;\nParameters\noptions\nThe options for estimating gas.\nType\nlet\noptions\n:\nPrettify\n<\n{\ntransaction\n:\nPreparedTransaction\n<\nany\n> }\n&\n(\n|\n{\naccount\n:\nAccount\n;\nfrom\n?:\nnever\n}\n|\n{\naccount\n?:\nnever\n;\nfrom\n?:\nstring\n}\n)\n>;\nReturns\nReturn Type\nlet\nreturnType\n:\nbigint\n;\nA promise that resolves to the estimated gas as a bigint."},
  {"URL": "https://portal.thirdweb.com/typescript/v5/estimateGasCost", "content": "estimateGasCost\nEstimate the gas cost of a transaction in ether and wei.\nExample\nimport\n{ estimateGasCost }\nfrom\n\"thirdweb\"\n;\nconst\ngasCost\n=\nawait\nestimateGasCost\n({ transaction });\nSignature\nfunction\nestimateGasCost\n(\noptions\n:\nEstimateGasOptions\n,\n)\n:\nPromise\n<\nEstimateGasCostResult\n>;\nParameters\noptions\nType\nlet\noptions\n:\nPrettify\n<\n{\ntransaction\n:\nPreparedTransaction\n<\nany\n> }\n&\n(\n|\n{\naccount\n:\nAccount\n;\nfrom\n?:\nnever\n}\n|\n{\naccount\n?:\nnever\n;\nfrom\n?:\nstring\n}\n)\n>;\nReturns\nReturn Type\nlet\nreturnType\n:\n{\nether\n:\nstring\n;\nwei\n:\nbigint\n};"},
  {"URL": "https://portal.thirdweb.com/typescript/v5/eth_blockNumber", "content": "eth_blockNumber\nRetrieves the current block number from the Ethereum blockchain.\nExample\nimport\n{ getRpcClient, eth_blockNumber }\nfrom\n\"thirdweb/rpc\"\n;\nconst\nrpcRequest\n=\ngetRpcClient\n({ client, chain });\nconst\nblockNumber\n=\nawait\neth_blockNumber\n(rpcRequest);\nSignature\nfunction\neth_blockNumber\n(\nrequest\n:\nEIP1193RequestFn\n<\n[\n{\nMethod\n:\n\"web3_clientVersion\"\n;\nParameters\n?:\nundefined\n;\nReturnType\n:\nstring\n;\n},\n{\nMethod\n:\n\"web3_sha3\"\n;\nParameters\n:\n[\ndata\n:\n`0x${\nstring\n}`\n];\nReturnType\n:\nstring\n;\n},\n{\nMethod\n:\n\"net_listening\"\n;\nParameters\n?:\nundefined\n;\nReturnType\n:\nboolean\n;\n},\n{\nMethod\n:\n\"net_peerCount\"\n;\nParameters\n?:\nundefined\n;\nReturnType\n:\n`0x${\nstring\n}`\n;\n},\n{\nMethod\n:\n\"net_version\"\n;\nParameters\n?:\nundefined\n;\nReturnType\n:\n`0x${\nstring\n}`\n;\n},\n]\n>,\n)\n:\nPromise\n<\nbigint\n>;\nParameters\nrequest\nThe EIP1193 request function.\nType\nlet\nrequest\n:\nEIP1193RequestFn\n<\n[\n{\nMethod\n:\n\"web3_clientVersion\"\n;\nParameters\n?:\nundefined\n;\nReturnType\n:\nstring\n;\n},\n{\nMethod\n:\n\"web3_sha3\"\n;\nParameters\n:\n[\ndata\n:\n`0x${\nstring\n}`\n];\nReturnType\n:\nstring\n;\n},\n{\nMethod\n:\n\"net_listening\"\n;\nParameters\n?:\nundefined\n;\nReturnType\n:\nboolean\n;\n},\n{\nMethod\n:\n\"net_peerCount\"\n;\nParameters\n?:\nundefined\n;\nReturnType\n:\n`0x${\nstring\n}`\n;\n},\n{\nMethod\n:\n\"net_version\"\n;\nParameters\n?:\nundefined\n;\nReturnType\n:\n`0x${\nstring\n}`\n;\n},\n]\n>;\nReturns\nReturn Type\nlet\nreturnType\n:\nPromise\n<\nbigint\n>;\nA promise that resolves to the current block number as a bigint."},
  {"URL": "https://portal.thirdweb.com/typescript/v5/eth_call", "content": "eth_call\nExecutes a call or a transaction on the Ethereum network.\nExample\nimport\n{ getRpcClient, eth_call }\nfrom\n\"thirdweb/rpc\"\n;\nconst\nrpcRequest\n=\ngetRpcClient\n({ client, chain });\nconst\nresult\n=\nawait\neth_call\n(rpcRequest, {\nto:\n\"0x...\"\n,\n...\n});\nSignature\nfunction\neth_call\n(\nrequest\n:\nEIP1193RequestFn\n<\n[\n{\nMethod\n:\n\"web3_clientVersion\"\n;\nParameters\n?:\nundefined\n;\nReturnType\n:\nstring\n;\n},\n{\nMethod\n:\n\"web3_sha3\"\n;\nParameters\n:\n[\ndata\n:\n`0x${\nstring\n}`\n];\nReturnType\n:\nstring\n;\n},\n{\nMethod\n:\n\"net_listening\"\n;\nParameters\n?:\nundefined\n;\nReturnType\n:\nboolean\n;\n},\n{\nMethod\n:\n\"net_peerCount\"\n;\nParameters\n?:\nundefined\n;\nReturnType\n:\n`0x${\nstring\n}`\n;\n},\n{\nMethod\n:\n\"net_version\"\n;\nParameters\n?:\nundefined\n;\nReturnType\n:\n`0x${\nstring\n}`\n;\n},\n]\n>,\nparams\n:\nPartial\n<\nRpcTransactionRequest\n>\n&\n{\nblockNumber\n?:\nnumber\n|\nbigint\n;\nblockTag\n?:\nBlockTag\n|\nundefined\n;\nstateOverrides\n?:\nStateOverride\n;\n},\n)\n:\nPromise\n<\nHex\n>;\nParameters\nrequest\nThe EIP1193 request function.\nType\nlet\nrequest\n:\nEIP1193RequestFn\n<\n[\n{\nMethod\n:\n\"web3_clientVersion\"\n;\nParameters\n?:\nundefined\n;\nReturnType\n:\nstring\n;\n},\n{\nMethod\n:\n\"web3_sha3\"\n;\nParameters\n:\n[\ndata\n:\n`0x${\nstring\n}`\n];\nReturnType\n:\nstring\n;\n},\n{\nMethod\n:\n\"net_listening\"\n;\nParameters\n?:\nundefined\n;\nReturnType\n:\nboolean\n;\n},\n{\nMethod\n:\n\"net_peerCount\"\n;\nParameters\n?:\nundefined\n;\nReturnType\n:\n`0x${\nstring\n}`\n;\n},\n{\nMethod\n:\n\"net_version\"\n;\nParameters\n?:\nundefined\n;\nReturnType\n:\n`0x${\nstring\n}`\n;\n},\n]\n>;\nparams\nThe parameters for the call or transaction.\nType\nlet\nparams\n:\nPartial\n<\nRpcTransactionRequest\n>\n&\n{\nblockNumber\n?:\nnumber\n|\nbigint\n;\nblockTag\n?:\nBlockTag\n|\nundefined\n;\nstateOverrides\n?:\nStateOverride\n;\n};\nReturns\nReturn Type\nlet\nreturnType\n:\n`0x${\nstring\n}`\n;\nA promise that resolves to the result of the call or transaction."},
  {"URL": "https://portal.thirdweb.com/typescript/v5/eth_estimateGas", "content": "eth_estimateGas\nEstimates the gas required to execute a transaction on the Ethereum network.\nExample\nimport\n{ getRpcClient, eth_estimateGas }\nfrom\n\"thirdweb/rpc\"\n;\nconst\nrpcRequest\n=\ngetRpcClient\n({ client, chain });\nconst\ngas\n=\nawait\neth_estimateGas\n(rpcRequest, {\nto:\n\"0x...\"\n,\n...\n});\nSignature\nfunction\neth_estimateGas\n(\nrequest\n:\nEIP1193RequestFn\n<\n[\n{\nMethod\n:\n\"web3_clientVersion\"\n;\nParameters\n?:\nundefined\n;\nReturnType\n:\nstring\n;\n},\n{\nMethod\n:\n\"web3_sha3\"\n;\nParameters\n:\n[\ndata\n:\n`0x${\nstring\n}`\n];\nReturnType\n:\nstring\n;\n},\n{\nMethod\n:\n\"net_listening\"\n;\nParameters\n?:\nundefined\n;\nReturnType\n:\nboolean\n;\n},\n{\nMethod\n:\n\"net_peerCount\"\n;\nParameters\n?:\nundefined\n;\nReturnType\n:\n`0x${\nstring\n}`\n;\n},\n{\nMethod\n:\n\"net_version\"\n;\nParameters\n?:\nundefined\n;\nReturnType\n:\n`0x${\nstring\n}`\n;\n},\n]\n>,\ntransactionRequest\n:\nRpcTransactionRequest\n,\n)\n:\nPromise\n<\nbigint\n>;\nParameters\nrequest\nThe EIP1193 request function.\nType\nlet\nrequest\n:\nEIP1193RequestFn\n<\n[\n{\nMethod\n:\n\"web3_clientVersion\"\n;\nParameters\n?:\nundefined\n;\nReturnType\n:\nstring\n;\n},\n{\nMethod\n:\n\"web3_sha3\"\n;\nParameters\n:\n[\ndata\n:\n`0x${\nstring\n}`\n];\nReturnType\n:\nstring\n;\n},\n{\nMethod\n:\n\"net_listening\"\n;\nParameters\n?:\nundefined\n;\nReturnType\n:\nboolean\n;\n},\n{\nMethod\n:\n\"net_peerCount\"\n;\nParameters\n?:\nundefined\n;\nReturnType\n:\n`0x${\nstring\n}`\n;\n},\n{\nMethod\n:\n\"net_version\"\n;\nParameters\n?:\nundefined\n;\nReturnType\n:\n`0x${\nstring\n}`\n;\n},\n]\n>;\ntransactionRequest\nThe transaction request object.\nType\nlet\ntransactionRequest\n:\nRpcTransactionRequest\n;\nReturns\nReturn Type\nlet\nreturnType\n:\nPromise\n<\nbigint\n>;\nA promise that resolves to the estimated gas as a bigint."},
  {"URL": "https://portal.thirdweb.com/typescript/v5/eth_gasPrice", "content": "eth_gasPrice\nRetrieves the current gas price from the Ethereum network.\nExample\nimport\n{ getRpcClient, eth_gasPrice }\nfrom\n\"thirdweb/rpc\"\n;\nconst\nrpcRequest\n=\ngetRpcClient\n({ client, chain });\nconst\ngasPrice\n=\nawait\neth_gasPrice\n(rpcRequest);\nSignature\nfunction\neth_gasPrice\n(\nrequest\n:\nEIP1193RequestFn\n<\n[\n{\nMethod\n:\n\"web3_clientVersion\"\n;\nParameters\n?:\nundefined\n;\nReturnType\n:\nstring\n;\n},\n{\nMethod\n:\n\"web3_sha3\"\n;\nParameters\n:\n[\ndata\n:\n`0x${\nstring\n}`\n];\nReturnType\n:\nstring\n;\n},\n{\nMethod\n:\n\"net_listening\"\n;\nParameters\n?:\nundefined\n;\nReturnType\n:\nboolean\n;\n},\n{\nMethod\n:\n\"net_peerCount\"\n;\nParameters\n?:\nundefined\n;\nReturnType\n:\n`0x${\nstring\n}`\n;\n},\n{\nMethod\n:\n\"net_version\"\n;\nParameters\n?:\nundefined\n;\nReturnType\n:\n`0x${\nstring\n}`\n;\n},\n]\n>,\n)\n:\nPromise\n<\nbigint\n>;\nParameters\nrequest\nThe EIP1193 request function.\nType\nlet\nrequest\n:\nEIP1193RequestFn\n<\n[\n{\nMethod\n:\n\"web3_clientVersion\"\n;\nParameters\n?:\nundefined\n;\nReturnType\n:\nstring\n;\n},\n{\nMethod\n:\n\"web3_sha3\"\n;\nParameters\n:\n[\ndata\n:\n`0x${\nstring\n}`\n];\nReturnType\n:\nstring\n;\n},\n{\nMethod\n:\n\"net_listening\"\n;\nParameters\n?:\nundefined\n;\nReturnType\n:\nboolean\n;\n},\n{\nMethod\n:\n\"net_peerCount\"\n;\nParameters\n?:\nundefined\n;\nReturnType\n:\n`0x${\nstring\n}`\n;\n},\n{\nMethod\n:\n\"net_version\"\n;\nParameters\n?:\nundefined\n;\nReturnType\n:\n`0x${\nstring\n}`\n;\n},\n]\n>;\nReturns\nReturn Type\nlet\nreturnType\n:\nPromise\n<\nbigint\n>;\nA promise that resolves to the gas price as a bigint."},
  {"URL": "https://portal.thirdweb.com/typescript/v5/eth_getBalance", "content": "eth_getBalance\nRetrieves the balance of the specified Ethereum address.\nExample\nimport\n{ getRpcClient, eth_getBalance }\nfrom\n\"thirdweb/rpc\"\n;\nconst\nrpcRequest\n=\ngetRpcClient\n({ client, chain });\nconst\nbalance\n=\nawait\neth_getBalance\n(rpcRequest, {\naddress:\n\"0x...\"\n,\n});\nSignature\nfunction\neth_getBalance\n(\nrequest\n:\nEIP1193RequestFn\n<\n[\n{\nMethod\n:\n\"web3_clientVersion\"\n;\nParameters\n?:\nundefined\n;\nReturnType\n:\nstring\n;\n},\n{\nMethod\n:\n\"web3_sha3\"\n;\nParameters\n:\n[\ndata\n:\n`0x${\nstring\n}`\n];\nReturnType\n:\nstring\n;\n},\n{\nMethod\n:\n\"net_listening\"\n;\nParameters\n?:\nundefined\n;\nReturnType\n:\nboolean\n;\n},\n{\nMethod\n:\n\"net_peerCount\"\n;\nParameters\n?:\nundefined\n;\nReturnType\n:\n`0x${\nstring\n}`\n;\n},\n{\nMethod\n:\n\"net_version\"\n;\nParameters\n?:\nundefined\n;\nReturnType\n:\n`0x${\nstring\n}`\n;\n},\n]\n>,\nparams\n:\nGetBalanceParams\n,\n)\n:\nPromise\n<\nbigint\n>;\nParameters\nrequest\nThe EIP1193 request function.\nType\nlet\nrequest\n:\nEIP1193RequestFn\n<\n[\n{\nMethod\n:\n\"web3_clientVersion\"\n;\nParameters\n?:\nundefined\n;\nReturnType\n:\nstring\n;\n},\n{\nMethod\n:\n\"web3_sha3\"\n;\nParameters\n:\n[\ndata\n:\n`0x${\nstring\n}`\n];\nReturnType\n:\nstring\n;\n},\n{\nMethod\n:\n\"net_listening\"\n;\nParameters\n?:\nundefined\n;\nReturnType\n:\nboolean\n;\n},\n{\nMethod\n:\n\"net_peerCount\"\n;\nParameters\n?:\nundefined\n;\nReturnType\n:\n`0x${\nstring\n}`\n;\n},\n{\nMethod\n:\n\"net_version\"\n;\nParameters\n?:\nundefined\n;\nReturnType\n:\n`0x${\nstring\n}`\n;\n},\n]\n>;\nparams\nThe parameters for retrieving the balance.\nType\nlet\nparams\n:\n{\naddress\n:\nstring\n};\nReturns\nReturn Type\nlet\nreturnType\n:\nPromise\n<\nbigint\n>;\nA promise that resolves to the balance of the address in wei as bigint."},
  {"URL": "https://portal.thirdweb.com/typescript/v5/eth_getBlockByHash", "content": "eth_getBlockByHash\nRetrieves a block by its hash.\nExample\nimport\n{ getRpcClient, eth_getBlockByHash }\nfrom\n\"thirdweb/rpc\"\n;\nconst\nrpcRequest\n=\ngetRpcClient\n({ client, chain });\nconst\nblock\n=\nawait\neth_getBlockByHash\n(rpcRequest, {\nblockHash:\n\"0x...\"\n,\nincludeTransactions:\ntrue\n,\n});\nSignature\nfunction\neth_getBlockByHash\n(\nrequest\n:\nEIP1193RequestFn\n<\n[\n{\nMethod\n:\n\"web3_clientVersion\"\n;\nParameters\n?:\nundefined\n;\nReturnType\n:\nstring\n;\n},\n{\nMethod\n:\n\"web3_sha3\"\n;\nParameters\n:\n[\ndata\n:\n`0x${\nstring\n}`\n];\nReturnType\n:\nstring\n;\n},\n{\nMethod\n:\n\"net_listening\"\n;\nParameters\n?:\nundefined\n;\nReturnType\n:\nboolean\n;\n},\n{\nMethod\n:\n\"net_peerCount\"\n;\nParameters\n?:\nundefined\n;\nReturnType\n:\n`0x${\nstring\n}`\n;\n},\n{\nMethod\n:\n\"net_version\"\n;\nParameters\n?:\nundefined\n;\nReturnType\n:\n`0x${\nstring\n}`\n;\n},\n]\n>,\nparams\n:\nGetBlockByHashParams\n<\nTIncludeTransactions\n>,\n)\n:\nPromise\n<\nGetBlockReturnType\n<\nundefined\n,\nTIncludeTransactions\n>>;\nParameters\nrequest\nThe EIP1193 request function.\nType\nlet\nrequest\n:\nEIP1193RequestFn\n<\n[\n{\nMethod\n:\n\"web3_clientVersion\"\n;\nParameters\n?:\nundefined\n;\nReturnType\n:\nstring\n;\n},\n{\nMethod\n:\n\"web3_sha3\"\n;\nParameters\n:\n[\ndata\n:\n`0x${\nstring\n}`\n];\nReturnType\n:\nstring\n;\n},\n{\nMethod\n:\n\"net_listening\"\n;\nParameters\n?:\nundefined\n;\nReturnType\n:\nboolean\n;\n},\n{\nMethod\n:\n\"net_peerCount\"\n;\nParameters\n?:\nundefined\n;\nReturnType\n:\n`0x${\nstring\n}`\n;\n},\n{\nMethod\n:\n\"net_version\"\n;\nParameters\n?:\nundefined\n;\nReturnType\n:\n`0x${\nstring\n}`\n;\n},\n]\n>;\nparams\nThe parameters for the block retrieval.\nType\nlet\nparams\n:\nGetBlockByHashParams\n<\nTIncludeTransactions\n>;\nReturns\nReturn Type\nlet\nreturnType\n:\nPromise\n<\nGetBlockReturnType\n<\nundefined\n,\nTIncludeTransactions\n>\n>;\nA promise that resolves to the retrieved block."},
  {"URL": "https://portal.thirdweb.com/typescript/v5/eth_getBlockByNumber", "content": "eth_getBlockByNumber\nRetrieves a block by its number or tag from the Ethereum blockchain.\nExample\nimport\n{ getRpcClient, eth_getBlockByNumber }\nfrom\n\"thirdweb/rpc\"\n;\nconst\nrpcRequest\n=\ngetRpcClient\n({ client, chain });\nconst\nblock\n=\nawait\neth_getBlockByNumber\n(rpcRequest, {\nblockNumber:\n123456\n,\nincludeTransactions:\ntrue\n,\n});\nSignature\nfunction\neth_getBlockByNumber\n(\nrequest\n:\nEIP1193RequestFn\n<\n[\n{\nMethod\n:\n\"web3_clientVersion\"\n;\nParameters\n?:\nundefined\n;\nReturnType\n:\nstring\n;\n},\n{\nMethod\n:\n\"web3_sha3\"\n;\nParameters\n:\n[\ndata\n:\n`0x${\nstring\n}`\n];\nReturnType\n:\nstring\n;\n},\n{\nMethod\n:\n\"net_listening\"\n;\nParameters\n?:\nundefined\n;\nReturnType\n:\nboolean\n;\n},\n{\nMethod\n:\n\"net_peerCount\"\n;\nParameters\n?:\nundefined\n;\nReturnType\n:\n`0x${\nstring\n}`\n;\n},\n{\nMethod\n:\n\"net_version\"\n;\nParameters\n?:\nundefined\n;\nReturnType\n:\n`0x${\nstring\n}`\n;\n},\n]\n>,\nparams\n:\nGetBlockParameters\n<\nTIncludeTransactions\n,\nTBlockTag\n>,\n)\n:\nPromise\n<\nGetBlockReturnType\n<\nundefined\n,\nTIncludeTransactions\n,\nTBlockTag\n>\n>;\nParameters\nrequest\nThe EIP1193 request function.\nType\nlet\nrequest\n:\nEIP1193RequestFn\n<\n[\n{\nMethod\n:\n\"web3_clientVersion\"\n;\nParameters\n?:\nundefined\n;\nReturnType\n:\nstring\n;\n},\n{\nMethod\n:\n\"web3_sha3\"\n;\nParameters\n:\n[\ndata\n:\n`0x${\nstring\n}`\n];\nReturnType\n:\nstring\n;\n},\n{\nMethod\n:\n\"net_listening\"\n;\nParameters\n?:\nundefined\n;\nReturnType\n:\nboolean\n;\n},\n{\nMethod\n:\n\"net_peerCount\"\n;\nParameters\n?:\nundefined\n;\nReturnType\n:\n`0x${\nstring\n}`\n;\n},\n{\nMethod\n:\n\"net_version\"\n;\nParameters\n?:\nundefined\n;\nReturnType\n:\n`0x${\nstring\n}`\n;\n},\n]\n>;\nparams\nThe parameters for retrieving the block.\nType\nlet\nparams\n:\nGetBlockParameters\n<\nTIncludeTransactions\n,\nTBlockTag\n>;\nReturns\nReturn Type\nlet\nreturnType\n:\nPromise\n<\nGetBlockReturnType\n<\nundefined\n,\nTIncludeTransactions\n,\nTBlockTag\n>\n>;\nA promise that resolves to the requested block."},
  {"URL": "https://portal.thirdweb.com/typescript/v5/eth_getCode", "content": "eth_getCode\nRetrieves the bytecode of a smart contract at the specified address.\nExample\nimport\n{ getRpcClient, eth_getCode }\nfrom\n\"thirdweb/rpc\"\n;\nconst\nrpcRequest\n=\ngetRpcClient\n({ client, chain });\nconst\nbytecode\n=\nawait\neth_getCode\n(rpcRequest, {\naddress:\n\"0x...\"\n,\n});\nSignature\nfunction\neth_getCode\n(\nrequest\n:\nEIP1193RequestFn\n<\n[\n{\nMethod\n:\n\"web3_clientVersion\"\n;\nParameters\n?:\nundefined\n;\nReturnType\n:\nstring\n;\n},\n{\nMethod\n:\n\"web3_sha3\"\n;\nParameters\n:\n[\ndata\n:\n`0x${\nstring\n}`\n];\nReturnType\n:\nstring\n;\n},\n{\nMethod\n:\n\"net_listening\"\n;\nParameters\n?:\nundefined\n;\nReturnType\n:\nboolean\n;\n},\n{\nMethod\n:\n\"net_peerCount\"\n;\nParameters\n?:\nundefined\n;\nReturnType\n:\n`0x${\nstring\n}`\n;\n},\n{\nMethod\n:\n\"net_version\"\n;\nParameters\n?:\nundefined\n;\nReturnType\n:\n`0x${\nstring\n}`\n;\n},\n]\n>,\nparams\n:\nGetCodeParams\n,\n)\n:\nPromise\n<\nHex\n>;\nParameters\nrequest\nThe EIP1193 request function.\nType\nlet\nrequest\n:\nEIP1193RequestFn\n<\n[\n{\nMethod\n:\n\"web3_clientVersion\"\n;\nParameters\n?:\nundefined\n;\nReturnType\n:\nstring\n;\n},\n{\nMethod\n:\n\"web3_sha3\"\n;\nParameters\n:\n[\ndata\n:\n`0x${\nstring\n}`\n];\nReturnType\n:\nstring\n;\n},\n{\nMethod\n:\n\"net_listening\"\n;\nParameters\n?:\nundefined\n;\nReturnType\n:\nboolean\n;\n},\n{\nMethod\n:\n\"net_peerCount\"\n;\nParameters\n?:\nundefined\n;\nReturnType\n:\n`0x${\nstring\n}`\n;\n},\n{\nMethod\n:\n\"net_version\"\n;\nParameters\n?:\nundefined\n;\nReturnType\n:\n`0x${\nstring\n}`\n;\n},\n]\n>;\nparams\nThe parameters for the eth_getCode method.\nType\nlet\nparams\n:\nGetCodeParams\n;\nReturns\nReturn Type\nlet\nreturnType\n:\n`0x${\nstring\n}`\n;\nA promise that resolves to the bytecode of the smart contract."},
  {"URL": "https://portal.thirdweb.com/typescript/v5/eth_getLogs", "content": "eth_getLogs\nRetrieves logs from the Ethereum blockchain based on the specified parameters.\nExample\nimport\n{ getRpcClient, eth_getLogs }\nfrom\n\"thirdweb/rpc\"\n;\nconst\nrpcRequest\n=\ngetRpcClient\n({ client, chain });\nconst\nlogs\n=\nawait\neth_getLogs\n(rpcRequest, {\naddress:\n\"0x...\"\n,\nfromBlock:\n123456\nn\n,\ntoBlock:\n123456\nn\n,\n});\nSignature\nfunction\neth_getLogs\n(\nrequest\n:\nEIP1193RequestFn\n<\n[\n{\nMethod\n:\n\"web3_clientVersion\"\n;\nParameters\n?:\nundefined\n;\nReturnType\n:\nstring\n;\n},\n{\nMethod\n:\n\"web3_sha3\"\n;\nParameters\n:\n[\ndata\n:\n`0x${\nstring\n}`\n];\nReturnType\n:\nstring\n;\n},\n{\nMethod\n:\n\"net_listening\"\n;\nParameters\n?:\nundefined\n;\nReturnType\n:\nboolean\n;\n},\n{\nMethod\n:\n\"net_peerCount\"\n;\nParameters\n?:\nundefined\n;\nReturnType\n:\n`0x${\nstring\n}`\n;\n},\n{\nMethod\n:\n\"net_version\"\n;\nParameters\n?:\nundefined\n;\nReturnType\n:\n`0x${\nstring\n}`\n;\n},\n]\n>,\nparams\n:\nGetLogsParams\n,\n)\n:\nPromise\n<\nArray\n<\nLog\n>>;\nParameters\nrequest\nThe EIP1193 request function.\nType\nlet\nrequest\n:\nEIP1193RequestFn\n<\n[\n{\nMethod\n:\n\"web3_clientVersion\"\n;\nParameters\n?:\nundefined\n;\nReturnType\n:\nstring\n;\n},\n{\nMethod\n:\n\"web3_sha3\"\n;\nParameters\n:\n[\ndata\n:\n`0x${\nstring\n}`\n];\nReturnType\n:\nstring\n;\n},\n{\nMethod\n:\n\"net_listening\"\n;\nParameters\n?:\nundefined\n;\nReturnType\n:\nboolean\n;\n},\n{\nMethod\n:\n\"net_peerCount\"\n;\nParameters\n?:\nundefined\n;\nReturnType\n:\n`0x${\nstring\n}`\n;\n},\n{\nMethod\n:\n\"net_version\"\n;\nParameters\n?:\nundefined\n;\nReturnType\n:\n`0x${\nstring\n}`\n;\n},\n]\n>;\nparams\nThe parameters for retrieving logs.\nType\nlet\nparams\n:\nGetLogsParams\n;\nReturns\nReturn Type\nlet\nreturnType\n:\nPromise\n<\nArray\n<\nLog\n>>;\nA promise that resolves to the retrieved logs."},
  {"URL": "https://portal.thirdweb.com/typescript/v5/eth_getStorageAt", "content": "eth_getStorageAt\nRetrieves the value stored at a specific position in the storage of a contract.\nExample\nimport\n{ getRpcClient, eth_getStorageAt }\nfrom\n\"thirdweb/rpc\"\n;\nconst\nrpcRequest\n=\ngetRpcClient\n({ client, chain });\nconst\nstorageValue\n=\nawait\neth_getStorageAt\n(rpcRequest, {\naddress:\n\"0x...\"\n,\nposition:\n0\nn\n,\n});\nSignature\nfunction\neth_getStorageAt\n(\nrequest\n:\nEIP1193RequestFn\n<\n[\n{\nMethod\n:\n\"web3_clientVersion\"\n;\nParameters\n?:\nundefined\n;\nReturnType\n:\nstring\n;\n},\n{\nMethod\n:\n\"web3_sha3\"\n;\nParameters\n:\n[\ndata\n:\n`0x${\nstring\n}`\n];\nReturnType\n:\nstring\n;\n},\n{\nMethod\n:\n\"net_listening\"\n;\nParameters\n?:\nundefined\n;\nReturnType\n:\nboolean\n;\n},\n{\nMethod\n:\n\"net_peerCount\"\n;\nParameters\n?:\nundefined\n;\nReturnType\n:\n`0x${\nstring\n}`\n;\n},\n{\nMethod\n:\n\"net_version\"\n;\nParameters\n?:\nundefined\n;\nReturnType\n:\n`0x${\nstring\n}`\n;\n},\n]\n>,\nparams\n:\nGetStorageAtParams\n,\n)\n:\nPromise\n<\nHex\n>;\nParameters\nrequest\nThe EIP1193 request function.\nType\nlet\nrequest\n:\nEIP1193RequestFn\n<\n[\n{\nMethod\n:\n\"web3_clientVersion\"\n;\nParameters\n?:\nundefined\n;\nReturnType\n:\nstring\n;\n},\n{\nMethod\n:\n\"web3_sha3\"\n;\nParameters\n:\n[\ndata\n:\n`0x${\nstring\n}`\n];\nReturnType\n:\nstring\n;\n},\n{\nMethod\n:\n\"net_listening\"\n;\nParameters\n?:\nundefined\n;\nReturnType\n:\nboolean\n;\n},\n{\nMethod\n:\n\"net_peerCount\"\n;\nParameters\n?:\nundefined\n;\nReturnType\n:\n`0x${\nstring\n}`\n;\n},\n{\nMethod\n:\n\"net_version\"\n;\nParameters\n?:\nundefined\n;\nReturnType\n:\n`0x${\nstring\n}`\n;\n},\n]\n>;\nparams\nThe parameters for the eth_getStorageAt method.\nType\nlet\nparams\n:\nGetStorageAtParams\n;\nReturns\nReturn Type\nlet\nreturnType\n:\n`0x${\nstring\n}`\n;\nA promise that resolves to the value stored at the specified position."},
  {"URL": "https://portal.thirdweb.com/typescript/v5/eth_getTransactionByHash", "content": "eth_getTransactionByHash\nRetrieves a transaction by its hash.\nExample\nimport\n{ getRpcClient, eth_getTransactionByHash }\nfrom\n\"thirdweb/rpc\"\n;\nconst\nrpcRequest\n=\ngetRpcClient\n({ client, chain });\nconst\ntransaction\n=\nawait\neth_getTransactionByHash\n(rpcRequest, {\nhash:\n\"0x...\"\n,\n});\nSignature\nfunction\neth_getTransactionByHash\n(\nrequest\n:\nEIP1193RequestFn\n<\n[\n{\nMethod\n:\n\"web3_clientVersion\"\n;\nParameters\n?:\nundefined\n;\nReturnType\n:\nstring\n;\n},\n{\nMethod\n:\n\"web3_sha3\"\n;\nParameters\n:\n[\ndata\n:\n`0x${\nstring\n}`\n];\nReturnType\n:\nstring\n;\n},\n{\nMethod\n:\n\"net_listening\"\n;\nParameters\n?:\nundefined\n;\nReturnType\n:\nboolean\n;\n},\n{\nMethod\n:\n\"net_peerCount\"\n;\nParameters\n?:\nundefined\n;\nReturnType\n:\n`0x${\nstring\n}`\n;\n},\n{\nMethod\n:\n\"net_version\"\n;\nParameters\n?:\nundefined\n;\nReturnType\n:\n`0x${\nstring\n}`\n;\n},\n]\n>,\nparams\n:\nGetTransactionByHashParameters\n,\n)\n:\nPromise\n<\nTransaction\n>;\nParameters\nrequest\nThe EIP1193 request function.\nType\nlet\nrequest\n:\nEIP1193RequestFn\n<\n[\n{\nMethod\n:\n\"web3_clientVersion\"\n;\nParameters\n?:\nundefined\n;\nReturnType\n:\nstring\n;\n},\n{\nMethod\n:\n\"web3_sha3\"\n;\nParameters\n:\n[\ndata\n:\n`0x${\nstring\n}`\n];\nReturnType\n:\nstring\n;\n},\n{\nMethod\n:\n\"net_listening\"\n;\nParameters\n?:\nundefined\n;\nReturnType\n:\nboolean\n;\n},\n{\nMethod\n:\n\"net_peerCount\"\n;\nParameters\n?:\nundefined\n;\nReturnType\n:\n`0x${\nstring\n}`\n;\n},\n{\nMethod\n:\n\"net_version\"\n;\nParameters\n?:\nundefined\n;\nReturnType\n:\n`0x${\nstring\n}`\n;\n},\n]\n>;\nparams\nThe parameters for retrieving the transaction.\nType\nlet\nparams\n:\nGetTransactionByHashParameters\n;\nReturns\nReturn Type\nlet\nreturnType\n:\nPromise\n<\nTransaction\n>;\nA promise that resolves to the transaction."},
  {"URL": "https://portal.thirdweb.com/typescript/v5/eth_getTransactionCount", "content": "eth_getTransactionCount\nRetrieves the transaction count (nonce) for a given Ethereum address.\nExample\nimport\n{ getRpcClient, eth_getTransactionCount }\nfrom\n\"thirdweb/rpc\"\n;\nconst\nrpcRequest\n=\ngetRpcClient\n({ client, chain });\nconst\ntransactionCount\n=\nawait\neth_getTransactionCount\n(rpcRequest, {\naddress:\n\"0x...\"\n,\n});\nSignature\nfunction\neth_getTransactionCount\n(\nrequest\n:\nEIP1193RequestFn\n<\n[\n{\nMethod\n:\n\"web3_clientVersion\"\n;\nParameters\n?:\nundefined\n;\nReturnType\n:\nstring\n;\n},\n{\nMethod\n:\n\"web3_sha3\"\n;\nParameters\n:\n[\ndata\n:\n`0x${\nstring\n}`\n];\nReturnType\n:\nstring\n;\n},\n{\nMethod\n:\n\"net_listening\"\n;\nParameters\n?:\nundefined\n;\nReturnType\n:\nboolean\n;\n},\n{\nMethod\n:\n\"net_peerCount\"\n;\nParameters\n?:\nundefined\n;\nReturnType\n:\n`0x${\nstring\n}`\n;\n},\n{\nMethod\n:\n\"net_version\"\n;\nParameters\n?:\nundefined\n;\nReturnType\n:\n`0x${\nstring\n}`\n;\n},\n]\n>,\nparams\n:\nGetTransactionCountParameters\n,\n)\n:\nPromise\n<\nnumber\n>;\nParameters\nrequest\nThe EIP1193 request function.\nType\nlet\nrequest\n:\nEIP1193RequestFn\n<\n[\n{\nMethod\n:\n\"web3_clientVersion\"\n;\nParameters\n?:\nundefined\n;\nReturnType\n:\nstring\n;\n},\n{\nMethod\n:\n\"web3_sha3\"\n;\nParameters\n:\n[\ndata\n:\n`0x${\nstring\n}`\n];\nReturnType\n:\nstring\n;\n},\n{\nMethod\n:\n\"net_listening\"\n;\nParameters\n?:\nundefined\n;\nReturnType\n:\nboolean\n;\n},\n{\nMethod\n:\n\"net_peerCount\"\n;\nParameters\n?:\nundefined\n;\nReturnType\n:\n`0x${\nstring\n}`\n;\n},\n{\nMethod\n:\n\"net_version\"\n;\nParameters\n?:\nundefined\n;\nReturnType\n:\n`0x${\nstring\n}`\n;\n},\n]\n>;\nparams\nThe parameters for retrieving the transaction count.\nType\nlet\nparams\n:\nGetTransactionCountParameters\n;\nReturns\nReturn Type\nlet\nreturnType\n:\nPromise\n<\nnumber\n>;\nA promise that resolves to the transaction count as a number."},
  {"URL": "https://portal.thirdweb.com/typescript/v5/eth_maxPriorityFeePerGas", "content": "eth_maxPriorityFeePerGas\nRetrieves the maximum priority fee per gas from the Ethereum network.\nExample\nimport\n{ getRpcClient, eth_maxPriorityFeePerGas }\nfrom\n\"thirdweb/rpc\"\n;\nconst\nrpcRequest\n=\ngetRpcClient\n({ client, chain });\nconst\nmaxPriorityFeePerGas\n=\nawait\neth_maxPriorityFeePerGas\n(rpcRequest);\nSignature\nfunction\neth_maxPriorityFeePerGas\n(\nrequest\n:\nEIP1193RequestFn\n<\n[\n{\nMethod\n:\n\"web3_clientVersion\"\n;\nParameters\n?:\nundefined\n;\nReturnType\n:\nstring\n;\n},\n{\nMethod\n:\n\"web3_sha3\"\n;\nParameters\n:\n[\ndata\n:\n`0x${\nstring\n}`\n];\nReturnType\n:\nstring\n;\n},\n{\nMethod\n:\n\"net_listening\"\n;\nParameters\n?:\nundefined\n;\nReturnType\n:\nboolean\n;\n},\n{\nMethod\n:\n\"net_peerCount\"\n;\nParameters\n?:\nundefined\n;\nReturnType\n:\n`0x${\nstring\n}`\n;\n},\n{\nMethod\n:\n\"net_version\"\n;\nParameters\n?:\nundefined\n;\nReturnType\n:\n`0x${\nstring\n}`\n;\n},\n]\n>,\n)\n:\nPromise\n<\nbigint\n>;\nParameters\nrequest\nThe EIP1193 request function.\nType\nlet\nrequest\n:\nEIP1193RequestFn\n<\n[\n{\nMethod\n:\n\"web3_clientVersion\"\n;\nParameters\n?:\nundefined\n;\nReturnType\n:\nstring\n;\n},\n{\nMethod\n:\n\"web3_sha3\"\n;\nParameters\n:\n[\ndata\n:\n`0x${\nstring\n}`\n];\nReturnType\n:\nstring\n;\n},\n{\nMethod\n:\n\"net_listening\"\n;\nParameters\n?:\nundefined\n;\nReturnType\n:\nboolean\n;\n},\n{\nMethod\n:\n\"net_peerCount\"\n;\nParameters\n?:\nundefined\n;\nReturnType\n:\n`0x${\nstring\n}`\n;\n},\n{\nMethod\n:\n\"net_version\"\n;\nParameters\n?:\nundefined\n;\nReturnType\n:\n`0x${\nstring\n}`\n;\n},\n]\n>;\nReturns\nReturn Type\nlet\nreturnType\n:\nPromise\n<\nbigint\n>;\nA promise that resolves to a bigint representing the maximum priority fee per gas."},
  {"URL": "https://portal.thirdweb.com/typescript/v5/eth_sendRawTransaction", "content": "eth_sendRawTransaction\nSends a raw transaction to the Ethereum network.\nExample\nimport\n{ getRpcClient, eth_sendRawTransaction }\nfrom\n\"thirdweb/rpc\"\n;\nconst\nrpcRequest\n=\ngetRpcClient\n({ client, chain });\nconst\ntransactionHash\n=\nawait\neth_sendRawTransaction\n(\nrpcRequest,\n\"0x...\"\n,\n);\nSignature\nfunction\neth_sendRawTransaction\n(\nrequest\n:\nEIP1193RequestFn\n<\n[\n{\nMethod\n:\n\"web3_clientVersion\"\n;\nParameters\n?:\nundefined\n;\nReturnType\n:\nstring\n;\n},\n{\nMethod\n:\n\"web3_sha3\"\n;\nParameters\n:\n[\ndata\n:\n`0x${\nstring\n}`\n];\nReturnType\n:\nstring\n;\n},\n{\nMethod\n:\n\"net_listening\"\n;\nParameters\n?:\nundefined\n;\nReturnType\n:\nboolean\n;\n},\n{\nMethod\n:\n\"net_peerCount\"\n;\nParameters\n?:\nundefined\n;\nReturnType\n:\n`0x${\nstring\n}`\n;\n},\n{\nMethod\n:\n\"net_version\"\n;\nParameters\n?:\nundefined\n;\nReturnType\n:\n`0x${\nstring\n}`\n;\n},\n]\n>,\nsignedTransaction\n:\n`0x${\nstring\n}`\n,\n)\n:\nPromise\n<\n`0x${\nstring\n}`\n>;\nParameters\nrequest\nThe EIP1193 request function.\nType\nlet\nrequest\n:\nEIP1193RequestFn\n<\n[\n{\nMethod\n:\n\"web3_clientVersion\"\n;\nParameters\n?:\nundefined\n;\nReturnType\n:\nstring\n;\n},\n{\nMethod\n:\n\"web3_sha3\"\n;\nParameters\n:\n[\ndata\n:\n`0x${\nstring\n}`\n];\nReturnType\n:\nstring\n;\n},\n{\nMethod\n:\n\"net_listening\"\n;\nParameters\n?:\nundefined\n;\nReturnType\n:\nboolean\n;\n},\n{\nMethod\n:\n\"net_peerCount\"\n;\nParameters\n?:\nundefined\n;\nReturnType\n:\n`0x${\nstring\n}`\n;\n},\n{\nMethod\n:\n\"net_version\"\n;\nParameters\n?:\nundefined\n;\nReturnType\n:\n`0x${\nstring\n}`\n;\n},\n]\n>;\nsignedTransaction\nThe signed transaction in hex format.\nType\nlet\nsignedTransaction\n:\n`0x${\nstring\n}`\n;\nReturns\nReturn Type\nlet\nreturnType\n:\nPromise\n<\n`0x${\nstring\n}`\n>;\nA promise that resolves to the transaction hash."},
  {"URL": "https://portal.thirdweb.com/typescript/v5/ethers5Adapter", "content": "ethers5Adapter\nThe ethers5 adapter provides a way to convert between Thirdweb contracts, accounts, and providers.\nlet\nethers5Adapter\n:\n{\ncontract\n:\n{\nfromEthers\n:\n(\noptions\n:\nFromEthersContractOptions\n,\n)\n=>\nPromise\n<\nReadonly\n<\nContractOptions\n<\nAbi\n>>>;\ntoEthers\n:\n(\noptions\n:\n{\nthirdwebContract\n:\nReadonly\n<\nContractOptions\n<[]>>;\n})\n=>\nPromise\n<\nContract\n>;\n};\nprovider\n:\n{\ntoEthers\n:\n(\noptions\n:\n{\nchain\n:\nReadonly\n<\nChainOptions\n&\n{\nrpc\n:\nstring\n}>;\nclient\n:\nThirdwebClient\n;\n})\n=>\nProvider\n;\n};\nsigner\n:\n{\nfromEthers\n:\n(\noptions\n:\n{\nsigner\n:\nSigner\n})\n=>\nPromise\n<\nAccount\n>;\ntoEthers\n:\n(\noptions\n:\n{\naccount\n:\nAccount\n;\nchain\n:\nReadonly\n<\nChainOptions\n&\n{\nrpc\n:\nstring\n}>;\nclient\n:\nThirdwebClient\n;\n})\n=>\nPromise\n<\nThirdwebAdapterSigner\n>;\n};\n};\ncontract\nConverts a ThirdwebContract to an ethers.js Contract or the other way around.\ntype\ncontract\n=\n{\nfromEthers\n:\n(\noptions\n:\nFromEthersContractOptions\n,\n)\n=>\nPromise\n<\nReadonly\n<\nContractOptions\n<\nAbi\n>>>;\ntoEthers\n:\n(\noptions\n:\n{\nthirdwebContract\n:\nReadonly\n<\nContractOptions\n<[]>>;\n})\n=>\nPromise\n<\nContract\n>;\n};\nExample\ntoEthers\nimport\n{ ethers5Adapter }\nfrom\n\"thirdweb/adapters/ethers5\"\n;\nconst\nethersContract\n=\nawait\nethers5Adapter.contract.\ntoEthers\n({\nthirdwebContract,\n});\nfromEthers\nimport\n{ ethers5Adapter }\nfrom\n\"thirdweb/adapters/ethers5\"\n;\nconst\ntwContract\n=\nawait\nethers5Adapter.contract.\nfromEthers\n({\nclient,\nethersContract,\nchain:\ndefineChain\n(\n1\n),\n// Replace with your chain\n});\nprovider\nConverts a Thirdweb client and chain ID into an ethers.js provider.\ntype\nprovider\n=\n{\ntoEthers\n:\n(\noptions\n:\n{\nchain\n:\nReadonly\n<\nChainOptions\n&\n{\nrpc\n:\nstring\n}>;\nclient\n:\nThirdwebClient\n;\n})\n=>\nProvider\n;\n};\nExample\nimport\n{ ethers5Adapter }\nfrom\n\"thirdweb/adapters/ethers5\"\n;\nconst\nprovider\n=\nethers5Adapter.provider.\ntoEthers\n({\nclient,\nchainId,\n});\nOnce you have converted a thirdweb Client to ethers Provider,\nyou can use it like any other ethers provider:\nconst\nblockNumber\n=\nawait\nprovider.\ngetBlockNumber\n();\nsigner\nConverts an ethers5 Signer into a Wallet object or the other way around.\ntype\nsigner\n=\n{\nfromEthers\n:\n(\noptions\n:\n{\nsigner\n:\nSigner\n})\n=>\nPromise\n<\nAccount\n>;\ntoEthers\n:\n(\noptions\n:\n{\naccount\n:\nAccount\n;\nchain\n:\nReadonly\n<\nChainOptions\n&\n{\nrpc\n:\nstring\n}>;\nclient\n:\nThirdwebClient\n;\n})\n=>\nPromise\n<\nThirdwebAdapterSigner\n>;\n};\nExample\nfromEthers\nimport\n{ ethers5Adapter }\nfrom\n\"thirdweb/adapters/ethers5\"\n;\nconst\nwallet\n=\nawait\nethers5Adapter.signer.\nfromEthers\n({ signer });\ntoEthers\nimport\n{ ethers5Adapter }\nfrom\n\"thirdweb/adapters/ethers5\"\n;\nconst\nsigner\n=\nawait\nethers5Adapter.signer.\ntoEthers\n({\nclient,\nchain,\naccount,\n});"},
  {"URL": "https://portal.thirdweb.com/typescript/v5/ethers6Adapter", "content": "ethers6Adapter\nThe ethers6 adapter provides a way to convert between Thirdweb contracts, accounts, and providers.\nlet\nethers6Adapter\n:\n{\ncontract\n:\n{\nfromEthers\n:\n(\noptions\n:\nFromEthersContractOptions\n,\n)\n=>\nPromise\n<\nReadonly\n<\nContractOptions\n<\nAbi\n>>>;\ntoEthers\n:\n(\noptions\n:\n{\naccount\n?:\nAccount\n;\nthirdwebContract\n:\nReadonly\n<\nContractOptions\n<[]>>;\n})\n=>\nPromise\n<\nContract\n>;\n};\nprovider\n:\n{\ntoEthers\n:\n(\noptions\n:\n{\nchain\n:\nReadonly\n<\nChainOptions\n&\n{\nrpc\n:\nstring\n}>;\nclient\n:\nThirdwebClient\n;\n})\n=>\nJsonRpcProvider\n;\n};\nsigner\n:\n{\nfromEthers\n:\n(\noptions\n:\n{\nsigner\n:\nSigner\n})\n=>\nPromise\n<\nAccount\n>;\ntoEthers\n:\n(\noptions\n:\n{\naccount\n:\nAccount\n;\nchain\n:\nReadonly\n<\nChainOptions\n&\n{\nrpc\n:\nstring\n}>;\nclient\n:\nThirdwebClient\n;\n})\n=>\nSigner\n;\n};\n};\ncontract\nConverts a ThirdwebContract to an ethers.js Contract or the other way around.\ntype\ncontract\n=\n{\nfromEthers\n:\n(\noptions\n:\nFromEthersContractOptions\n,\n)\n=>\nPromise\n<\nReadonly\n<\nContractOptions\n<\nAbi\n>>>;\ntoEthers\n:\n(\noptions\n:\n{\naccount\n?:\nAccount\n;\nthirdwebContract\n:\nReadonly\n<\nContractOptions\n<[]>>;\n})\n=>\nPromise\n<\nContract\n>;\n};\nExample\ntoEthers\nimport\n{ ethers6Adapter }\nfrom\n\"thirdweb/adapters/ethers6\"\n;\nconst\nethersContract\n=\nawait\nethers6Adapter.contract.\ntoEthers\n({\nthirdwebContract,\naccount,\n});\nfromEthers\nimport\n{ ethers6Adapter }\nfrom\n\"thirdweb/adapters\"\n;\nconst\ncontract\n=\nethers6Adapter.contract.\nfromEthers\n({\nclient,\nchain,\nethersContract,\n});\nprovider\nConverts a Thirdweb client and chain ID into an ethers.js provider.\ntype\nprovider\n=\n{\ntoEthers\n:\n(\noptions\n:\n{\nchain\n:\nReadonly\n<\nChainOptions\n&\n{\nrpc\n:\nstring\n}>;\nclient\n:\nThirdwebClient\n;\n})\n=>\nJsonRpcProvider\n;\n};\nExample\nimport\n{ ethers6Adapter }\nfrom\n\"thirdweb/adapters/ethers6\"\n;\nconst\nprovider\n=\nethers6Adapter.provider.\ntoEthers\n({ client, chain });\nsigner\nConverts an ethers6 Signer into an Wallet object or the other way around.\ntype\nsigner\n=\n{\nfromEthers\n:\n(\noptions\n:\n{\nsigner\n:\nSigner\n})\n=>\nPromise\n<\nAccount\n>;\ntoEthers\n:\n(\noptions\n:\n{\naccount\n:\nAccount\n;\nchain\n:\nReadonly\n<\nChainOptions\n&\n{\nrpc\n:\nstring\n}>;\nclient\n:\nThirdwebClient\n;\n})\n=>\nSigner\n;\n};\nExample\nfromEthersSigner\nimport\n{ ethers6Adapter }\nfrom\n\"thirdweb/adapters/ethers6\"\n;\nconst\nsigner\n=\nethers6Adapter.signer.\nfromEthersSigner\n({ signer });\ntoEthersSigner\nimport\n{ ethers6Adapter }\nfrom\n\"thirdweb/adapters/ethers6\"\n;\nconst\nsigner\n=\nawait\nethers6Adapter.signer.\ntoEthers\n({\nclient,\nchain,\naccount,\n});"},
  {"URL": "https://portal.thirdweb.com/typescript/v5/extensions", "content": "Extensions\nWhat are extensions?\nExtensions are the most convenient way to interact with contracts and protocols.\nThey are precompiled, type-safe and highly optimized implementations of common standards such as ERC20, ERC721, ERC1155, etc. They can be handwritten to provide an easier API, sometimes combining multiple contract calls into one convenient function. They can also be generated from any deployed contract using a\nsimple CLI command\n.\nBuilt-in Extensions\nLearn how to use extensions in your application\nUse Extensions\nLearn how to use extensions in your application\nGenerate Extensions\nGenerate extensions for any deployed contract\nWrite Extensions\nWrite your own extensions"},
  {"URL": "https://portal.thirdweb.com/typescript/v5/extensions/built-in", "content": "Built-in extensions for common standards\nThe SDK comes packed with a set of built-in extensions for common standards. These extensions are designed to make it easy to interact with popular contracts and protocols. They are available as part of the SDK and can be used in your application without any additional setup.\nStandard\nImport Path\nDescription\nAIRDROP\nthirdweb/extensions/\nairdrop\nAIRDROP extensions\nCommon\nthirdweb/extensions/\ncommon\nCommon contract extensions\nENS\nthirdweb/extensions/\nens\nENS extensions\nERC1155\nthirdweb/extensions/\nerc1155\nERC1155 token standard extensions\nERC1271\nthirdweb/extensions/\nerc1271\nERC1271 extensions\nERC20\nthirdweb/extensions/\nerc20\nERC20 token standard extensions\nERC4337\nthirdweb/extensions/\nerc4337\nERC4337 account abstraction extensions\nERC4626\nthirdweb/extensions/\nerc4626\nERC4626 Tokenized Vaults extensions\nERC721\nthirdweb/extensions/\nerc721\nERC721 token standard extensions\nFARCASTER\nthirdweb/extensions/\nfarcaster\nFarcaster protocol extensions\nLENS\nthirdweb/extensions/\nlens\nLens protocol extensions\nMARKETPLACE\nthirdweb/extensions/\nmarketplace\nMARKETPLACE extensions\nMODULAR\nthirdweb/extensions/\nmodular\nMODULAR extensions\nMULTICALL3\nthirdweb/extensions/\nmulticall3\nMULTICALL3 extensions\nPERMISSIONS\nthirdweb/extensions/\npermissions\nPERMISSIONS extensions\nSPLIT\nthirdweb/extensions/\nsplit\nSPLIT extensions\nTHIRDWEB\nthirdweb/extensions/\nthirdweb\nTHIRDWEB extensions\nUNISWAP\nthirdweb/extensions/\nuniswap\nUNISWAP extensions\nVOTE\nthirdweb/extensions/\nvote\nVOTE extensions\nMore extensions are being added regularly. Anyone can\ncreate an extension\nand contribute it back to the repository. You can also\ngenerate extensions\nfor any deployed contract."},
  {"URL": "https://portal.thirdweb.com/typescript/v5/extensions/create", "content": "Writing your own extensions\nYou can create your own extensions. They are just regular functions that pre-define the behavior of a\nprepareContractCall()\nor\nreadContract()\nfunction.\nThe goal of extensions is to add a layer of convenience to direct contract calls, either to simplify the inputs or to give richer outputs.\nExample: Creating the\ngetBalance\nextension for ERC20 tokens\nThe\nerc20/getBalance\nextension is a very convenient and efficient way to fetch all the information needed to display an ERC20 token balance to a user, a very common usecase for applications. Here is how it is implemented in the SDK.\n// Define your extension function\nexport\nfunction\ngetBalance\n(\n// The base options include everything that is needed to interact with the contract, *except* the specific params for your function, in this case, \"address\"\noptions\n:\nBaseTransactionOptions\n<{\naddress\n:\nstring\n}>,\n) {\n// The extension conveniently fetches all the relevant information from the contract to display a readable balance\nconst\n[\nbalanceWei\n,\ndecimals_\n,\nsymbol_\n,\nname_\n]\n=\nawait\nPromise\n.\nall\n([\nbalanceOf\n(options),\ndecimals\n(options),\nsymbol\n(options),\nname\n(options),\n]);\nreturn\n{\nvalue: balanceWei,\ndecimals: decimals_,\n// The `toTokens` function converts the balance from wei to a human-readable format\ndisplayValue:\ntoTokens\n(balanceWei, decimals_),\nsymbol: symbol_,\nname: name_,\n};\n}\nExample: Creating the\nmintTo\nextension for ERC721 tokens\nThe\nerc721/mintTo\nextension handles uploading the NFT metadata to IPFS before minting. Here is how it is implemented in the SDK.\nimport\n{\nprepareContractCall,\ntype\nBaseTransactionOptions,\n}\nfrom\n\"thirdweb\"\n;\n// Define your extension function\nexport\nfunction\nmintTo\n(\n// The base options include everything that is needed to interact with the contract, *except* the specific params for your function, in this case \"to\" and \"nft\"\noptions\n:\nBaseTransactionOptions\n<{\nto\n:\nstring\n;\nnft\n:\nNFTMetadata\n}>,\n) {\nreturn\nprepareContractCall\n({\n// Pass the contract from the options\ncontract: options.contract,\n// Pre-define the function to call on the smart contract\nmethod:\n\"function mintTo(address to, string uri)\"\n,\n// The function params can be async\nparams\n:\nasync\n()\n=>\n{\n// Upload the metadata to IPFS\nconst\ntokenURI\n=\n(\nawait\nupload\n({\nclient: options.contract.client,\nfiles: [options.nft],\n})[\n0\n])\nas\nstring\n;\n// return the contract params\nreturn\n[options.to, tokenURI]\nas\nconst\n;\n},\n});\n}"},
  {"URL": "https://portal.thirdweb.com/typescript/v5/extensions/examples/ethereum-name-service", "content": "Interacting with ENS\nResolve an ENS name to an Ethereum address\nimport\n{ resolveAddress }\nfrom\n\"thirdweb/extensions/ens\"\n;\nconst\naddress\n=\nawait\nresolveAddress\n({\nclient,\nname:\n\"vitalik.eth\"\n,\n});\n// Expected result: \"0x...\"\nResolve the primary name for a specified address\nimport\n{ resolveName }\nfrom\n\"thirdweb/extensions/ens\"\n;\nconst\nname\n=\nawait\nresolveName\n({\nclient,\naddress:\n\"0x1234...\"\n,\n});\n// Expected result: \"something.eth\"\nResolve an ENS name to the avatar URL.\nimport\n{ resolveAvatar }\nfrom\n\"thirdweb/extensions/ens\"\n;\nconst\naddress\n=\nawait\nresolveAvatar\n({\nclient,\nname:\n\"vitalik.eth\"\n,\n});\n// Expected result: An URL that points to the image of the ENS"},
  {"URL": "https://portal.thirdweb.com/typescript/v5/extensions/examples/transfering-tokens", "content": "Transfering (sending) tokens using thirdweb extensions\nERC721\nimport\n{ safeTransferFrom }\nfrom\n\"thirdweb/extensions/erc721\"\n;\nimport\n{ sendAndConfirmTransaction }\nfrom\n\"thirdweb\"\n;\nconst\ntransaction\n=\nsafeTransferFrom\n({\ncontract,\n// the erc721 contract\nfrom:\n\"0x-wallet-address-of-owner\"\n,\nto:\n\"0x-recipient-address\"\n,\ntokenId:\n0\nn\n,\n// bigint - if you want to transfer tokenId #0, enter `0n`\n});\nconst\ntransactionReceipt\n=\nawait\nsendAndConfirmTransaction\n({\naccount,\n// the account initiating the transaction\ntransaction,\n});\nERC1155\nERC1155 works in a similar way. However you must specify the quantity that you want to transfer, and an optional data parameter.\nimport\n{ safeTransferFrom }\nfrom\n\"thirdweb/extensions/erc1155\"\n;\nimport\n{ sendAndConfirmTransaction }\nfrom\n\"thirdweb\"\n;\nconst\nquantity\n=\n1\nn\n;\nconst\noptionalData\n=\n\"0x\"\n;\nconst\ntransaction\n=\nsafeTransferFrom\n({\ncontract,\n// the erc1155 contract\nfrom:\n\"0x...\"\n,\n// owner's wallet address\nto:\n\"0x...\"\n,\n// recipient address\ntokenId:\n0\nn\n,\nvalue: quantity,\ndata: optionalData,\n});\nconst\ntransactionReceipt\n=\nawait\nsendAndConfirmTransaction\n({\naccount,\n// the account initiating the transaction\ntransaction,\n});\nERC20\nimport\n{ transferFrom }\nfrom\n\"thirdweb/extensions/erc20\"\n;\nimport\n{ sendAndConfirmTransaction }\nfrom\n\"thirdweb\"\n;\nconst\ntransaction\n=\ntransferFrom\n({\ncontract,\n// the erc20 contract\nfrom:\n\"0x...\"\n,\n// owner's wallet address\nto:\n\"0x...\"\n,\n// recipient address\namount:\n10\nn\n,\n// sending 10 tokens\n// Alternatively, you can use `amountWei` if you prefer to use the value in wei\n// amountWei: 10000000000000000000n, // assuming a decimals of 18\n});"},
  {"URL": "https://portal.thirdweb.com/typescript/v5/extensions/generate", "content": "Generating extensions\nYou can generate precompiled, optimized extensions for any deployed contract using the thirdweb CLI.\nThe thirdweb SDK comes with a CLI that can be run with your package manager of choice.\nnpx\nthirdweb\ngenerate\n<\nchainI\nd\n>\n/\n<\ncontract-addres\ns\n>\nThis will generate a new\nthirdweb\ndirectory in your own project, containing the precompiled extension for the contract at the given address.\nExample: Generating an extension for a USDC contract on Optimism\nnpx\nthirdweb\ngenerate\n10/0x0b2c639c533813f4aa9d7837caf62653d097ff85\nThis will generate the following file\nthirdweb/10/0x0b2c639c533813f4aa9d7837caf62653d097ff85.ts\nin your project, containing:\nPrecompiled, type-safe event definitions\nPrecompiled, type-safe function definitions\nYou can inspect the generated code, modify it, and use it in your project.\nExample: Using a generated extension function\nimport\n{ permit }\nfrom\n\"/thirdweb/10/0x0b2c639c533813f4aa9d7837caf62653d097ff85\"\n;\nconst\ncontract\n=\ngetContract\n({\nclient,\nchain: optimism,\naddress:\nUSDC_ADDRESS\n,\n});\n// Type-safe function to do a permit transaction\nconst\ntransaction\n=\npermit\n({\nowner:\n...\n,\nspender:\n...\n,\nvalue:\n...\n,\ndeadline:\n...\n,\nsignature:\n...\n,\n});\nawait\nsendTransaction\n({ transaction, account });\nExample: Using a generated event\nimport\n{ transferEvent }\nfrom\n\"/thirdweb/10/0x0b2c639c533813f4aa9d7837caf62653d097ff85\"\n;\nconst\ncontract\n=\ngetContract\n({\nclient,\nchain: optimism,\naddress:\nUSDC_ADDRESS\n,\n});\n// Type-safe event listener\nconst\nevents\n=\nawait\ngetContractEvents\n({\ncontract,\nevents: [\ntransferEvent\n({\nfrom:\n...\n,\nto:\n...\n,\n})\n],\n});"},
  {"URL": "https://portal.thirdweb.com/typescript/v5/extensions/use", "content": "Using extensions\nWhat are extensions?\nExtensions are the most convenient way to interact with contracts and protocols.\nThey are precompiled, type-safe and highly optimized implementations of common standards such as ERC20, ERC721, ERC1155, etc. They can be handwritten to provide an easier API, sometimes combining multiple contract calls into one convenient function. They can also be generated from any deployed contract using a\nsimple CLI command\n.\nTo use an extension, you just need to import it and call it with the necessary parameters.\nExample:\ngetOwned()\nextension for ERC1155 tokens\nThis read extension handles fetching all the tokens owned by an address. Under the hood, this combines multiple contract calls.\nimport\n{ getContract }\nfrom\n\"thirdweb\"\n;\nimport\n{ getOwnedNFTs }\nfrom\n\"thirdweb/extensions/erc1155\"\n;\n// get the contract\nconst\ncontract\n=\ngetContract\n({\n...\n});\n// since this is a read extension, we can just await the result\nconst\nownedNFTs\n=\nawait\ngetOwnedNFTs\n({\ncontract,\naddress:\n\"0x5678...\"\n,\n});\nExample:\nmintTo()\nextension for ERC721 tokens\nThis extension handles uploading metadata to IPFS before minting an ERC721 token.\nimport\n{ getContract }\nfrom\n\"thirdweb\"\n;\nimport\n{ mintTo }\nfrom\n\"thirdweb/extensions/erc721\"\n;\n// get the contract\nconst\ncontract\n=\ngetContract\n({\n...\n});\n// call the extension function to prepare the transaction\nconst\ntransaction\n=\nmintTo\n({\ncontract,\nto:\n\"0x5678...\"\n,\nnft: {\nname:\n\"My NFT\"\n,\ndescription:\n\"This is my NFT\"\n,\nimage:\n\"https://example.com/image.png\"\n,\n},\n});\n// Send the transaction\nconst\ntransactionResult\n=\nawait\nsendTransaction\n({\ntransaction,\naccount,\n});\nExample:\ntransfer()\nextension for ERC20 tokens\nThis extension conveniently handles unit conversion when transfering ERC20 tokens. You can pass the amount in tokens, the extension will convert it to the right unit before calling the contract.\nimport\n{ getContract, sendTransaction }\nfrom\n\"thirdweb\"\n;\nimport\n{ transfer }\nfrom\n\"thirdweb/extensions/erc20\"\n;\n// get the contract\nconst\ncontract\n=\ngetContract\n({\n...\n});\n// Call the extension function to prepare the transaction\nconst\ntransaction\n=\ntransfer\n({\ncontract,\nto:\n\"0x1234...\"\n,\namount:\n\"0.01\"\n,\n});\n// Send the transaction\nconst\ntransactionResult\n=\nawait\nsendTransaction\n({\ntransaction,\naccount,\n});"},
  {"URL": "https://portal.thirdweb.com/typescript/v5/fetchPublishedContract", "content": "fetchPublishedContract\nFetches the published contract based on the provided options.\nExample\nconst\npublishedContract\n=\nawait\nfetchPublishedContract\n({\npublisherAddress:\n\"0x1234\"\n,\ncontractName:\n\"MyContract\"\n,\nversion:\n\"1.0.0\"\n,\nclient: client,\n});\nSignature\nfunction\nfetchPublishedContract\n(\noptions\n:\nFetchPublishedContractOptions\n,\n)\n:\nPromise\n<{\nbytecodeHash\n:\n`0x${\nstring\n}`\n;\ncontractId\n:\nstring\n;\nimplementation\n:\nstring\n;\npublishMetadataUri\n:\nstring\n;\npublishTimestamp\n:\nbigint\n;\n}>;\nParameters\noptions\nThe options for fetching the published contract.\nType\nlet\noptions\n:\nFetchPublishedContractOptions\n;\nReturns\nReturn Type\nlet\nreturnType\n:\nPromise\n<{\nbytecodeHash\n:\n`0x${\nstring\n}`\n;\ncontractId\n:\nstring\n;\nimplementation\n:\nstring\n;\npublishMetadataUri\n:\nstring\n;\npublishTimestamp\n:\nbigint\n;\n}>;\nThe published contract."},
  {"URL": "https://portal.thirdweb.com/typescript/v5/generateAccount", "content": "generateAccount\nGenerates a new account with a random private key.\nExample\nimport\n{ generateAccount }\nfrom\n\"thirdweb/wallets\"\n;\nconst\naccount\n=\nawait\ngenerateAccount\n({ client });\nSignature\nfunction\ngenerateAccount\n(\noptions\n:\nGenerateAccountOptions\n,\n)\n:\nPromise\n<\nAccount\n>;\nParameters\noptions\nThe options for generating the account.\nType\nlet\noptions\n:\n{\nclient\n:\nThirdwebClient\n};\nReturns\nReturn Type\nlet\nreturnType\n:\n{\naddress\n:\nAddress\n;\nestimateGas\n?:\n(\ntx\n:\nPreparedTransaction\n)\n=>\nPromise\n<\nbigint\n>;\nonTransactionRequested\n?:\n(\ntransaction\n:\nPreparedTransaction\n<\nany\n>,\n)\n=>\nPromise\n<\nvoid\n>;\nsendBatchTransaction\n?:\n(\ntxs\n:\nArray\n<\nSendTransactionOption\n>,\n)\n=>\nPromise\n<\nSendTransactionResult\n>;\nsendRawTransaction\n?:\n(\ntx\n:\nSendRawTransactionOptions\n,\n)\n=>\nPromise\n<\nSendTransactionResult\n>;\nsendTransaction\n:\n(\ntx\n:\nSendTransactionOption\n,\n)\n=>\nPromise\n<\nSendTransactionResult\n>;\nsignMessage\n:\n({\nmessage\n,\n}\n:\n{\nmessage\n:\nSignableMessage\n;\n})\n=>\nPromise\n<\nHex\n>;\nsignTransaction\n?:\n(\ntx\n:\nTransactionSerializable\n)\n=>\nPromise\n<\nHex\n>;\nsignTypedData\n:\n(\n_typedData\n:\nTypedDataDefinition\n<\ntypedData\n,\nprimaryType\n>,\n)\n=>\nPromise\n<\nHex\n>;\nwatchAsset\n?:\n(\nasset\n:\nWatchAssetParams\n)\n=>\nPromise\n<\nboolean\n>;\n};\nA Thirdweb account."},
  {"URL": "https://portal.thirdweb.com/typescript/v5/getChainMetadata", "content": "getChainMetadata\nRetrieves chain data for a given chain.\nExample\nconst\nchain\n=\ndefineChain\n({ id:\n1\n});\nconst\nchainData\n=\nawait\ngetChainMetadata\n(chain);\nconsole.\nlog\n(chainData);\nSignature\nfunction\ngetChainMetadata\n(\nchain\n:\nReadonly\n<\nChainOptions\n&\n{\nrpc\n:\nstring\n}>,\n)\n:\nPromise\n<\nChainMetadata\n>;\nParameters\nchain\nThe chain object containing the chain ID.\nType\nlet\nchain\n:\nReadonly\n<\nChainOptions\n&\n{\nrpc\n:\nstring\n}>;\nReturns\nReturn Type\nlet\nreturnType\n:\n{\nchain\n:\nstring\n;\nchainId\n:\nnumber\n;\nens\n?:\n{\nregistry\n:\nstring\n};\nexplorers\n?:\nReadonly\n<\nArray\n<\nChainExplorer\n>>;\nfaucets\n?:\nreadonly\nArray\n<\nstring\n>;\nfeatures\n?:\nReadonly\n<\nArray\n<{\nname\n:\nstring\n}>>;\nicon\n?:\nIcon\n;\ninfoURL\n?:\nstring\n;\nname\n:\nstring\n;\nnativeCurrency\n:\n{\ndecimals\n:\nnumber\n;\nname\n:\nstring\n;\nsymbol\n:\nstring\n};\nnetworkId\n?:\nnumber\n;\nparent\n?:\n{\nbridges\n?:\nReadonly\n<\nArray\n<{\nurl\n:\nstring\n}>>;\nchain\n:\nstring\n;\ntype\n:\nstring\n};\nredFlags\n?:\nreadonly\nArray\n<\nstring\n>;\nrpc\n:\nreadonly\nArray\n<\nstring\n>;\nshortName\n:\nstring\n;\nslip44\n?:\nnumber\n;\nslug\n:\nstring\n;\nstatus\n?:\nstring\n;\ntestnet\n:\nboolean\n;\ntitle\n?:\nstring\n}\nA Promise that resolves to the chain data."},
  {"URL": "https://portal.thirdweb.com/typescript/v5/getContract", "content": "getContract\nCreates a Thirdweb contract by combining the Thirdweb client and contract options.\nExample\nimport\n{ createThirdwebClient, getContract }\nfrom\n\"thirdweb\"\n;\nimport\n{ sepolia }\nfrom\n\"thirdweb/chains\"\n;\nconst\nclient\n=\ncreateThirdwebClient\n({ clientId:\n\"...\"\n});\nconst\ncontract\n=\ngetContract\n({\nclient,\nchain: sepolia,\naddress:\n\"0x123...\"\n,\n// optional ABI\nabi: [\n...\n],\n});\nSignature\nfunction\ngetContract\n(\noptions\n:\nContractOptions\n<\nabi\n>,\n)\n:\nThirdwebContract\n<\nabi\n>;\nParameters\noptions\nThe options for creating the contract.\nType\nlet\noptions\n:\nContractOptions\n<\nabi\n>;\nReturns\nReturn Type\nlet\nreturnType\n:\nThirdwebContract\n<\nabi\n>;\nThe Thirdweb contract."},
  {"URL": "https://portal.thirdweb.com/typescript/v5/getContractEvents", "content": "getContractEvents\nRetrieves events from a contract based on the provided options.\nExample\nimport\n{ getContractEvents }\nfrom\n\"thirdweb\"\n;\nconst\nevents\n=\nawait\ngetContractEvents\n({\ncontract: myContract,\nfromBlock:\n123456\nn\n,\ntoBlock:\n123456\nn\n,\nevents: [preparedEvent, preparedEvent2],\n});\nSignature\nfunction\ngetContractEvents\n(\noptions\n:\nGetContractEventsOptions\n<\nabi\n,\nabiEvents\n,\nTStrict\n>,\n)\n:\nPromise\n<\nGetContractEventsResult\n<\nabiEvents\n,\nTStrict\n>>;\nParameters\noptions\nThe options for retrieving events.\nType\nlet\noptions\n:\nGetContractEventsOptions\n<\nabi\n,\nabiEvents\n,\nTStrict\n>;\nReturns\nReturn Type\nlet\nreturnType\n:\nParseEventLogsResult\n<\nabiEvents\n,\nTStrict\n>;\nA promise that resolves to an array of parsed event logs.\nNote: toBlock and fromBlock are both inclusive."},
  {"URL": "https://portal.thirdweb.com/typescript/v5/getRpcClient", "content": "getRpcClient\nReturns an RPC request that can be used to make JSON-RPC requests.\nExample\nimport\n{ createThirdwebClient }\nfrom\n\"thirdweb\"\n;\nimport\n{ getRpcClient }\nfrom\n\"thirdweb/rpc\"\n;\nimport\n{ ethereum }\nfrom\n\"thirdweb/chains\"\n;\nconst\nclient\n=\ncreateThirdwebClient\n({ clientId:\n\"...\"\n});\nconst\nrpcRequest\n=\ngetRpcClient\n({ client, chain: ethereum });\nconst\nblockNumber\n=\nawait\nrpcRequest\n({\nmethod:\n\"eth_blockNumber\"\n,\n});\nSignature\nfunction\ngetRpcClient\n(\noptions\n:\nReadonly\n<{\nchain\n:\nReadonly\n<\nChainOptions\n&\n{\nrpc\n:\nstring\n}>;\nclient\n:\nThirdwebClient\n;\nconfig\n?:\n{\nbatchTimeoutMs\n?:\nnumber\n;\nmaxBatchSize\n?:\nnumber\n;\nrequestTimeoutMs\n?:\nnumber\n;\n};\n}>,\n)\n:\nEIP1193RequestFn\n<\nEIP1474Methods\n>;\nParameters\noptions\nThe RPC options.\nType\nlet\noptions\n:\nReadonly\n<{\nchain\n:\nReadonly\n<\nChainOptions\n&\n{\nrpc\n:\nstring\n}>;\nclient\n:\nThirdwebClient\n;\nconfig\n?:\n{\nbatchTimeoutMs\n?:\nnumber\n;\nmaxBatchSize\n?:\nnumber\n;\nrequestTimeoutMs\n?:\nnumber\n;\n};\n}>;\nReturns\nReturn Type\nlet\nreturnType\n:\nEIP1193RequestFn\n<\nEIP1474Methods\n>;\nThe RPC request function."},
  {"URL": "https://portal.thirdweb.com/typescript/v5/getRpcUrlForChain", "content": "getRpcUrlForChain\nRetrieves the RPC URL for the specified chain.\nIf a custom RPC URL is defined in the options, it will be used.\nOtherwise, a thirdweb RPC URL will be constructed using the chain ID and client ID.\nExample\nimport\n{ getRpcUrlForChain }\nfrom\n\"thirdweb/chains\"\n;\nconst\nrpcUrl\n=\ngetRpcUrlForChain\n({ chain:\n1\n, client });\nconsole.\nlog\n(rpcUrl);\n// \"https://1.rpc.thirdweb.com/...\nSignature\nfunction\ngetRpcUrlForChain\n(\noptions\n:\nGetRpcUrlForChainOptions\n)\n:\nstring\n;\nParameters\noptions\nThe options object containing the chain and client information.\nType\nlet\noptions\n:\nGetRpcUrlForChainOptions\n;\nReturns\nReturn Type\nlet\nreturnType\n:\nstring\n;\nThe RPC URL for the specified chain."},
  {"URL": "https://portal.thirdweb.com/typescript/v5/getTransactionStore", "content": "getTransactionStore\nRetrieve the transaction store for a given address.\nExample\nimport\n{ getTransactionStore }\nfrom\n\"thirdweb/transaction\"\n;\nconst\nstore\n=\ngetTransactionStore\n(\n\"0x...\"\n);\nstore.\nsubscribe\n((\ntransactions\n)\n=>\n{\nconsole.\nlog\n(transactions);\n});\nSignature\nfunction\ngetTransactionStore\n(\naddress\n:\nstring\n,\n)\n:\nStore\n<\nArray\n<\nStoredTransaction\n>>;\nParameters\naddress\nThe address to retrieve the transaction store for.\nType\nlet\naddress\n:\nstring\n;\nReturns\nReturn Type\nlet\nreturnType\n:\nStore\n<\nArray\n<\nStoredTransaction\n>>;\nA store of transactions for the given account to subscribe to."},
  {"URL": "https://portal.thirdweb.com/typescript/v5/getting-started", "content": "Getting Started\nIn this quickstart guide, we'll create a basic script to generate a wallet using a private key and send a transaction. We’ll assume you already have a TypeScript project created.\nInstall the SDK\nTo get started, install the thirdweb SDK using your preferred package manager.\nnpm\nyarn\npnpm\nbun\nnpm\ni\nthirdweb\nCreate a thirdweb client\nGet an API key from\nhttps://thirdweb.com/dashboard/settings/api-keys\nand add it to your\n.env\n.\nTHIRDWEB_SECRET_KEY\n=\n[YOUR\nSECRET\nKEY]\nWALLET_PRIVATE_KEY\n=\n[YOUR\nWALLET\nPRIVATE\nKEY]\nCreate a thirdweb client in your script.\nimport\n{ createThirdwebClient }\nfrom\n\"thirdweb\"\n;\nconst\nclient\n=\ncreateThirdwebClient\n({\n// use `secretKey` for server side or script usage\nsecretKey: process.env.\nTHIRDWEB_SECRET_KEY\n,\n});\nClient Id vs Secret Key\nClient Id is used for\nclient side usage\nand is restricted by the domain restrictions you set on your API key, it is a public identifier which can be used on the frontend safely.\nSecret key is used for\nserver side or script usage\nand is not restricted by the domain restrictions. Never expose your secret key in client side code.\nRead Contract State\nA client is all your need to start reading blockchain data.\nImport the extensions you want to use.\nDefine a contract with\ngetContract\nat a given address and chain.\nCall the extension function to read the data.\nimport\n{ getContract }\nfrom\n\"thirdweb\"\n;\nimport\n{ sepolia }\nfrom\n\"thirdweb/chains\"\n;\n// 1. import the extension you want to use\nimport\n{ getOwnedNFTs }\nfrom\n\"thirdweb/extensions/erc1155\"\n;\n// 2. get the contract\nconst\ncontract\n=\ngetContract\n({\nclient,\naddress:\n\"0x1234...\"\n,\nchain: sepolia,\n});\n// 3. call the extension function\nconst\nownedNFTs\n=\nawait\ngetOwnedNFTs\n({\ncontract,\naddress:\n\"0x1234...\"\n,\n});\nconsole.\nlog\n(ownedNFTs);\nGenerate a wallet from a private key\nTo perform transactions from your script, you'll need an account. You can generate a wallet from a private key using the\nprivateKeyToAccount\nfunction.\nimport\n{ privateKeyToAccount }\nfrom\n\"thirdweb/wallets\"\n;\nconst\naccount\n=\nprivateKeyToAccount\n({\nclient,\nprivateKey: process.env.\nPRIVATE_KEY\n,\n});\n// Get the address of the account\nconst\naddress\n=\naccount.address;\nconsole.\nlog\n(\n\"Connected as\"\n, address);\nRead Wallet Data\nLet's read balance of the account you just created, you'll need funds to perform transactions.\nimport\n{ getWalletBalance }\nfrom\n\"thirdweb/wallets\"\n;\n// Get the balance of the account\nconst\nbalance\n=\nawait\ngetWalletBalance\n({\naccount,\nchain: sepolia,\n});\nconsole.\nlog\n(\n\"Balance:\"\n, balance.displayValue, balance.symbol);\nSend a transaction\nWith the account created and funded, you can now send a transaction.\nImport the extension you want to use.\nDefine a contract with\ngetContract\nat a given address and chain.\nCall the extension function to prepare the transaction.\nSend the transaction.\nimport\n{ getContract, sendTransaction }\nfrom\n\"thirdweb\"\n;\n// 1. Import the extension you want to use\nimport\n{ transfer }\nfrom\n\"thirdweb/extensions/erc20\"\n;\n// 2. Define the contract\nconst\ncontract\n=\ngetContract\n({\nclient,\naddress:\n\"0x1234...\"\n,\nchain: sepolia,\n});\n// 3. Call the extension function to prepare the transaction\nconst\ntransaction\n=\ntransfer\n({\ncontract,\nto:\n\"0x1234...\"\n,\namount:\n\"0.01\"\n,\n});\n// 4. Send the transaction\nconst\nresult\n=\nawait\nsendTransaction\n({\ntransaction,\naccount,\n});\nconsole.\nlog\n(\n\"Transaction hash:\"\n, result.transactionHash);\nYou can also call generic contract functions using the\nprepareContractCall\nfunction by just specifying the solidity method signature you want to call. The arguments will be automatically inferred based on the method signature.\nimport\n{\ngetContract,\nprepareContractCall,\nsendTransaction,\n}\nfrom\n\"thirdweb\"\n;\nimport\n{ sepolia }\nfrom\n\"thirdweb/chains\"\n;\nimport\n{ toWei }\nfrom\n\"thirdweb/utils\"\n;\n// 1. Define the contract\nconst\ncontract\n=\ngetContract\n({\nclient,\naddress:\n\"0x1234...\"\n,\nchain: sepolia,\n});\n// 2. Prepare the transaction\nconst\ntransaction\n=\nprepareContractCall\n({\ncontract,\n// Pass the method signature that you want to call\nmethod:\n\"function mintTo(address to, uint256 amount)\"\n,\n// and the params for that method\n// Their types are automatically inferred based on the method signature\nparams: [\n\"0x123...\"\n,\ntoWei\n(\n\"100\"\n)],\n});\n// 3. Send the transaction\nconst\nresult\n=\nawait\nsendTransaction\n({\ntransaction,\naccount,\n});\nconsole.\nlog\n(\n\"Transaction hash:\"\n, result.transactionHash);\nConclusion\nYou've now learned the basics of how to use the thirdweb SDK to read and write to the blockchain. You can now start building your own applications and explore the full potential of the SDK.\nView the full SDK reference\n."},
  {"URL": "https://portal.thirdweb.com/typescript/v5/hasStoredPasskey", "content": "hasStoredPasskey\nReturns whether this device has a stored passkey ready to be used for sign-in\nSignature\nfunction\nhasStoredPasskey\n(\nclient\n:\nThirdwebClient\n,\necosystemId\n?:\n`ecosystem.${\nstring\n}`\n,\n)\n:\nPromise\n<\nboolean\n>;\nParameters\nclient\nthe thirdweb client\nType\nlet\nclient\n:\n{\nreadonly\nclientId\n:\nstring\n;\nreadonly\nsecretKey\n:\nstring\n|\nundefined\n;\n}\n&\nReadonly\n<\nClientOptions\n>;\necosystemId\noptional\nType\nlet\necosystemId\n:\n`ecosystem.${\nstring\n}`\n;\nReturns\nReturn Type\nlet\nreturnType\n:\nPromise\n<\nboolean\n>;\nwhether the device has a stored passkey"},
  {"URL": "https://portal.thirdweb.com/typescript/v5/inAppWallet", "content": "inAppWallet\nCreates an app scoped wallet for users based on various authentication methods.\nAvailable authentication methods:\nEmail\nPhone\nPasskey\nGoogle\nApple\nFacebook\nDiscord\nFarcaster\nCan also be configured to use Account Abstraction to directly connect to a ERC4337 smart account based on those authentication methods.\nExample\nLogin with socials\nimport\n{ inAppWallet }\nfrom\n\"thirdweb/wallets\"\n;\nconst\nwallet\n=\ninAppWallet\n();\nconst\naccount\n=\nawait\nwallet.\nconnect\n({\nclient,\nchain,\nstrategy:\n\"google\"\n,\n});\nView all available social auth methods\nLogin with email\nimport\n{\ninAppWallet,\npreAuthenticate,\n}\nfrom\n\"thirdweb/wallets/in-app\"\n;\nconst\nwallet\n=\ninAppWallet\n();\n// sends a verification code to the provided email\nawait\npreAuthenticate\n({\nclient,\nstrategy:\n\"email\"\n,\nemail:\n\"\n[email protected]\n\"\n,\n});\n// login with the verification code\nconst\naccount\n=\nawait\nwallet.\nconnect\n({\nclient,\nchain,\nstrategy:\n\"email\"\n,\nemail:\n\"\n[email protected]\n\"\n,\nverificationCode:\n\"123456\"\n,\n});\nLogin with SIWE\nimport\n{ inAppWallet, createWallet }\nfrom\n\"thirdweb/wallets\"\n;\nconst\nrabby\n=\ncreateWallet\n(\n\"io.rabby\"\n);\nconst\ninAppWallet\n=\ninAppWallet\n();\nconst\naccount\n=\nawait\ninAppWallet.\nconnect\n({\nstrategy:\n\"wallet\"\n,\nchain: mainnet,\nwallet: rabby,\nclient:\nMY_CLIENT\n,\n});\nLogin with phone number\nimport\n{\ninAppWallet,\npreAuthenticate,\n}\nfrom\n\"thirdweb/wallets/in-app\"\n;\nconst\nwallet\n=\ninAppWallet\n();\n// sends a verification code to the provided phone number\nawait\npreAuthenticate\n({\nclient,\nstrategy:\n\"phone\"\n,\nphoneNumber:\n\"+1234567890\"\n,\n});\n// login with the verification code\nconst\naccount\n=\nawait\nwallet.\nconnect\n({\nclient,\nchain,\nstrategy:\n\"phone\"\n,\nhoneNumber:\n\"+1234567890\"\n,\nverificationCode:\n\"123456\"\n,\n});\nLogin with passkey\nimport\n{\ninAppWallet,\nhasStoredPasskey,\n}\nfrom\n\"thirdweb/wallets/in-app\"\n;\nconst\nwallet\n=\ninAppWallet\n();\nconst\nwallet\n=\ninAppWallet\n();\nconst\nhasPasskey\n=\nawait\nhasStoredPasskey\n(client);\nawait\nwallet.\nconnect\n({\nclient,\nstrategy:\n\"passkey\"\n,\ntype: hasPasskey\n?\n\"sign-in\"\n:\n\"sign-up\"\n,\n});\nEnable smart accounts and sponsor gas for your users:\nimport\n{ inAppWallet }\nfrom\n\"thirdweb/wallets\"\n;\nimport\n{ sepolia }\nfrom\n\"thirdweb/chains\"\n;\nconst\nwallet\n=\ninAppWallet\n({\nsmartAccount: {\nchain: sepolia,\nsponsorGas:\ntrue\n,\n},\n});\n// account will be a smart account with sponsored gas enabled\nconst\naccount\n=\nawait\nwallet.\nconnect\n({\nclient,\nchain,\nstrategy:\n\"google\"\n,\n});\nSpecify a logo for your login page (Connect UI)\nimport\n{ inAppWallet }\nfrom\n\"thirdweb/wallets\"\n;\nconst\nwallet\n=\ninAppWallet\n({\nmetadata: {\nimage: {\nsrc:\n\"https://example.com/logo.png\"\n,\nalt:\n\"My logo\"\n,\nwidth:\n100\n,\nheight:\n100\n,\n},\n},\n});\nHide the ability to export the private key within the Connect Modal UI\nimport\n{ inAppWallet }\nfrom\n\"thirdweb/wallets\"\n;\nconst\nwallet\n=\ninAppWallet\n({\nhidePrivateKeyExport:\ntrue\n,\n});\nOpen the Oauth window in the same tab\nBy default, the Oauth window will open in a popup window. You can change this behavior by setting the\nauth.mode\noption to\n\"redirect\"\n.\nimport\n{ inAppWallet }\nfrom\n\"thirdweb/wallets\"\n;\nconst\nwallet\n=\ninAppWallet\n({\nauth: {\nmode:\n\"redirect\"\n,\n},\n});\nSignature\nfunction\ninAppWallet\n(\ncreateOptions\n?:\nInAppWalletCreationOptions\n,\n)\n:\nWallet\n<\n\"inApp\"\n>;\nParameters\ncreateOptions\noptional\nconfiguration options\nRefer to\nInAppWalletCreationOptions\nto see the available options.\nType\nlet\ncreateOptions\n:\n|\n{\nauth\n?:\n{\nmode\n?:\n\"popup\"\n|\n\"redirect\"\n|\n\"window\"\n;\noptions\n:\nArray\n<\nInAppWalletAuth\n>;\npasskeyDomain\n?:\nstring\n;\nredirectUrl\n?:\nstring\n;\n};\nhidePrivateKeyExport\n?:\nboolean\n;\nmetadata\n?:\n{\nimage\n?:\n{\nalt\n?:\nstring\n;\nheight\n?:\nnumber\n;\nsrc\n:\nstring\n;\nwidth\n?:\nnumber\n;\n};\n};\npartnerId\n?:\nstring\n;\nsmartAccount\n?:\nSmartWalletOptions\n;\n}\n|\nundefined\n;\nReturns\nReturn Type\nlet\nreturnType\n:\nWallet\n<\n\"inApp\"\n>;\nThe created in-app wallet."},
  {"URL": "https://portal.thirdweb.com/typescript/v5/injectedProvider", "content": "injectedProvider\nGet Injected Provider for given wallet by passing a wallet ID (rdns) using\nEIP-6963\nProvider Discovery.\nExample\nimport\n{ injectedProvider }\nfrom\n\"thirdweb/wallets\"\n;\nconst\nmetamaskProvider\n=\ninjectedProvider\n(\n\"io.metamask\"\n);\nif\n(metamaskProvider) {\nconsole.\nlog\n(\n\"Metamask is installed\"\n);\n}\nSignature\nfunction\ninjectedProvider\n(\nwalletId\n:\nWalletId\n)\n:\nEthereum\n|\nundefined\n;\nParameters\nwalletId\nThe Wallet Id (rdns) to check.\nType\nlet\nwalletId\n:\n|\n\"walletConnect\"\n|\n\"inApp\"\n|\n\"embedded\"\n|\n\"smart\"\n|\n\"adapter\"\n|\nEcosystemWalletId\n|\nWCSupportedWalletIds\n|\nInjectedSupportedWalletIds\n;\nReturns\nReturn Type\nlet\nreturnType\n:\nEthereum\n|\nundefined\n;\nThe details of the Injected Provider if it exists.\nundefined\notherwise."},
  {"URL": "https://portal.thirdweb.com/typescript/v5/parseErc6492Signature", "content": "parseErc6492Signature\nExample\nimport\n{ parseErc6492Signature }\nfrom\n\"thirdweb/auth\"\n;\nconst\nparsedSignature\n=\nparseErc6492Signature\n(\n\"0x1234567890123456789012345678901234567890\"\n,\n);\nSignature\nfunction\nparseErc6492Signature\n(\nsignature\n:\n`0x${\nstring\n}`\n,\n)\n:\nParseErc6492SignatureReturnType\n;\nParameters\nsignature\nThe signature to parse\nType\nlet\nsignature\n:\n`0x${\nstring\n}`\n;\nReturns\nReturn Type\nlet\nreturnType\n:\nOneOf\n<\nErc6492Signature\n|\n{\nsignature\n:\nHex\n}>;\nParseErc6492SignatureReturnType The parsed (or original) signature"},
  {"URL": "https://portal.thirdweb.com/typescript/v5/preAuthenticate", "content": "preAuthenticate\nPre-authenticates the user based on the provided authentication strategy.\nUse this function to send a verification code to the user's email or phone number.\nExample\nimport\n{ preAuthenticate }\nfrom\n\"thirdweb/wallets/in-app\"\n;\nconst\nresult\n=\nawait\npreAuthenticate\n({\nclient,\nstrategy:\n\"email\"\n,\nemail:\n\"\n[email protected]\n\"\n,\n});\nSignature\nfunction\npreAuthenticate\n(\nargs\n:\nPreAuthArgsType\n)\n:\nPromise\n<\nvoid\n>;\nParameters\nargs\nThe arguments required for pre-authentication.\nType\nlet\nargs\n:\nPreAuthArgsType\n;\nReturns\nReturn Type\nlet\nreturnType\n:\nPromise\n<\nvoid\n>;\nA promise that resolves to the pre-authentication result."},
  {"URL": "https://portal.thirdweb.com/typescript/v5/prepareContractCall", "content": "prepareContractCall\nPrepares a contract call by resolving the ABI function, parameters and encoded data. Optionally specify other properties such as value or gas price.\nExample\nUsage with a human-readable method signature:\nimport\n{ prepareContractCall }\nfrom\n\"thirdweb\"\n;\nconst\ntransaction\n=\nprepareContractCall\n({\ncontract,\nmethod:\n\"function transfer(address to, uint256 value)\"\n,\nparams: [to, value],\n});\nUsage with explicit gas price and/or value:\nimport\n{ prepareContractCall }\nfrom\n\"thirdweb\"\n;\nimport\n{ toWei }\nfrom\n\"thirdweb/utils\"\n;\nconst\ntransaction\n=\nprepareContractCall\n({\ncontract,\nmethod:\n\"function transfer(address to, uint256 value)\"\n,\nparams: [to, value],\nmaxFeePerGas:\n30\nn\n,\nmaxPriorityFeePerGas:\n1\nn\n,\nvalue:\ntoWei\n(\n\"0.01\"\n),\n});\nUsage with a JSON ABI function object:\nimport\n{ prepareContractCall }\nfrom\n\"thirdweb\"\n;\nconst\ntransaction\n=\nprepareContractCall\n({\ncontract,\nmethod: {\nname:\n\"transfer\"\n,\ntype:\n\"function\"\n,\ninputs: [\n{ name:\n\"to\"\n, type:\n\"address\"\n},\n{ name:\n\"value\"\n, type:\n\"uint256\"\n},\n],\noutputs: [],\nstateMutability:\n\"payable\"\n,\n},\nparams: [to, value],\n});\nUsage with the ABI defined on the contract:\nimport\n{ getContract, prepareContractCall }\nfrom\n\"thirdweb\"\n;\nconst\ncontract\n=\ngetContract\n({\n...\n,\n// chain, address, client\nabi: [\n...\n]\n// ABI with a \"transfer\" method\n});\nconst\ntransaction\n=\nprepareContractCall\n({\ncontract,\nmethod:\n\"transfer\"\n,\n// <- this gets inferred from the contract\nparams: [to, value],\n});\nPassing extra call data to the transaction\nimport\n{ getContract, prepareContractCall }\nfrom\n\"thirdweb\"\n;\nconst\ncontract\n=\ngetContract\n({\n...\n,\n// chain, address, client\n});\nconst\ntransaction\n=\nprepareContractCall\n({\ncontract,\nmethod:\n\"function transfer(address to, uint256 value)\"\n,\nparams: [\n...\n],\n// The extra call data MUST be encoded to hex before passing\nextraCallData:\n\"0x.......\"\n});\nSignature\nfunction\nprepareContractCall\n(\noptions\n:\nPrepareContractCallOptions\n<\nTAbi\n,\nTMethod\n,\nTPreparedMethod\n>,\n)\n:\nPreparedTransaction\n<\nTAbi\n,\nParseMethod\n<\nTAbi\n,\nTMethod\n>,\nPrepareTransactionOptions\n>;\nParameters\noptions\nThe options for preparing the contract call.\nType\nlet\noptions\n:\nPrepareContractCallOptions\n<\nTAbi\n,\nTMethod\n,\nTPreparedMethod\n>;\nReturns\nReturn Type\nlet\nreturnType\n:\nPreparedTransaction\n<\nTAbi\n,\nParseMethod\n<\nTAbi\n,\nTMethod\n>,\nPrepareTransactionOptions\n>;\nA promise that resolves to the prepared transaction."},
  {"URL": "https://portal.thirdweb.com/typescript/v5/prepareEvent", "content": "prepareEvent\nPrepares an event by parsing the signature, generating the event hash, and encoding the event topics.\nExample\nimport\n{ prepareEvent }\nfrom\n\"thirdweb\"\n;\nconst\nmyEvent\n=\nprepareEvent\n({\nsignature:\n\"event MyEvent(uint256 myArg)\"\n,\n});\nSignature\nfunction\nprepareEvent\n(\noptions\n:\nPrepareEventOptions\n<\nTSignature\n>,\n)\n:\nPreparedEvent\n<\nParseEvent\n<\nTSignature\n>>;\nParameters\noptions\nThe options for preparing the event.\nType\nlet\noptions\n:\nPrepareEventOptions\n<\nTSignature\n>;\nReturns\nReturn Type\nlet\nreturnType\n:\nPreparedEvent\n<\nParseEvent\n<\nTSignature\n>>;\nThe prepared event object."},
  {"URL": "https://portal.thirdweb.com/typescript/v5/prepareTransaction", "content": "prepareTransaction\nPrepares a transaction with the given options.\nExample\nimport\n{ prepareTransaction, toWei }\nfrom\n\"thirdweb\"\n;\nimport\n{ ethereum }\nfrom\n\"thirdweb/chains\"\n;\nconst\ntransaction\n=\nprepareTransaction\n({\nto:\n\"0x1234567890123456789012345678901234567890\"\n,\nchain: ethereum,\nclient: thirdwebClient,\nvalue:\ntoWei\n(\n\"1.0\"\n),\ngasPrice:\n30\nn\n,\n});\nSignature\nfunction\nprepareTransaction\n(\noptions\n:\nPrepareTransactionOptions\n,\ninfo\n?:\nAdditional\n<\nabi\n,\nabiFn\n>,\n)\n:\nPreparedTransaction\n<\nabi\n,\nabiFn\n,\nPrepareTransactionOptions\n>;\nParameters\noptions\nThe options for preparing the transaction.\nType\nlet\noptions\n:\n{\nchain\n:\nChain\n;\nclient\n:\nThirdwebClient\n;\n}\n&\nPromisedObject\n<\nOmit\n<\nStaticPrepareTransactionOptions\n,\n\"chain\"\n|\n\"client\"\n>\n>;\ninfo\noptional\nAdditional information about the ABI function.\nType\nlet\ninfo\n:\nAdditional\n<\nabi\n,\nabiFn\n>;\nReturns\nReturn Type\nlet\nreturnType\n:\nPreparedTransaction\n<\nabi\n,\nabiFn\n,\nPrepareTransactionOptions\n>;\nThe prepared transaction."},
  {"URL": "https://portal.thirdweb.com/typescript/v5/privateKeyToAccount", "content": "privateKeyToAccount\nGet an\nAccount\nobject from a private key.\nExample\nimport\n{ privateKeyToAccount }\nfrom\n\"thirdweb/wallets\"\n;\nconst\nwallet\n=\nprivateKeyToAccount\n({\nclient,\nprivateKey:\n\"...\"\n,\n});\nSignature\nfunction\nprivateKeyToAccount\n(\noptions\n:\nPrivateKeyToAccountOptions\n,\n)\n:\nAccount\n;\nParameters\noptions\nThe options for\nprivateKeyToAccount\nRefer to the type\nPrivateKeyToAccountOptions\nType\nlet\noptions\n:\n{\nclient\n:\nThirdwebClient\n;\nprivateKey\n:\nstring\n};\nReturns\nReturn Type\nlet\nreturnType\n:\n{\naddress\n:\nAddress\n;\nestimateGas\n?:\n(\ntx\n:\nPreparedTransaction\n)\n=>\nPromise\n<\nbigint\n>;\nonTransactionRequested\n?:\n(\ntransaction\n:\nPreparedTransaction\n<\nany\n>,\n)\n=>\nPromise\n<\nvoid\n>;\nsendBatchTransaction\n?:\n(\ntxs\n:\nArray\n<\nSendTransactionOption\n>,\n)\n=>\nPromise\n<\nSendTransactionResult\n>;\nsendRawTransaction\n?:\n(\ntx\n:\nSendRawTransactionOptions\n,\n)\n=>\nPromise\n<\nSendTransactionResult\n>;\nsendTransaction\n:\n(\ntx\n:\nSendTransactionOption\n,\n)\n=>\nPromise\n<\nSendTransactionResult\n>;\nsignMessage\n:\n({\nmessage\n,\n}\n:\n{\nmessage\n:\nSignableMessage\n;\n})\n=>\nPromise\n<\nHex\n>;\nsignTransaction\n?:\n(\ntx\n:\nTransactionSerializable\n)\n=>\nPromise\n<\nHex\n>;\nsignTypedData\n:\n(\n_typedData\n:\nTypedDataDefinition\n<\ntypedData\n,\nprimaryType\n>,\n)\n=>\nPromise\n<\nHex\n>;\nwatchAsset\n?:\n(\nasset\n:\nWatchAssetParams\n)\n=>\nPromise\n<\nboolean\n>;\n};\nThe\nAccount\nobject that represents the private key"},
  {"URL": "https://portal.thirdweb.com/typescript/v5/readContract", "content": "readContract\nReads state from a deployed smart contract.\nYou can use raw read calls or read\nextensions\nto read from a contract.\nExample\nUsing a contract read extension\nimport\n{ getContract }\nfrom\n\"thirdweb\"\n;\nimport\n{ sepolia }\nfrom\n\"thirdweb/chains\"\n;\nimport\n{ useReadContract }\nfrom\n\"thirdweb/react\"\n;\nimport\n{ getOwnedNFTs } form\n\"thirdweb/extensions/erc721\"\n;\nconst contract = getContract({\nclient,\naddress: \"0x...\",\nchain: sepolia,\n});\nconst { data, isLoading } = useReadContract(getOwnedNFTs, { contract, owner: address });\nUsing a raw contract call\nimport\n{ getContract }\nfrom\n\"thirdweb\"\n;\nimport\n{ sepolia }\nfrom\n\"thirdweb/chains\"\n;\nimport\n{ useReadContract }\nfrom\n\"thirdweb/react\"\n;\nconst\ncontract\n=\ngetContract\n({\nclient,\naddress:\n\"0x...\"\n,\nchain: sepolia,\n});\nconst\n{\ndata\n,\nisLoading\n}\n=\nuseReadContract\n({\ncontract,\nmethod:\n\"function tokenURI(uint256 tokenId) returns (string)\"\n}),\nparams\n:\n[\n1\nn\n],\n});\nUsing\nresolveMethod\nimport\n{ getContract, resolveMethod }\nfrom\n\"thirdweb\"\n;\nimport\n{ sepolia }\nfrom\n\"thirdweb/chains\"\n;\nimport\n{ useReadContract }\nfrom\n\"thirdweb/react\"\n;\nconst\ncontract\n=\ngetContract\n({\nclient,\naddress:\n\"0x...\"\n,\nchain: sepolia,\n});\nconst\n{\ndata\n,\nisLoading\n}\n=\nuseReadContract\n({\ncontract,\nmethod:\nresolveMethod\n(\n\"tokenURI\"\n),\nparams: [\n1\nn\n],\n});\nSignature\nfunction\nreadContract\n(\noptions\n:\nReadContractOptions\n<\nTAbi\n,\nTMethod\n,\nTPreparedMethod\n>,\n)\n:\nPromise\n<\nReadContractResult\n<\nTPreparedMethod\n[\n2\n]>>;\nParameters\noptions\nThe transaction options.\nType\nlet\noptions\n:\nReadContractOptions\n<\nTAbi\n,\nTMethod\n,\nTPreparedMethod\n>;\nReturns\nReturn Type\nlet\nreturnType\n:\noutputs\nextends\n{\nlength\n:\n0\n}\n?\nnever\n:\noutputs\nextends\n{\nlength\n:\n1\n}\n?\nAbiParametersToPrimitiveTypes\n<\noutputs\n>[\n0\n]\n:\nAbiParametersToPrimitiveTypes\n<\noutputs\n>;\nA promise that resolves with the result of the read call."},
  {"URL": "https://portal.thirdweb.com/typescript/v5/refreshJWT", "content": "refreshJWT\nRefreshes a JSON Web Token (JWT) by encoding a new payload with updated expiration time.\nExample\nimport\n{ refreshJWT }\nfrom\n\"thirdweb/utils\"\n;\nconst\njwt\n=\nawait\nrefreshJWT\n({\naccount,\njwt,\nexpirationTime:\n1000\n*\n60\n*\n60\n,\n});\nSignature\nfunction\nrefreshJWT\n(\noptions\n:\nRefreshJWTParams\n)\n:\nPromise\n<\nstring\n>;\nParameters\noptions\nThe options for refreshing the JWT.\nType\nlet\noptions\n:\n{\naccount\n:\nAccount\n;\nexpirationTime\n?:\nnumber\n;\njwt\n:\nstring\n;\n};\nReturns\nReturn Type\nlet\nreturnType\n:\nPromise\n<\nstring\n>;\nA Promise that resolves to the refreshed JWT."},
  {"URL": "https://portal.thirdweb.com/typescript/v5/resolveContractAbi", "content": "resolveContractAbi\nResolves the ABI (Application Binary Interface) for a given contract.\nIf the ABI is already cached, it returns the cached value.\nOtherwise, it tries to resolve the ABI from the contract's API.\nIf that fails, it resolves the ABI from the contract's bytecode.\nExample\nimport\n{ createThirdwebClient, getContract }\nfrom\n\"thirdweb\"\n;\nimport\n{ resolveContractAbi }\nfrom\n\"thirdweb/contract\"\n;\nimport\n{ ethereum }\nfrom\n\"thirdweb/chains\"\n;\nconst\nclient\n=\ncreateThirdwebClient\n({ clientId:\n\"...\"\n});\nconst\nmyContract\n=\ngetContract\n({\nclient,\naddress:\n\"...\"\n,\nchain: ethereum,\n});\nconst\nabi\n=\nawait\nresolveContractAbi\n(myContract);\nSignature\nfunction\nresolveContractAbi\n(\ncontract\n:\nReadonly\n<\nContractOptions\n<\nabi\n>>,\ncontractApiBaseUrl\n:\nstring\n,\n)\n:\nPromise\n<\nabi\n>;\nParameters\ncontract\nThe contract for which to resolve the ABI.\nType\nlet\ncontract\n:\nReadonly\n<\nContractOptions\n<\nabi\n>>;\ncontractApiBaseUrl\nThe base URL of the contract API. Defaults to \"https://contract.thirdweb.com/abi\".\nType\nlet\ncontractApiBaseUrl\n:\nstring\n;\nReturns\nReturn Type\nlet\nreturnType\n:\nPromise\n<\nabi\n>;\nA promise that resolves to the ABI of the contract."},
  {"URL": "https://portal.thirdweb.com/typescript/v5/resolveMethod", "content": "resolveMethod\nResolves and returns the ABI function with the specified method name.\nThrows an error if the function is not found in the ABI.\nExample\nimport\n{ resolveMethod, prepareContractCall }\nfrom\n\"thirdweb\"\n;\nconst\ntx\n=\nprepareContractCall\n({\ncontract,\n// automatically resolves the necessary abi to encode the transaction\nmethod:\nresolveMethod\n(\n\"transfer\"\n),\n// however there is no type completion for params in this case (as the resolution is async and happens at runtime)\nparams: [to, value],\n});\nSignature\nfunction\nresolveMethod\n(\nmethod\n:\nstring\n,\n)\n:\n(\ncontract\n:\nReadonly\n<\nContractOptions\n<[]>>)\n=>\nPromise\n<\nabiFn\n>;\nParameters\nmethod\nThe name of the method to resolve.\nType\nlet\nmethod\n:\nstring\n;\nReturns\nReturn Type\nlet\nreturnType\n:\n(\ncontract\n:\nReadonly\n<\nContractOptions\n<[]>>,\n)\n=>\nPromise\n<\nabiFn\n>;\nThe resolved ABI function."},
  {"URL": "https://portal.thirdweb.com/typescript/v5/resolveScheme", "content": "resolveScheme\nResolves the scheme of a given URI and returns the corresponding URL.\nIf the URI starts with \"ipfs://\", it constructs a URL using the IPFS client ID and the IPFS gateway.\nIf the URI starts with \"http\", it returns the URI as is.\nOtherwise, it throws an error indicating an invalid URI scheme.\nExample\nimport\n{ resolveScheme }\nfrom\n\"thirdweb/storage\"\n;\nconst\nurl\n=\nresolveScheme\n({\nclient,\nuri:\n\"ipfs://Qm...\"\n,\n});\nSignature\nfunction\nresolveScheme\n(\noptions\n:\nResolveSchemeOptions\n)\n:\nstring\n;\nParameters\noptions\nThe options object containing the URI and the IPFS client.\nType\nlet\noptions\n:\n{\nclient\n:\nThirdwebClient\n;\nuri\n:\nstring\n};\nReturns\nReturn Type\nlet\nreturnType\n:\nstring\n;\nThe resolved URL."},
  {"URL": "https://portal.thirdweb.com/typescript/v5/sendAndConfirmTransaction", "content": "sendAndConfirmTransaction\nSends a transaction using the provided wallet.\nExample\nBasic usage\nimport\n{ sendAndConfirmTransaction }\nfrom\n\"thirdweb\"\n;\nconst\ntransactionReceipt\n=\nawait\nsendAndConfirmTransaction\n({\naccount,\ntransaction,\n});\nGasless usage with\nthirdweb Engine\nconst\ntransactionReceipt\n=\nawait\nsendAndConfirmTransaction\n({\naccount,\ntransaction,\ngasless: {\nprovider:\n\"engine\"\n,\nrelayerUrl:\n\"https://thirdweb.engine-***.thirdweb.com/relayer/***\"\n,\nrelayerForwarderAddress:\n\"0x...\"\n,\n},\n});\nGasless usage with OpenZeppelin\nconst\ntransactionReceipt\n=\nawait\nsendAndConfirmTransaction\n({\naccount,\ntransaction,\ngasless: {\nprovider:\n\"openzeppelin\"\n,\nrelayerUrl:\n\"https://...\"\n,\nrelayerForwarderAddress:\n\"0x...\"\n,\n},\n});\nSignature\nfunction\nsendAndConfirmTransaction\n(\noptions\n:\nSendTransactionOptions\n,\n)\n:\nPromise\n<\nTransactionReceipt\n>;\nParameters\noptions\nThe options for sending the transaction.\nType\nlet\noptions\n:\n{\naccount\n:\nAccount\n;\ngasless\n:\nGaslessOptions\n;\ntransaction\n:\nPreparedTransaction\n<\nany\n>;\n};\nReturns\nReturn Type\nlet\nreturnType\n:\n{\nblobGasPrice\n?:\nquantity\n;\nblobGasUsed\n?:\nquantity\n;\nblockHash\n:\nHash\n;\nblockNumber\n:\nquantity\n;\ncontractAddress\n:\nAddress\n|\nnull\n|\nundefined\n;\ncumulativeGasUsed\n:\nquantity\n;\neffectiveGasPrice\n:\nquantity\n;\nfrom\n:\nAddress\n;\ngasUsed\n:\nquantity\n;\nlogs\n:\nArray\n<\nLog\n<\nquantity\n,\nindex\n,\nfalse\n>>;\nlogsBloom\n:\nHex\n;\nroot\n?:\nHash\n;\nstatus\n:\nstatus\n;\nto\n:\nAddress\n|\nnull\n;\ntransactionHash\n:\nHash\n;\ntransactionIndex\n:\nindex\n;\ntype\n:\ntype\n;\n};\nA promise that resolves to the confirmed transaction receipt."},
  {"URL": "https://portal.thirdweb.com/typescript/v5/sendBatchTransaction", "content": "sendBatchTransaction\nSends a batch transaction using the provided options.\nExample\nimport\n{ sendBatchTransaction }\nfrom\n\"thirdweb\"\n;\nconst\nwaitForReceiptOptions\n=\nawait\nsendBatchTransaction\n({\naccount,\ntransactions,\n});\nSignature\nfunction\nsendBatchTransaction\n(\noptions\n:\nSendBatchTransactionOptions\n,\n)\n:\nPromise\n<\nWaitForReceiptOptions\n>;\nParameters\noptions\nThe options for sending the batch transaction.\nType\nlet\noptions\n:\n{\naccount\n:\nAccount\n;\ntransactions\n:\nArray\n<\nPreparedTransaction\n>;\n};\nReturns\nReturn Type\nlet\nreturnType\n:\nPrettify\n<\nSendTransactionResult\n&\n{\nchain\n:\nChain\n;\nclient\n:\nThirdwebClient\n;\nmaxBlocksWaitTime\n?:\nnumber\n;\n}\n>;\nA promise that resolves to the options for waiting for the receipt of the first transaction in the batch."},
  {"URL": "https://portal.thirdweb.com/typescript/v5/sendTransaction", "content": "sendTransaction\nSends a transaction using the provided account.\nYou can send a transaction with a\nprepared contract call\n, a\nprepared transaction\n, or using a write\nExtension\n.\nExample\nUsing a prepared contract call\nimport\n{\nsendTransaction,\ngetContract,\nprepareContractCall,\n}\nfrom\n\"thirdweb\"\n;\nimport\n{ sepolia }\nfrom\n\"thirdweb/chains\"\n;\nconst\ncontract\n=\ngetContract\n({\naddress:\n\"0x...\"\n,\nchain: sepolia,\nclient,\n});\nconst\ntransaction\n=\nprepareContractCall\n({\ncontract,\nmethod:\n\"function transfer(address to, uint256 value)\"\n,\nparams: [to, value],\n});\nconst\n{\ntransactionHash\n}\n=\nawait\nsendTransaction\n({\naccount,\ntransaction,\n});\nUsing a write extension\nimport\n{ sendTransaction, getContract }\nfrom\n\"thirdweb\"\n;\nimport\n{ sepolia }\nfrom\n\"thirdweb/chains\"\n;\nimport\n{ mintTo }\nfrom\n\"thirdweb/extensions/erc721\"\n;\nconst\ncontract\n=\ngetContract\n({\naddress:\n\"0x...\"\n,\nchain: sepolia,\nclient,\n});\nconst\ntransaction\n=\nmintTo\n({\ncontract,\nto:\n\"0x...\"\n,\nnft: {\nname:\n\"NFT Name\"\n,\ndescription:\n\"NFT Description\"\n,\nimage:\n\"https://example.com/image.png\"\n,\n},\n});\nconst\n{\ntransactionHash\n}\n=\nawait\nsendTransaction\n({\naccount,\ntransaction,\n});\nUsing a prepared transaction\nimport\n{\nsendTransaction,\ngetContract,\nprepareTransaction,\n}\nfrom\n\"thirdweb\"\n;\nimport\n{ sepolia }\nfrom\n\"thirdweb/chains\"\n;\nconst\ncontract\n=\ngetContract\n({\naddress:\n\"0x...\"\n,\nchain: sepolia,\nclient,\n});\nconst\ntransaction\n=\nprepareTransaction\n({\ncontract,\nto:\n\"0x...\"\n,\nvalue:\ntoWei\n(\n\"0.1\"\n),\n});\nconst\n{\ntransactionHash\n}\n=\nawait\nsendTransaction\n({\naccount,\ntransaction,\n});\nGasless usage with\nthirdweb Engine\nconst\n{\ntransactionHash\n}\n=\nawait\nsendTransaction\n({\naccount,\ntransaction,\ngasless: {\nprovider:\n\"engine\"\n,\nrelayerUrl:\n\"https://thirdweb.engine-***.thirdweb.com/relayer/***\"\n,\nrelayerForwarderAddress:\n\"0x...\"\n,\n},\n});\nGasless usage with OpenZeppelin\nconst\n{\ntransactionHash\n}\n=\nawait\nsendTransaction\n({\naccount,\ntransaction,\ngasless: {\nprovider:\n\"openzeppelin\"\n,\nrelayerUrl:\n\"https://...\"\n,\nrelayerForwarderAddress:\n\"0x...\"\n,\n},\n});\nSignature\nfunction\nsendTransaction\n(\noptions\n:\nSendTransactionOptions\n,\n)\n:\nPromise\n<\nWaitForReceiptOptions\n>;\nParameters\noptions\nThe options for sending the transaction.\nType\nlet\noptions\n:\n{\naccount\n:\nAccount\n;\ngasless\n:\nGaslessOptions\n;\ntransaction\n:\nPreparedTransaction\n<\nany\n>;\n};\nReturns\nReturn Type\nlet\nreturnType\n:\nPrettify\n<\nSendTransactionResult\n&\n{\nchain\n:\nChain\n;\nclient\n:\nThirdwebClient\n;\nmaxBlocksWaitTime\n?:\nnumber\n;\n}\n>;\nA promise that resolves to the transaction result."},
  {"URL": "https://portal.thirdweb.com/typescript/v5/serializeTransaction", "content": "serializeTransaction\nSerializes a legacy, EIP-1559, EIP-2930, EIP-4844, or EIP-7702 transaction object.\nExample\nimport\n{ serializeTransaction }\nfrom\n\"thirdweb\"\n;\nconst\nserializedTransaction\n=\nserializeTransaction\n({\ntransaction: {\nto:\n\"0x\"\n,\nvalue:\n0\nn\n,\n},\n});\nSignature\nfunction\nserializeTransaction\n(\noptions\n:\nSerializeTransactionOptions\n,\n)\n:\nSerializedTransactionReturnType\n<\ntransaction\n,\n_transactionType\n>;\nParameters\noptions\nThe serialization options.\nType\nlet\noptions\n:\n{\nsignature\n?:\nSignature\n;\ntransaction\n:\nTransactionSerializable\n;\n};\nReturns\nReturn Type\nlet\nreturnType\n:\nSerializedTransactionReturnType\n<\ntransaction\n,\n_transactionType\n>;\nThe serialized transaction."},
  {"URL": "https://portal.thirdweb.com/typescript/v5/shortenAddress", "content": "shortenAddress\nChecksums and formats an address if valid. Note this function does not check if the provided address is an ENS.\nExample\nimport\n{ shortenAddress }\nfrom\n\"thirdweb/utils\"\n;\nshortenAddress\n(\n\"0xa0cf798816d4b9b9866b5330eea46a18382f251e\"\n);\n//=> '0xA0Cf...251e'\nSignature\nfunction\nshortenAddress\n(\naddress\n:\nstring\n,\nlength\n:\nnumber\n)\n:\nstring\n;\nParameters\naddress\nThe address to shorten.\nType\nlet\naddress\n:\nstring\n;\nlength\nThe number of characters to keep from the start and end of the address.\nType\nlet\nlength\n:\nnumber\n;\nReturns\nReturn Type\nlet\nreturnType\n:\nstring\n;\nThe shortened address."},
  {"URL": "https://portal.thirdweb.com/typescript/v5/signLoginPayload", "content": "signLoginPayload\nSigns the login payload using the provided account.\nExample\nimport\n{ signLoginPayload }\nfrom\n\"thirdweb/auth\"\n;\nconst\n{\nsignature\n,\npayload\n}\n=\nawait\nsignLoginPayload\n({\npayload: loginPayload,\naccount: account,\n});\nSignature\nfunction\nsignLoginPayload\n(\noptions\n:\nSignLoginPayloadParams\n,\n)\n:\nPromise\n<{\npayload\n:\nLoginPayload\n;\nsignature\n:\n`0x${\nstring\n}`\n}>;\nParameters\noptions\nThe options for signing the login payload.\nType\nlet\noptions\n:\n{\naccount\n:\nAccount\n;\npayload\n:\nLoginPayload\n};\nReturns\nReturn Type\nlet\nreturnType\n:\n{\naddress\n:\nstring\n;\nchain_id\n?:\nstring\n;\ndomain\n:\nstring\n;\nexpiration_time\n:\nstring\n;\ninvalid_before\n:\nstring\n;\nissued_at\n:\nstring\n;\nnonce\n:\nstring\n;\nresources\n?:\nArray\n<\nstring\n>;\nstatement\n:\nstring\n;\nuri\n?:\nstring\n;\nversion\n:\nstring\n;\n};\nAn object containing the signature and the payload."},
  {"URL": "https://portal.thirdweb.com/typescript/v5/signTransaction", "content": "signTransaction\nSigns a transaction to be sent to a node.\nExample\nimport\n{ signTransaction }\nfrom\n\"thirdweb\"\n;\nsignTransaction\n({\ntransaction: {\n...\n},\nprivateKey:\n\"0x...\"\n,\n});\nSignature\nfunction\nsignTransaction\n(\noptions\n:\nSignTransactionOptions\n)\n:\nHex\n;\nParameters\noptions\nThe options for signing.\nType\nlet\noptions\n:\n{\nprivateKey\n:\nHex\n;\ntransaction\n:\nTransactionSerializable\n;\n};\nReturns\nReturn Type\nlet\nreturnType\n:\n`0x${\nstring\n}`\n;\nThe signed transaction as a hex string"},
  {"URL": "https://portal.thirdweb.com/typescript/v5/simulateTransaction", "content": "simulateTransaction\nSimulates the execution of a transaction.\nExample\nimport\n{ simulateTransaction }\nfrom\n\"thirdweb\"\n;\nconst\nresult\n=\nawait\nsimulateTransaction\n({\ntransaction,\n});\nSignature\nfunction\nsimulateTransaction\n(\noptions\n:\nSimulateOptions\n<\nabi\n,\nabiFn\n>,\n)\n:\nPromise\n<\nany\n>;\nParameters\noptions\nThe options for simulating the transaction.\nType\nlet\noptions\n:\nSimulateOptions\n<\nabi\n,\nabiFn\n>;\nReturns\nReturn Type\nlet\nreturnType\n:\nPromise\n<\nany\n>;\nA promise that resolves to the result of the simulation."},
  {"URL": "https://portal.thirdweb.com/typescript/v5/smartWallet", "content": "smartWallet\nCreates a ERC4337 smart wallet based on a admin account.\nSmart wallets are smart contract wallets that enable multiple benefits for users:\nSponsor gas fees for transactions\nMultiple owners\nSession keys\nBatch transactions\nPredictable addresses\nProgrammable features\nLearn more about account abstraction\nExample\nConnect to a smart wallet\nTo connect to a smart wallet, you need to provide an admin account as the\npersonalAccount\noption.\nAny wallet can be used as an admin account, including an in-app wallets.\nThe\nsponsorGas\noption is used to enable sponsored gas for transactions automatically.\nimport\n{ smartWallet, inAppWallet }\nfrom\n\"thirdweb/wallets\"\n;\nimport\n{ sepolia }\nfrom\n\"thirdweb/chains\"\n;\nimport\n{ sendTransaction }\nfrom\n\"thirdweb\"\n;\nconst\nwallet\n=\nsmartWallet\n({\nchain: sepolia,\nsponsorGas:\ntrue\n,\n// enable sponsored transactions\n});\n// any wallet can be used as an admin account\n// in this example we use an in-app wallet\nconst\nadminWallet\n=\ninAppWallet\n();\nconst\npersonalAccount\n=\nawait\nadminWallet.\nconnect\n({\nclient,\nchain: sepolia,\nstrategy:\n\"google\"\n,\n});\nconst\nsmartAccount\n=\nawait\nwallet.\nconnect\n({\nclient,\npersonalAccount,\n// pass the admin account\n});\n// sending sponsored transactions with the smartAccount\nawait\nsendTransaction\n({\naccount: smartAccount,\ntransaction,\n});\nConfiguring the smart wallet\nYou can pass options to the\nsmartWallet\nfunction to configure the smart wallet.\nimport\n{ smartWallet }\nfrom\n\"thirdweb/wallets\"\n;\nimport\n{ sepolia }\nfrom\n\"thirdweb/chains\"\n;\nconst\nwallet\n=\nsmartWallet\n({\nchain: sepolia,\nsponsorGas:\ntrue\n,\n// enable sponsored transactions\nfactoryAddress:\n\"0x...\"\n,\n// custom factory address\noverrides: {\naccountAddress:\n\"0x...\"\n,\n// override account address\naccountSalt:\n\"0x...\"\n,\n// override account salt\nentrypointAddress:\n\"0x...\"\n,\n// override entrypoint address\nerc20Paymaster: {\n...\n},\n// enable erc20 paymaster\nbundlerUrl:\n\"https://...\"\n,\n// override bundler url\npaymaster\n: (\nuserOp\n)\n=>\n{\n...\n},\n// override paymaster\n...\n}\n});\nRefer to\nSmartWalletOptions\nfor more details.\nSignature\nfunction\nsmartWallet\n(\ncreateOptions\n:\nSmartWalletOptions\n,\n)\n:\nWallet\n<\n\"smart\"\n>;\nParameters\ncreateOptions\nThe options for creating the wallet.\nRefer to\nSmartWalletCreationOptions\nfor more details.\nType\nlet\ncreateOptions\n:\nPrettify\n<\n{\nchain\n:\nChain\n;\nfactoryAddress\n?:\nstring\n;\noverrides\n?:\n{\naccountAddress\n?:\nstring\n;\naccountSalt\n?:\nstring\n;\nbundlerUrl\n?:\nstring\n;\ncreateAccount\n?:\n(\nfactoryContract\n:\nThirdwebContract\n,\n)\n=>\nPreparedTransaction\n;\nentrypointAddress\n?:\nstring\n;\nerc20Paymaster\n?:\n{\naddress\n:\nstring\n;\ntoken\n:\nstring\n};\nexecute\n?:\n(\naccountContract\n:\nThirdwebContract\n,\ntransaction\n:\nSendTransactionOption\n,\n)\n=>\nPreparedTransaction\n;\nexecuteBatch\n?:\n(\naccountContract\n:\nThirdwebContract\n,\ntransactions\n:\nArray\n<\nSendTransactionOption\n>,\n)\n=>\nPreparedTransaction\n;\ngetAccountNonce\n?:\n(\naccountContract\n:\nThirdwebContract\n,\n)\n=>\nPromise\n<\nbigint\n>;\npaymaster\n?:\n(\nuserOp\n:\nUserOperationV06\n|\nUserOperationV07\n,\n)\n=>\nPromise\n<\nPaymasterResult\n>;\npredictAddress\n?:\n(\nfactoryContract\n:\nThirdwebContract\n,\n)\n=>\nPromise\n<\nstring\n>;\n};\n}\n&\n({\ngasless\n:\nboolean\n}\n|\n{\nsponsorGas\n:\nboolean\n})\n>;\nReturns\nReturn Type\nlet\nreturnType\n:\nWallet\n<\n\"smart\"\n>;\nThe created smart wallet."},
  {"URL": "https://portal.thirdweb.com/typescript/v5/storage", "content": "IPFS Storage\nThe thirdweb SDK comes built-in with an IPFS uploader and downloader.\nDownload from IPFS\nimport\n{ download }\nfrom\n\"thirdweb/storage\"\n;\nconst\nfile\n=\nawait\ndownload\n({\nclient,\nuri:\n\"ipfs://Qm...\"\n,\n});\nYou can view all of the configuration options in the\nfull reference\n.\nUpload to IPFS\nimport\n{ upload }\nfrom\n\"thirdweb/storage\"\n;\nconst\nuris\n=\nawait\nupload\n({\nclient,\nfiles: [\nnew\nFile\n([\n\"hello world\"\n],\n\"hello.txt\"\n)],\n});\nYou can view all of the configuration options in the\nfull reference\n."},
  {"URL": "https://portal.thirdweb.com/typescript/v5/supported-wallets", "content": "Supported Wallets\nthirdweb first-party wallets\nSmart Wallet\nIn App Wallet\nOther wallets\nWallet\nID\nMetaMask\n\"io.metamask\"\nTrust Wallet\n\"com.trustwallet.app\"\nOKX Wallet\n\"com.okex.wallet\"\nBitget Wallet\n\"com.bitget.web3\"\nBinance Web3 Wallet\n\"com.binance\"\nUniswap Wallet\n\"org.uniswap\"\nSafePal\n\"com.safepal\"\nRainbow\n\"me.rainbow\"\nBybit Wallet\n\"com.bybit\"\nTokenPocket\n\"pro.tokenpocket\"\nLedger Live\n\"com.ledger\"\nTimeless X\n\"xyz.timelesswallet\"\nSafe\n\"global.safe\"\nZerion\n\"io.zerion.wallet\"\nRobinhood Wallet\n\"com.robinhood.wallet\"\n1inch Wallet\n\"io.1inch.wallet\"\nCrypto.com | DeFi Wallet\n\"com.crypto\"\nExodus\n\"com.exodus\"\nArgent\n\"xyz.argent\"\nimToken\n\"im.token\"\nZengo Wallet\n\"com.zengo\"\nBlockchain.com\n\"com.blockchain\"\nKraken Wallet\n\"com.kraken\"\nMEW wallet\n\"com.mewwallet\"\nMathWallet\n\"org.mathwallet\"\nAlphaWallet\n\"com.alphawallet\"\nUnstoppable Domains\n\"com.unstoppabledomains\"\nKEYRING PRO\n\"app.keyring\"\nFrontier\n\"xyz.frontier.wallet\"\nOmni\n\"app.omni\"\nLOBSTR Wallet\n\"co.lobstr\"\nONTO\n\"app.onto\"\nObvious\n\"technology.obvious\"\nFireblocks\n\"com.fireblocks\"\nAmbire Wallet\n\"com.ambire\"\nBridge Wallet\n\"com.mtpelerin\"\nInternet Money Wallet\n\"io.internetmoney\"\nNOW Wallet\n\"app.walletnow\"\nBitcoin.com Wallet\n\"com.bitcoin\"\nαU wallet\n\"io.alpha-u.wallet.web\"\nCoin98 Super Wallet\n\"com.coin98\"\nABC Wallet\n\"io.myabcwallet\"\nArculus Wallet\n\"co.arculus\"\nOpera Crypto Browser\n\"com.opera\"\nChain\n\"com.chain\"\nHuddln\n\"io.huddln\"\nVerso\n\"com.get-verso\"\nHaHa\n\"me.haha\"\nModular Wallet Prod\n\"pk.modular\"\nKelp\n\"org.kelp\"\nCling Wallet\n\"io.clingon\"\nBroearn Wallet\n\"com.broearn\"\nCoinomi\n\"com.coinomi\"\nRipio Portal\n\"com.ripio\"\nSabay Wallet App\n\"com.sabay.wallet\"\nTokoin | My-T Wallet\n\"io.tokoin\"\nFncy Mobile Wallet\n\"world.fncy\"\nCopiosa\n\"io.copiosa\"\nLibera\n\"com.liberawallet\"\nCerthis\n\"io.certhis\"\nBurrito\n\"com.burritowallet\"\nAncrypto\n\"io.ancrypto\"\nCVL Wallet\n\"network.cvl\"\nCypher Wallet\n\"io.cypherwallet\"\nEnjin Wallet\n\"io.enjin\"\nEssentials\n\"io.trinity-tech\"\nEverspace\n\"app.everspace\"\nKriptomat\n\"io.kriptomat\"\nOxalus Wallet\n\"io.oxalus\"\nTheta Wallet\n\"org.thetatoken\"\nLeap Cosmos Wallet\n\"io.leapwallet\"\nISLAMIwallet\n\"finance.islamicoin\"\nCOCA Wallet\n\"xyz.coca\"\nMonarch Wallet\n\"com.monarchwallet\"\nFILWallet\n\"co.filwallet\"\nValora\n\"com.valoraapp\"\nCoinCircle\n\"com.coincircle\"\nSnowball\n\"money.snowball\"\nParaSwap Wallet\n\"io.paraswap\"\nSahal Wallet\n\"network.mrhb\"\nApolloX\n\"com.apollox\"\nEnno Wallet\n\"com.ennowallet\"\nNitrogen Wallet\n\"org.nitrogen\"\nLoopring\n\"io.loopring.wallet\"\nBeeWallet\n\"com.bee\"\nLocalTrade Wallet\n\"cc.localtrade.lab\"\nXcapit\n\"com.xcapit\"\nSafematrix\n\"io.safematrix\"\nNeon Wallet\n\"com.neonwallet\"\nSequence Wallet\n\"xyz.sequence\"\nLinen\n\"app.linen\"\nNabox\n\"io.nabox\"\nSpatium\n\"net.spatium\"\nCryptnox Wallet\n\"com.cryptnox\"\nID Pocket\n\"com.rktechworks\"\nAssure\n\"pro.assure\"\nFlooz\n\"trade.flooz.wallet\"\nKeplr\n\"app.keplr\"\nCrossmint\n\"com.crossmint\"\npier\n\"com.pierwallet\"\nCore\n\"app.core\"\nKeeper\n\"app.keeper-wallet\"\nD'CENT Wallet\n\"com.dcentwallet\"\nPaper\n\"com.withpaper\"\nKlever Wallet\n\"finance.klever\"\nEdge Wallet\n\"app.edge\"\nNeftiWallet\n\"com.neftipedia\"\nGoldBit\n\"io.goldbit\"\nCoingrig\n\"com.coingrig\"\nXFUN Wallet\n\"io.xfun\"\nRiceWallet\n\"io.ricewallet\"\nAncrypto Wallet\n\"com.antiersolutions\"\nOkse Wallet\n\"io.okse\"\nAktionariat\n\"com.aktionariat\"\niToken Wallet\n\"com.itoken\"\nZelus\n\"io.zelus\"\nTalk+\n\"org.talkapp\"\nCard Wallet\n\"com.cardstack\"\nPayBolt\n\"com.paybolt\"\nArianee Wallet\n\"org.arianee\"\nSlavi Wallet\n\"io.slavi\"\nPlasma Wallet\n\"com.plasma-wallet\"\nDefiant\n\"tech.defiantapp\"\nStrikeX Wallet\n\"io.tradestrike\"\nAvacus\n\"cc.avacus\"\nByteBank\n\"org.bytebank\"\nCoolWallet\n\"com.coolbitx.cwsapp\"\nOpto Wallet\n\"com.optowallet\"\nTK Finance\n\"network.trustkeys\"\nBee Wallet\n\"app.beewallet\"\nMDAO Wallet\n\"io.ttmwallet\"\nPLTwallet\n\"io.pltwallet\"\nhelix id\n\"io.helixid\"\nAirGap Wallet\n\"it.airgap\"\nQubic Wallet\n\"app.qubic.wallet\"\nHoldstation Wallet\n\"com.holdstation\"\nSaakuru All-in-One crypto App\n\"com.saakuru.app\"\n3S Wallet\n\"com.3swallet\"\nPayperless\n\"com.payperless\"\nMinerva Wallet\n\"digital.minerva\"\nVolt: DeFi\n\"finance.voltage\"\nLif3 Wallet\n\"com.lif3\"\nShinobi-Wallet\n\"net.shinobi-wallet\"\nKryptoGO Wallet\n\"com.kryptogo\"\nFeral File\n\"com.feralfile.app\"\nBifrost Wallet\n\"com.bifrostwallet\"\nNufinetes\n\"com.nufinetes\"\nWallet 3\n\"io.wallet3\"\nAbra Wallet\n\"com.abra\"\niMe\n\"app.imem\"\nPREMA Wallet\n\"com.premanft\"\nOneKey\n\"so.onekey.app.wallet\"\nSlingshot Wallet\n\"finance.slingshot\"\nKriptonio\n\"com.kriptonio\"\nBitski\n\"com.brave.wallet\"\nStreakk Wallet\n\"io.streakk\"\nSaitaPro\n\"com.saitamatoken\"\nFlow Wallet\n\"com.flow.core\"\nHippo Wallet\n\"io.hippowallet\"\nCosmostation\n\"io.cosmostation\"\nBitizen\n\"org.bitizen\"\nBlocto\n\"io.blocto\"\nHUMBL WALLET\n\"com.humbl\"\nPassPay Wallet\n\"io.passpay\"\nUltimate\n\"app.ultimate\"\nMe Wallet\n\"me.astrox\"\nTHORWallet\n\"org.thorwallet\"\nFizz\n\"app.fizzwallet\"\nStickey Wallet\n\"app.stickey\"\nKlip\n\"com.klipwallet\"\nCoinStats\n\"app.coinstats\"\nLikerLand App\n\"land.liker\"\nKrystal\n\"app.krystal\"\nPillar\n\"fi.pillar\"\nHARTi Wallet\n\"io.harti\"\nStasis Wallet\n\"net.stasis\"\nNova Wallet\n\"io.novawallet\"\nDTTD\n\"io.dttd\"\nFoxWallet\n\"com.foxwallet\"\nHAQQ Wallet\n\"network.haqq\"\ntomiPAY\n\"com.tomi\"\nSubWallet\n\"app.subwallet\"\nOkto\n\"tech.okto\"\nCatecoin Wallet\n\"app.catecoin\"\nUKISS Hub\n\"io.ukiss\"\nTellaw Wallet\n\"com.tellaw\"\nTangem Wallet\n\"com.tangem\"\nCallback\n\"is.callback\"\nSA ASSISTANT\n\"io.summonersarena\"\nXellar\n\"co.xellar\"\nTalken Wallet\n\"io.talken\"\nU2U Wallet\n\"xyz.uniultra.wallet\"\nOzoneWallet\n\"io.ozonewallet\"\nTidus Wallet\n\"com.tiduswallet\"\nImpact Wallet\n\"world.ixo\"\nZelcore\n\"io.zelcore\"\nDOSI Vault\n\"world.dosi.vault\"\nWOW EARN\n\"com.ullapay\"\nELLIPAL\n\"com.ellipal\"\nUnstoppable Wallet\n\"money.unstoppable\"\nAurora Pass\n\"dev.auroracloud\"\nBitverse\n\"zone.bitverse\"\nKonio\n\"io.konio\"\nGateWeb3\n\"net.gateweb3\"\nUTORG\n\"app.utorg\"\nCoinWallet\n\"com.coinsdo\"\nAmmer Wallet\n\"app.ammer\"\nBinance.US\n\"us.binance\"\nMUZA\n\"co.muza\"\nFxWallet\n\"com.fxwallet\"\nRYIPAY\n\"app.ryipay\"\nRonin Wallet\n\"com.roninchain.wallet\"\nMetaWallet\n\"org.dota168\"\nAltme\n\"io.altme\"\nBitpie\n\"com.bitpie\"\nMOONSTAKE\n\"io.moonstake\"\nIndiGG\n\"gg.indi\"\nYuse Wallet\n\"io.yusetoken\"\nCoininn Wallet\n\"com.coininn\"\nf(x)Wallet\n\"io.functionx\"\npockie\n\"io.pockie\"\nAmazeWallet\n\"com.amazewallet\"\nPali Wallet\n\"com.paliwallet\"\nEASY\n\"me.easy\"\nSuperWallet\n\"live.superex\"\nSecuX\n\"com.secuxtech\"\nDIDWallet\n\"io.didwallet\"\nHalo Wallet\n\"social.halo\"\nSinohope\n\"com.sinohope\"\nBallet Crypto\n\"com.ballet\"\nOPZ Wallet\n\"com.opz\"\nFizen Wallet\n\"io.fizen\"\nKresus SuperApp\n\"com.kresus\"\nmidoin\n\"com.midoin\"\nOasys Passport\n\"com.oasys-wallet\"\nGoodDollar\n\"org.gooddollar\"\nCompetence.id\n\"id.competence\"\nSpot On Chain App\n\"ai.spotonchain.platform\"\nDGG Wallet\n\"network.dgg\"\nBeanBag\n\"llc.besc\"\nGamic\n\"app.gamic\"\nSmart.Baby\n\"baby.smart\"\nGridlock Wallet\n\"network.gridlock\"\nZeal\n\"app.zeal\"\nIApp\n\"com.ivirse\"\nDS Security SA\n\"ch.dssecurity\"\nConcordium\n\"com.concordium\"\nApe Wallet\n\"io.zkape\"\nthirdweb\n\"com.thirdweb\"\nPitaka\n\"io.pitaka\"\nTrustee Wallet\n\"com.trusteeglobal\"\nrss wallet\n\"org.mugambo\"\nDropp\n\"cc.dropp\"\nRoam\n\"xyz.roam.wallet\"\nQoin Wallet\n\"world.qoin\"\nMELDapp\n\"com.meld.app\"\nBest Wallet\n\"com.bestwallet\"\nHyperPay\n\"io.hyperpay\"\nXucre\n\"io.xucre\"\nHERE Wallet\n\"app.herewallet\"\nCake Wallet\n\"com.cakewallet\"\nuna Wallet\n\"io.unagi.unawallet\"\nEthos Self-Custody Vault\n\"io.ethos\"\nPlus Wallet\n\"app.pluswallet\"\nAT.Wallet\n\"com.authentrend\"\nPlena-App\n\"finance.plena\"\nWemixWallet\n\"com.wemix\"\nGem Wallet\n\"com.gemwallet\"\nCaesium\n\"com.caesiumlab\"\nFINTOKEN\n\"pro.fintoken\"\nPEAKDEFI\n\"com.peakdefi\"\nNodle\n\"com.nodle\"\nCryptokara\n\"com.cryptokara\"\npoolswallet\n\"com.poolsmobility.wallet\"\nVeWorld Mobile\n\"com.veworld\"\nAZCoiner\n\"com.azcoiner\"\nJambo\n\"technology.jambo\"\nUIIC\n\"vc.uincubator.api\"\nM1NTY\n\"app.m1nty\"\nNoone Wallet\n\"io.noone\"\nBitso Web3 Wallet\n\"com.bitso\"\nPuzzle Wallet\n\"online.puzzle\"\nBlackFort Wallet\n\"network.blackfort\"\nArmana Portal\n\"io.armana.portal\"\nBharatBox App\n\"io.bharatbox\"\nKaikas\n\"foundation.klaytn\"\nBlockaura\n\"com.greengloryglobal\"\nX9Wallet\n\"com.x9wallet\"\nMirai App\n\"io.miraiapp\"\nKigo\n\"io.kigo\"\nCogni\n\"com.getcogni\"\nFastex Wallet\n\"com.fastex.wallet\"\nWallacy\n\"io.wallacy\"\nCapsule\n\"com.usecapsule\"\nSavl\n\"com.savl\"\nSinum\n\"app.sinum\"\nSoulSwap\n\"finance.soulswap.app\"\nShapeShift\n\"com.shapeshift\"\nPanaroma Wallet\n\"finance.panaroma\"\nNEOPIN\n\"io.neopin\"\nAlicebob Wallet\n\"com.alicebob\"\nCyberWallet\n\"co.cyber.wallet\"\nDexTrade\n\"com.dextrade\"\nHashPack\n\"app.hashpack\"\nThe Pulse Wallet\n\"org.thepulsewallet\"\nPintu\n\"id.co.pintu\"\nBlade Wallet\n\"io.bladewallet\"\nPandoshi Wallet\n\"com.pandoshi\"\nKeychain\n\"money.keychain\"\nMPCVault | Team crypto wallet\n\"com.mpcvault.broswerplugin\"\nLegacy Wallet\n\"io.legacynetwork\"\nClave\n\"io.getclave\"\nioPay\n\"me.iopay\"\nKabila Wallet\n\"app.kabila\"\nMixin Messenger\n\"one.mixin.messenger\"\nBettatrade\n\"com.bettatrade\"\nScramberryWallet\n\"io.scramberry\"\nEarth Wallet\n\"io.earthwallet\"\nNest Wallet\n\"xyz.nestwallet\"\nEchooo Wallet\n\"xyz.echooo\"\nRenegade\n\"net.myrenegade\"\nReady\n\"io.ready\"\nhAI by Hacken\n\"ai.hacken\"\nPlutope\n\"io.plutope\"\nTrust Asset Wallet\n\"io.trustasset\"\nDfinn Wallet\n\"app.dfinnwallet\"\nBMA Wallet\n\"com.bmawallet\"\nSpatium\n\"net.spatium.wallet\"\nTransi\n\"io.transi\"\nDollet\n\"com.dolletwallet\"\nWombat\n\"app.wombat\"\nDropmate\n\"fi.dropmate\"\nDGPub App\n\"pub.dg\"\nicewal\n\"com.icewal\"\nmetapro wallet\n\"one.metapro.wallet\"\nBonuz - Social ID\n\"xyz.bonuz\"\nShido App\n\"io.shido\"\nLife DeFi\n\"co.lifedefi\"\nTobi\n\"fun.tobi\"\nClot\n\"app.clot\"\nKomet\n\"me.komet.app\"\nGUARDIIAN Wallet\n\"io.guardiianwallet\"\nWallypto\n\"io.wallypto\"\nSafeMoon\n\"com.safemoon\"\nxPortal\n\"com.elrond.maiar.wallet\"\nSWOP\n\"co.swopme\"\nBitPay Wallet\n\"com.bitpay\"\nTofee Wallet Official\n\"app.tofee\"\nZypto\n\"com.zypto\"\nOrion\n\"xyz.orion\"\nUPTN\n\"io.uptn\"\nCoinbase Wallet\n\"com.coinbase.wallet\"\nRabby\n\"io.rabby\"\nPhantom\n\"app.phantom\"\nXDEFI Wallet\n\"io.xdefi\"\nMG\n\"com.moongate.one\"\nBlanq\n\"com.blanqlabs.wallet\"\nLevain\n\"tech.levain\"\nEnkrypt\n\"com.enkrypt\"\nScramble\n\"com.scramble\"\nBackpack\n\"app.backpack\"\nFinoaConnect\n\"io.finoa\"\ntomo extension wallet\n\"inc.tomo\"\nSampleW\n\"com.walletconnect.com\"\nCompass Wallet\n\"io.leapwallet.CompassWallet\"\nLootRush\n\"com.lootrush\"\nCore\n\"app.core.extension\"\nDawn Wallet\n\"xyz.dawnwallet\"\nIn-App Wallet\n\"embedded\"\nWalletConnect\n\"walletConnect\""},
  {"URL": "https://portal.thirdweb.com/typescript/v5/toEther", "content": "toEther\nConverts a value from wei to ether.\nExample\nimport\n{ toEther }\nfrom\n\"thirdweb/utils\"\n;\ntoEther\n(\n1000000000000000000\nn\n);\n// '1'\nSignature\nfunction\ntoEther\n(\nwei\n:\nbigint\n)\n:\nstring\n;\nParameters\nwei\nThe value in wei to be converted.\nType\nlet\nwei\n:\nbigint\n;\nReturns\nReturn Type\nlet\nreturnType\n:\nstring\n;\nThe converted value in ether."},
  {"URL": "https://portal.thirdweb.com/typescript/v5/toSerializableTransaction", "content": "toSerializableTransaction\nConverts a prepared transaction to a transaction with populated options.\nExample\nimport\n{\nprepareTransaction,\ntoSerializableTransaction,\n}\nfrom\n\"thirdweb\"\n;\nconst\ntransaction\n=\nawait\nprepareTransaction\n({\ntransaction: {\nto:\n\"0x...\"\n,\nvalue:\n100\n,\n},\n});\nconst\nfinalTx\n=\nawait\ntoSerializableTransaction\n({\ntransaction,\n});\naccount.\nsendTransaction\n(finalTx);\nSignature\nfunction\ntoSerializableTransaction\n(\noptions\n:\nToSerializableTransactionOptions\n,\n)\n:\nPromise\n<\n|\n{\naccessList\n:\nundefined\n|\nAccessList\n;\nchainId\n:\nnumber\n;\ndata\n:\n`0x${\nstring\n}`\n;\ngas\n:\nbigint\n;\ngasPrice\n?:\nundefined\n;\nmaxFeePerGas\n?:\nbigint\n;\nmaxPriorityFeePerGas\n?:\nbigint\n;\nnonce\n:\nundefined\n|\nnumber\n;\nto\n:\nundefined\n|\nstring\n;\nvalue\n:\nundefined\n|\nbigint\n;\n}\n|\n{\naccessList\n:\nundefined\n|\nAccessList\n;\nchainId\n:\nnumber\n;\ndata\n:\n`0x${\nstring\n}`\n;\ngas\n:\nbigint\n;\ngasPrice\n?:\nbigint\n;\nmaxFeePerGas\n?:\nundefined\n;\nmaxPriorityFeePerGas\n?:\nundefined\n;\nnonce\n:\nundefined\n|\nnumber\n;\nto\n:\nundefined\n|\nstring\n;\nvalue\n:\nundefined\n|\nbigint\n;\n}\n>;\nParameters\noptions\nThe transaction and additional options for conversion\nType\nlet\noptions\n:\n{\nfrom\n?:\nstring\n;\ntransaction\n:\nPreparedTransaction\n<\nany\n> };\nReturns\nReturn Type\nlet\nreturnType\n:\nPromise\n<\n|\n{\naccessList\n:\nundefined\n|\nAccessList\n;\nchainId\n:\nnumber\n;\ndata\n:\n`0x${\nstring\n}`\n;\ngas\n:\nbigint\n;\ngasPrice\n?:\nundefined\n;\nmaxFeePerGas\n?:\nbigint\n;\nmaxPriorityFeePerGas\n?:\nbigint\n;\nnonce\n:\nundefined\n|\nnumber\n;\nto\n:\nundefined\n|\nstring\n;\nvalue\n:\nundefined\n|\nbigint\n;\n}\n|\n{\naccessList\n:\nundefined\n|\nAccessList\n;\nchainId\n:\nnumber\n;\ndata\n:\n`0x${\nstring\n}`\n;\ngas\n:\nbigint\n;\ngasPrice\n?:\nbigint\n;\nmaxFeePerGas\n?:\nundefined\n;\nmaxPriorityFeePerGas\n?:\nundefined\n;\nnonce\n:\nundefined\n|\nnumber\n;\nto\n:\nundefined\n|\nstring\n;\nvalue\n:\nundefined\n|\nbigint\n;\n}\n>;\nA serializable transaction for inspection or submission to an account."},
  {"URL": "https://portal.thirdweb.com/typescript/v5/toTokens", "content": "toTokens\nConverts a given number of units to a string representation with a specified number of decimal places.\nExample\nimport\n{ toTokens }\nfrom\n\"thirdweb/utils\"\n;\ntoTokens\n(\n1000000000000000000\nn\n,\n18\n);\n// '1'\nSignature\nfunction\ntoTokens\n(\nunits\n:\nbigint\n,\ndecimals\n:\nnumber\n)\n:\nstring\n;\nParameters\nunits\nThe number of units to convert.\nType\nlet\nunits\n:\nbigint\n;\ndecimals\nThe number of decimal places to include in the string representation.\nType\nlet\ndecimals\n:\nnumber\n;\nReturns\nReturn Type\nlet\nreturnType\n:\nstring\n;\nThe string representation of the converted units."},
  {"URL": "https://portal.thirdweb.com/typescript/v5/toUnits", "content": "toUnits\nConverts a string representation of a number with decimal places to a BigInt representation.\nExample\nimport\n{ toUnits }\nfrom\n\"thirdweb/utils\"\n;\ntoUnits\n(\n\"1\"\n,\n18\n);\n// 1000000000000000000n\nSignature\nfunction\ntoUnits\n(\ntokens\n:\nstring\n,\ndecimals\n:\nnumber\n)\n:\nbigint\n;\nParameters\ntokens\nThe string representation of the number, including the integer and fraction parts.\nType\nlet\ntokens\n:\nstring\n;\ndecimals\nThe number of decimal places to include in the BigInt representation.\nType\nlet\ndecimals\n:\nnumber\n;\nReturns\nReturn Type\nlet\nreturnType\n:\nbigint\n;\nThe BigInt representation of the number."},
  {"URL": "https://portal.thirdweb.com/typescript/v5/toWei", "content": "toWei\nConverts the specified number of tokens to Wei.\nExample\nimport\n{ toWei }\nfrom\n\"thirdweb/utils\"\n;\ntoWei\n(\n\"1\"\n);\n// 1000000000000000000n\nSignature\nfunction\ntoWei\n(\ntokens\n:\nstring\n)\n:\nbigint\n;\nParameters\ntokens\nThe number of tokens to convert.\nType\nlet\ntokens\n:\nstring\n;\nReturns\nReturn Type\nlet\nreturnType\n:\nbigint\n;\nThe converted value in Wei."},
  {"URL": "https://portal.thirdweb.com/typescript/v5/transactions", "content": "Transactions\nTransactions are the primary way to read and write to the blockchain.\nReading State\nPreparing Transactions\nSending Transactions"},
  {"URL": "https://portal.thirdweb.com/typescript/v5/transactions/prepare", "content": "Preparing Transactions\nAll transactions sent with the SDK need to be prepared first. Preparing a transaction is synchronous, lightweight and does not require any network requests. It also gives you type-safe definitions for your contract calls.\nPreparing a contract call\nThe recommended way to prepare a contract call is to pass the Solidity method signature and the params. This is type-safe based on the Solidity method signature you define. You can get your desired contract method signature from the solidity code directly.\nimport\n{ prepareContractCall, toWei }\nfrom\n\"thirdweb\"\n;\nconst\ntx\n=\nprepareContractCall\n({\ncontract,\n// Pass the method signature that you want to call\nmethod:\n\"function mintTo(address to, uint256 amount)\"\n,\n// and the params for that method\n// Their types are automatically inferred based on the method signature\nparams: [\n\"0x123...\"\n,\ntoWei\n(\n\"100\"\n)],\n});\nThis will return a prepared transaction object that is ready to be sent to the blockchain and can be acted on in various ways.\nPreparing a raw transaction\nYou can also create a raw transaction directly. This is useful when you want to send ether to an address for example, or when you already have encoded data.\nimport\n{ prepareTransaction, toWei }\nfrom\n\"thirdweb\"\n;\nconst\ntransaction\n=\nprepareTransaction\n({\n// The account that will be the receiver\nto:\n\"0x456...\"\n,\n// The value is the amount of ether you want to send with the transaction\nvalue:\ntoWei\n(\n\"1\"\n),\n// The chain to execute the transaction on\nchain:\ndefineChain\n(\n1\n),\n// Your thirdweb client\nclient,\n});\nOther ways to prepare a transaction\nThere are few other ways to prepare a contract call, all of these return the same transaction object.\nGenerating extension functions for a deployed contract\nUsing the CLI, you can generate optimized functions for all the possible calls to a contract. This saves you time and precomputes all the necessary encoding.\nnpx\nthirdweb\ngenerate\n<\ncontractI\nd\n>\n/\n<\ncontractAddres\ns\n>\nRead more on how to\ngenerate extension functions using the CLI\n.\nExplicit Contract ABI\nAnother way to get type safety is to pass the full contract ABI to\ngetContract\n. This will give you autocompletion for all methods declared in the ABI. There is a slight extract cost of having the full ABI in your code which can be pretty large.\nimport\n{ getContract, prepareContractCall, toWei }\nfrom\n\"thirdweb\"\n;\nconst\ncontract\n=\ngetContract\n({\nclient,\nchainId,\n// The ABI for the contract is defined here\nabi: [\n...\n{\nname:\n\"mintTo\"\n,\ninputs: [\n{\ntype:\n\"address\"\n,\nname:\n\"to\"\n,\n},\n{\ntype:\n\"uint256\"\n,\nname:\n\"amount\"\n,\n},\n],\ntype:\n\"function\"\n,\n}\n...\n],\n});\nconst\ntx\n=\nprepareContractCall\n({\ncontract,\n// We get auto-completion for all the available functions on the contract ABI\nmethod:\n\"mintTo\"\n,\n// including full type-safety for the params\nparams: [\n\"0x123...\"\n,\ntoWei\n(\n\"100\"\n)],\n});\nABI snippet\nAs an alternative to passing the full ABI, you can pass a snippet of the ABI for the method you want to call. This is useful when you only want to call a single method and don't want to have the full ABI in your code.\nimport\n{ prepareContractCall, toWei }\nfrom\n\"thirdweb\"\n;\nconst\ntx\n=\nprepareContractCall\n({\ncontract,\n// Pass a snippet of the ABI for the method you want to call.\nmethod: {\nname:\n\"mintTo\"\n,\ninputs: [\n{\ntype:\n\"address\"\n,\nname:\n\"to\"\n,\n},\n{\ntype:\n\"uint256\"\n,\nname:\n\"amount\"\n,\n},\n],\ntype:\n\"function\"\n,\n},\n// The Types of `params` are automatically inferred based on the ABI inputs.\nparams: [\n\"0x123...\"\n,\ntoWei\n(\n\"100\"\n)],\n});\nAutomatic ABI Resolution\nFinally, you can dynamically resolve contract methods at runtime using the\nresolveMethod\nfunction. This is the best way to handle contracts you don't know the ABI of in advance but it is also less performant and not type-safe.\nimport\n{ prepareContractCall, resolveMethod, toWei }\nfrom\n\"thirdweb\"\n;\nconst\ntx\n=\nprepareContractCall\n({\ncontract,\n// in this case we only pass the name of the method we want to call\nmethod:\nresolveMethod\n(\n\"mintTo\"\n),\n// however using this method we lose type safety for our params\nparams: [\n\"0x123...\"\n,\ntoWei\n(\n\"100\"\n)],\n});\nPlease note\nThis method is convenient, however, it is also:\nless performant at runtime (it has to resolve the ABI of the contract and then match the method name you provide)\nnot type-safe (you lose type safety for your params)\nThere are cases where you specifically\nneed\nto be able to resolve methods dynamically at runtime, in which case this method is useful."},
  {"URL": "https://portal.thirdweb.com/typescript/v5/transactions/read", "content": "Reading contract state\nThe recommended way to read the contract state is to use the\nreadContract\nfunction and pass the Solidity method signature and the params. This is type-safe based on the Solidity method signature you define. You can get your desired contract method signature from the solidity code directly.\nimport\n{ readContract }\nfrom\n\"thirdweb\"\n;\nconst\nbalance\n=\nawait\nreadContract\n({\ncontract: contract,\nmethod:\n\"function balanceOf(address) view returns (uint256)\"\n,\nparams: [\n\"0x123...\"\n],\n});\nThis will execute the read immediately and return the result from the blockchain.\nGenerating all read functions for a deployed contract\nUsing the CLI, you can generate optimized functions for all the possible calls to a contract. This saves you time and precomputes all the necessary encoding.\nnpx\nthirdweb\ngenerate\n<\ncontractI\nd\n>\n/\n<\ncontractAddres\ns\n>\nRead more on how to\ngenerate extension functions using the CLI\n."},
  {"URL": "https://portal.thirdweb.com/typescript/v5/transactions/send", "content": "Acting on a prepared transaction\nTransactions have a variety of actions that can be called on them, in all cases this is done by passing the transaction to the various action functions.\nSending a transaction\nSend the prepared transaction to the blockchain. Sending a transaction requires a wallet.\nSee\nWallets\nfor more information on how to create a wallet.\nimport\n{ sendTransaction }\nfrom\n\"thirdweb\"\n;\nimport\n{ createWallet }\nfrom\n\"thirdweb/wallets\"\n;\nconst\nwallet\n=\ncreateWallet\n(\n\"io.metamask\"\n);\nconst\naccount\n=\nawait\nwallet.\nconnect\n({ client });\nconst\ntransactionResult\n=\nawait\nsendTransaction\n({\ntransaction,\naccount,\n});\nsendAndConfirmTransaction\nSend a transaction and wait for it to be mined. Useful when you want to block until the transaction is fully confirmed onchain before proceeding to the next step.\nimport\n{ sendAndConfirmTransaction }\nfrom\n\"thirdweb\"\n;\nimport\n{ createWallet }\nfrom\n\"thirdweb/wallets\"\n;\nconst\nwallet\n=\ncreateWallet\n(\n\"io.metamask\"\n);\nconst\naccount\n=\nawait\nwallet.\nconnect\n({ client });\nconst\nreceipt\n=\nawait\nsendAndConfirmTransaction\n({\ntransaction,\naccount,\n});\nwaitForReceipt\nWait for a transaction to be mined and get the transaction receipt.\nimport\n{ sendTransaction, waitForReceipt }\nfrom\n\"thirdweb\"\n;\nimport\n{ createWallet }\nfrom\n\"thirdweb/wallets\"\n;\nconst\nwallet\n=\ncreateWallet\n(\n\"io.metamask\"\n);\nconst\naccount\n=\nawait\nwallet.\nconnect\n({ client });\nconst\ntransactionResult\n=\nawait\nsendTransaction\n({\ntransaction,\naccount,\n});\nconst\nreceipt\n=\nawait\nwaitForReceipt\n(transactionResult);\nestimateGas\nEstimating gas used by a transaction\nimport\n{ estimateGas }\nfrom\n\"thirdweb\"\n;\nconst\ngasEstimate\n=\nawait\nestimateGas\n({ transaction });\nconsole.\nlog\n(\n\"estmated gas used\"\n, gasEstimate);\nestimateGasCost\nEstimating gas cost in ether and wei for a transaction\nimport\n{ estimateGas }\nfrom\n\"thirdweb\"\n;\nconst\ngasCost\n=\nawait\nestimateGasCost\n({ transaction });\nconsole.\nlog\n(\n\"cost in ether\"\n, gasCost.ether);\nsimulateTransaction\nSimulate a transaction to see if it would be successful.\nimport\n{ simulateTransaction }\nfrom\n\"thirdweb\"\n;\nconst\nresult\n=\nawait\nsimulateTransaction\n({ transaction });\nconsole.\nlog\n(\n\"simulation result\"\n, result);\nencode\nEncode a transaction data to be used later\nimport\n{ encode }\nfrom\n\"thirdweb\"\n;\nconst\ndata\n=\nawait\nencode\n(transaction);\nconsole.\nlog\n(\n\"encoded data\"\n, data);"},
  {"URL": "https://portal.thirdweb.com/typescript/v5/viemAdapter", "content": "viemAdapter\nConverts thirdweb accounts and contracts to viem wallet clients and contract objects or the other way around.\nlet\nviemAdapter\n:\n{\ncontract\n:\n{\nfromViem\n:\n(\noptions\n:\nFromViemContractOptions\n<\nTAbi\n>)\n=>\nThirdwebContract\n<\nTAbi\n>;\ntoViem\n:\n{  } };\npublicClient\n:\n{\ntoViem\n:\n(\noptions\n:\nToViemPublicClientOptions\n)\n=>\nPublicClient\n};\nwalletClient\n:\n{\nfromViem\n:\n(\noptions\n:\n{\nwalletClient\n:\n{\naccount\n:\nundefined\n|\n(\nAccount\n);\naddChain\n:\n(\nargs\n:\nAddChainParameters\n)\n=>\nPromise\n<\nvoid\n>;\nbatch\n?:\n{\nmulticall\n?:\nboolean\n|\n({\nbatchSize\n?:\nnumber\n;\nwait\n?:\nnumber\n}) };\ncacheTime\n:\nnumber\n;\nccipRead\n?:\nfalse\n|\n({\nrequest\n?:\n(\nparameters\n:\nCcipRequestParameters\n)\n=>\nPromise\n<\n`0x${\n...\n}`\n> });\nchain\n:\nundefined\n|\n(\nChain\n);\ndeployContract\n:\n(\nargs\n:\nDeployContractParameters\n<\nabi\n,\nundefined\n|\n(\nChain\n),\nundefined\n|\n(\nAccount\n),\nchainOverride\n>)\n=>\nPromise\n<\n`0x${\nstring\n}`\n>;\nextend\n:\n(\nfn\n:\n(\nclient\n:\nClient\n<\nTransport\n,\nundefined\n|\n(\nChain\n),\nundefined\n|\n(\nAccount\n),\nWalletRpcSchema\n,\nWalletActions\n<\nundefined\n|\n(\nChain\n),\nundefined\n|\n(\nAccount\n)>>)\n=>\nclient\n)\n=>\nClient\n<\nTransport\n,\nundefined\n|\n(\nChain\n),\nundefined\n|\n(\nAccount\n),\nWalletRpcSchema\n, ({[\nK\nin\nstring\n|\nnumber\n|\nsymbol\n]\n:\nclient\n[\nK\n]})\n&\n(\nWalletActions\n<\nundefined\n|\n(\nChain\n),\nundefined\n|\n(\nAccount\n)>)>;\ngetAddresses\n:\n()\n=>\nPromise\n<\nGetAddressesReturnType\n>;\ngetChainId\n:\n()\n=>\nPromise\n<\nnumber\n>;\ngetPermissions\n:\n()\n=>\nPromise\n<\nGetPermissionsReturnType\n>;\nkey\n:\nstring\n;\nname\n:\nstring\n;\npollingInterval\n:\nnumber\n;\nprepareTransactionRequest\n:\n(\nargs\n:\nPrepareTransactionRequestParameters\n<\nundefined\n|\n(\nChain\n),\nundefined\n|\n(\nAccount\n),\nchainOverride\n,\naccountOverride\n,\nrequest\n>)\n=>\nPromise\n<{[\nK\nin\nstring\n|\nnumber\n|\nsymbol\n]\n:\n(\nUnionRequiredBy\n<..., ...>)\n&\n(\n...\nextends\n... ? ...\n:\n...)[\nK\n]}>;\nrequest\n:\nEIP1193RequestFn\n<\nWalletRpcSchema\n>;\nrequestAddresses\n:\n()\n=>\nPromise\n<\nRequestAddressesReturnType\n>;\nrequestPermissions\n:\n(\nargs\n:\n{\neth_accounts\n:\nRecord\n<\nstring\n,\nany\n> })\n=>\nPromise\n<\nRequestPermissionsReturnType\n>;\nsendRawTransaction\n:\n(\nargs\n:\nSendRawTransactionParameters\n)\n=>\nPromise\n<\n`0x${\nstring\n}`\n>;\nsendTransaction\n:\n(\nargs\n:\nSendTransactionParameters\n<\nundefined\n|\n(\nChain\n),\nundefined\n|\n(\nAccount\n),\nchainOverride\n,\nrequest\n>)\n=>\nPromise\n<\n`0x${\nstring\n}`\n>;\nsignMessage\n:\n(\nargs\n:\nSignMessageParameters\n<\nundefined\n|\n(\nAccount\n)>)\n=>\nPromise\n<\n`0x${\nstring\n}`\n>;\nsignTransaction\n:\n(\nargs\n:\nSignTransactionParameters\n<\nundefined\n|\n(\nChain\n),\nundefined\n|\n(\nAccount\n),\nchainOverride\n>)\n=>\nPromise\n<(\n`0x02${\nstring\n}`\n)\n|\n(\n`0x01${\nstring\n}`\n)\n|\n(\n`0x03${\nstring\n}`\n)\n|\n(\n`0x04${\nstring\n}`\n)\n|\n(\nTransactionSerializedLegacy\n)>;\nsignTypedData\n:\n(\nargs\n:\nSignTypedDataParameters\n<\ntypedData\n,\nprimaryType\n,\nundefined\n|\n(\nAccount\n)>)\n=>\nPromise\n<\n`0x${\nstring\n}`\n>;\nswitchChain\n:\n(\nargs\n:\nSwitchChainParameters\n)\n=>\nPromise\n<\nvoid\n>;\ntransport\n:\n(\nTransportConfig\n<\nstring\n,\nEIP1193RequestFn\n>)\n&\n(\nRecord\n<\nstring\n,\nany\n>);\ntype\n:\nstring\n;\nuid\n:\nstring\n;\nwatchAsset\n:\n(\nargs\n:\nWatchAssetParams\n)\n=>\nPromise\n<\nboolean\n>;\nwriteContract\n:\n(\nargs\n:\nWriteContractParameters\n<\nabi\n,\nfunctionName\n,\nargs\n,\nundefined\n|\n(\nChain\n),\nundefined\n|\n(\nAccount\n),\nchainOverride\n>)\n=>\nPromise\n<\n`0x${\nstring\n}`\n> } })\n=>\nAccount\n;\ntoViem\n:\n(\noptions\n:\nToViemWalletClientOptions\n)\n=>\nWalletClient\n} }\ncontract\nCreates a ThirdwebContract from a Viem contract or the other way around.\ntype\ncontract\n=\n{\nfromViem\n:\n(\noptions\n:\nFromViemContractOptions\n<\nTAbi\n>,\n)\n=>\nThirdwebContract\n<\nTAbi\n>;\ntoViem\n:\n{};\n};\nExample\nfromViem\nimport\n{ viemAdapter }\nfrom\n\"thirdweb/adapters/viem\"\n;\nconst\ncontract\n=\nviemAdapter.contract.\nfromViem\n({\nviemContract: viemContract,\nchain: ethereum,\nclient,\n});\ntoViem\nimport\n{ viemAdapter }\nfrom\n\"thirdweb/adapters\"\n;\nconst\nviemContract\n=\nawait\nviemAdapter.contract.\ntoViem\n({\nthirdwebContract,\n});\npublicClient\nConverts options to a Viem public client.\ntype\npublicClient\n=\n{\ntoViem\n:\n(\noptions\n:\nToViemPublicClientOptions\n)\n=>\nPublicClient\n;\n};\nExample\nimport\n{ viemAdapter }\nfrom\n\"thirdweb/adapters/viem\"\n;\nconst\npublicClient\n=\nviemAdapter.publicClient.\ntoViem\n({\nchain: ethereum,\nclient,\n});\nwalletClient\nConverts a thirdweb account to a Viem Wallet client or the other way around.\ntype\nwalletClient\n=\n{\nfromViem\n:\n(\noptions\n:\n{\nwalletClient\n:\n{\naccount\n:\nundefined\n|\n(\nAccount\n);\naddChain\n:\n(\nargs\n:\nAddChainParameters\n)\n=>\nPromise\n<\nvoid\n>;\nbatch\n?:\n{\nmulticall\n?:\nboolean\n|\n({\nbatchSize\n?:\nnumber\n;\nwait\n?:\nnumber\n}) };\ncacheTime\n:\nnumber\n;\nccipRead\n?:\nfalse\n|\n({\nrequest\n?:\n(\nparameters\n:\nCcipRequestParameters\n)\n=>\nPromise\n<\n`0x${\n...\n}`\n> });\nchain\n:\nundefined\n|\n(\nChain\n);\ndeployContract\n:\n(\nargs\n:\nDeployContractParameters\n<\nabi\n,\nundefined\n|\n(\nChain\n),\nundefined\n|\n(\nAccount\n),\nchainOverride\n>)\n=>\nPromise\n<\n`0x${\nstring\n}`\n>;\nextend\n:\n(\nfn\n:\n(\nclient\n:\nClient\n<\nTransport\n,\nundefined\n|\n(\nChain\n),\nundefined\n|\n(\nAccount\n),\nWalletRpcSchema\n,\nWalletActions\n<\nundefined\n|\n(\nChain\n),\nundefined\n|\n(\nAccount\n)>>)\n=>\nclient\n)\n=>\nClient\n<\nTransport\n,\nundefined\n|\n(\nChain\n),\nundefined\n|\n(\nAccount\n),\nWalletRpcSchema\n, ({[\nK\nin\nstring\n|\nnumber\n|\nsymbol\n]\n:\nclient\n[\nK\n]})\n&\n(\nWalletActions\n<\nundefined\n|\n(\nChain\n),\nundefined\n|\n(\nAccount\n)>)>;\ngetAddresses\n:\n()\n=>\nPromise\n<\nGetAddressesReturnType\n>;\ngetChainId\n:\n()\n=>\nPromise\n<\nnumber\n>;\ngetPermissions\n:\n()\n=>\nPromise\n<\nGetPermissionsReturnType\n>;\nkey\n:\nstring\n;\nname\n:\nstring\n;\npollingInterval\n:\nnumber\n;\nprepareTransactionRequest\n:\n(\nargs\n:\nPrepareTransactionRequestParameters\n<\nundefined\n|\n(\nChain\n),\nundefined\n|\n(\nAccount\n),\nchainOverride\n,\naccountOverride\n,\nrequest\n>)\n=>\nPromise\n<{[\nK\nin\nstring\n|\nnumber\n|\nsymbol\n]\n:\n(\nUnionRequiredBy\n<..., ...>)\n&\n(\n...\nextends\n... ? ...\n:\n...)[\nK\n]}>;\nrequest\n:\nEIP1193RequestFn\n<\nWalletRpcSchema\n>;\nrequestAddresses\n:\n()\n=>\nPromise\n<\nRequestAddressesReturnType\n>;\nrequestPermissions\n:\n(\nargs\n:\n{\neth_accounts\n:\nRecord\n<\nstring\n,\nany\n> })\n=>\nPromise\n<\nRequestPermissionsReturnType\n>;\nsendRawTransaction\n:\n(\nargs\n:\nSendRawTransactionParameters\n)\n=>\nPromise\n<\n`0x${\nstring\n}`\n>;\nsendTransaction\n:\n(\nargs\n:\nSendTransactionParameters\n<\nundefined\n|\n(\nChain\n),\nundefined\n|\n(\nAccount\n),\nchainOverride\n,\nrequest\n>)\n=>\nPromise\n<\n`0x${\nstring\n}`\n>;\nsignMessage\n:\n(\nargs\n:\nSignMessageParameters\n<\nundefined\n|\n(\nAccount\n)>)\n=>\nPromise\n<\n`0x${\nstring\n}`\n>;\nsignTransaction\n:\n(\nargs\n:\nSignTransactionParameters\n<\nundefined\n|\n(\nChain\n),\nundefined\n|\n(\nAccount\n),\nchainOverride\n>)\n=>\nPromise\n<(\n`0x02${\nstring\n}`\n)\n|\n(\n`0x01${\nstring\n}`\n)\n|\n(\n`0x03${\nstring\n}`\n)\n|\n(\n`0x04${\nstring\n}`\n)\n|\n(\nTransactionSerializedLegacy\n)>;\nsignTypedData\n:\n(\nargs\n:\nSignTypedDataParameters\n<\ntypedData\n,\nprimaryType\n,\nundefined\n|\n(\nAccount\n)>)\n=>\nPromise\n<\n`0x${\nstring\n}`\n>;\nswitchChain\n:\n(\nargs\n:\nSwitchChainParameters\n)\n=>\nPromise\n<\nvoid\n>;\ntransport\n:\n(\nTransportConfig\n<\nstring\n,\nEIP1193RequestFn\n>)\n&\n(\nRecord\n<\nstring\n,\nany\n>);\ntype\n:\nstring\n;\nuid\n:\nstring\n;\nwatchAsset\n:\n(\nargs\n:\nWatchAssetParams\n)\n=>\nPromise\n<\nboolean\n>;\nwriteContract\n:\n(\nargs\n:\nWriteContractParameters\n<\nabi\n,\nfunctionName\n,\nargs\n,\nundefined\n|\n(\nChain\n),\nundefined\n|\n(\nAccount\n),\nchainOverride\n>)\n=>\nPromise\n<\n`0x${\nstring\n}`\n> } })\n=>\nAccount\n;\ntoViem\n:\n(\noptions\n:\nToViemWalletClientOptions\n)\n=>\nWalletClient\n}\nExample\ntoViem\nimport\n{ viemAdapter }\nfrom\n\"thirdweb/adapters/viem\"\n;\nconst\nwalletClient\n=\nviemAdapter.walletClient.\ntoViem\n({\naccount,\nclient,\nchain: ethereum,\n});\nfromViem\nimport\n{ viemAdapter }\nfrom\n\"thirdweb/adapters\"\n;\nconst\naccount\n=\nviemAdapter.walletClient.\nfromViem\n({\nwalletClient,\n});"},
  {"URL": "https://portal.thirdweb.com/typescript/v5/wallets", "content": "Accounts & Wallets\nWe distinguish between \"accounts\" and \"wallets\" in the thirdweb SDK. We believe this ultimately provides a more predictable and flexible API for developers.\nWhat is an Account?\nAn account always has an\naddress\nand a way to\nsign\nmessages, transactions, and typed data.\nAn account is always mapped to exactly one address on the blockchain.\nAn account cannot be \"connected\" or \"disconnected\" like a wallet, instead it is often the result of a wallet being connected.\nSee also:\nAccount (ethereum.org)\nWhat is a Wallet?\nA wallet \"contains\" one or more accounts.\nA wallet can be \"connected\" (often prompting the user for approval) or \"disconnected\".\nA wallet cannot independently sign messages, transactions, or typed data, instead, it delegates this to the account(s) it \"contains\".\nSupported Wallets\nSee all 350+ wallets supported by the Connect SDK\nExample: Connect a wallet and access an account to send a transaction.\nimport\n{ sendTransaction }\nfrom\n\"thirdweb\"\n;\n// We use MetaMask wallet as an example, the pattern is the same for all wallets\nimport\n{ createWallet }\nfrom\n\"thirdweb/wallets\"\n;\n// initialize the wallet, you can pick any of the 300+ wallet connectors supported\n// wallet ids are typed, let your TS editor autocomplete them for you\n// ex: \"io.metamask\", \"com.coinbase.wallet\", \"me.rainbow\", etc...\nconst\nwallet\n=\ncreateWallet\n(\n\"io.metamask\"\n);\n// connect the wallet, this returns a promise that resolves to the connected account\nconst\naccount\n=\nawait\nwallet.\nconnect\n({\n// pass the client you created with `createThirdwebClient()`\nclient,\n});\n// sign & send a transaction with the account -> returns the transaction hash\nconst\n{\ntransactionHash\n}\n=\nawait\nsendTransaction\n({\n// assuming you have called `prepareTransaction()` or `prepareContractCall()` before which returns the prepared transaction to send\ntransaction,\n// Pass the account to sign the transaction with\naccount,\n});"}
  
  ]